// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CarbonCore.Protocol.Resource {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ResourceProtocol {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_resource_StoredMatrix__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.StoredMatrix, global::CarbonCore.Protocol.Resource.StoredMatrix.Builder> internal__static_resource_StoredMatrix__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_Raw__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.Raw, global::CarbonCore.Protocol.Resource.Raw.Builder> internal__static_resource_Raw__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_CompiledShader__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.CompiledShader, global::CarbonCore.Protocol.Resource.CompiledShader.Builder> internal__static_resource_CompiledShader__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_ModelElement__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.ModelElement, global::CarbonCore.Protocol.Resource.ModelElement.Builder> internal__static_resource_ModelElement__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_ModelMaterial__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.ModelMaterial, global::CarbonCore.Protocol.Resource.ModelMaterial.Builder> internal__static_resource_ModelMaterial__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_Model__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.Model, global::CarbonCore.Protocol.Resource.Model.Builder> internal__static_resource_Model__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_ModelGroup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.ModelGroup, global::CarbonCore.Protocol.Resource.ModelGroup.Builder> internal__static_resource_ModelGroup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_StageProperty__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.StageProperty, global::CarbonCore.Protocol.Resource.StageProperty.Builder> internal__static_resource_StageProperty__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_StageCamera__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.StageCamera, global::CarbonCore.Protocol.Resource.StageCamera.Builder> internal__static_resource_StageCamera__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_StageLight__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.StageLight, global::CarbonCore.Protocol.Resource.StageLight.Builder> internal__static_resource_StageLight__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_StageModel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.StageModel, global::CarbonCore.Protocol.Resource.StageModel.Builder> internal__static_resource_StageModel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_Stage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.Stage, global::CarbonCore.Protocol.Resource.Stage.Builder> internal__static_resource_Stage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_Script__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.Script, global::CarbonCore.Protocol.Resource.Script.Builder> internal__static_resource_Script__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_CsamlAttribute__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.CsamlAttribute, global::CarbonCore.Protocol.Resource.CsamlAttribute.Builder> internal__static_resource_CsamlAttribute__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_CsamlNode__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.CsamlNode, global::CarbonCore.Protocol.Resource.CsamlNode.Builder> internal__static_resource_CsamlNode__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_Csaml__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.Csaml, global::CarbonCore.Protocol.Resource.Csaml.Builder> internal__static_resource_Csaml__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_resource_UserInterface__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.UserInterface, global::CarbonCore.Protocol.Resource.UserInterface.Builder> internal__static_resource_UserInterface__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ResourceProtocol() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChdQcm90b2J1Zi9yZXNvdXJjZS5wcm90bxIIcmVzb3VyY2UaJGdvb2dsZS9w" + 
          "cm90b2J1Zi9jc2hhcnBfb3B0aW9ucy5wcm90byIcCgxTdG9yZWRNYXRyaXgS" + 
          "DAoERGF0YRgBIAMoAiITCgNSYXcSDAoERGF0YRgBIAIoDCI/Cg5Db21waWxl" + 
          "ZFNoYWRlchISCgdWZXJzaW9uGAEgAigFOgExEgsKA01ENRgCIAIoDBIMCgRE" + 
          "YXRhGAMgAigMImIKDE1vZGVsRWxlbWVudBIUCghQb3NpdGlvbhgBIAMoAkIC" + 
          "EAESEgoGTm9ybWFsGAIgAygCQgIQARITCgdUZXh0dXJlGAMgAygCQgIQARIT" + 
          "CgdUYW5nZW50GAQgAygCQgIQASL7AgoNTW9kZWxNYXRlcmlhbBI3CgRUeXBl" + 
          "GAEgAigOMikucmVzb3VyY2UuTW9kZWxNYXRlcmlhbC5Nb2RlbE1hdGVyaWFs" + 
          "VHlwZRIMCgROYW1lGAIgAigJEhYKDkRpZmZ1c2VUZXh0dXJlGAMgASgJEhUK" + 
          "DU5vcm1hbFRleHR1cmUYBCABKAkSFAoMQWxwaGFUZXh0dXJlGAUgASgJEhcK" + 
          "D1NwZWN1bGFyVGV4dHVyZRgGIAEoCRIRCglTaGlueW5lc3MYCiACKAISEgoK" + 
          "UmVmcmFjdGlvbhgLIAIoAhIUCgxUcmFuc3BhcmFuY3kYDCABKAISGAoMQ29s" + 
          "b3JEaWZmdXNlGBQgAygCQgIQARIZCg1Db2xvclNwZWN1bGFyGBUgAygCQgIQ" + 
          "ARIZCg1Db2xvckVtaXNzaW9uGBYgAygCQgIQARIYCgxDb2xvckFtYmllbnQY" + 
          "FyADKAJCAhABIh4KEU1vZGVsTWF0ZXJpYWxUeXBlEgkKBUJsaW5uEAAiswEK" + 
          "BU1vZGVsEhIKB1ZlcnNpb24YASACKAU6ATESDAoETmFtZRgCIAIoCRIhChJU" + 
          "YW5nZW50c0NhbGN1bGF0ZWQYAyACKAg6BWZhbHNlEigKCEVsZW1lbnRzGBQg" + 
          "AygLMhYucmVzb3VyY2UuTW9kZWxFbGVtZW50EioKCU1hdGVyaWFscxgVIAMo" + 
          "CzIXLnJlc291cmNlLk1vZGVsTWF0ZXJpYWwSDwoHSW5kaWNlcxgWIAMoDSLj" + 
          "AQoKTW9kZWxHcm91cBISCgdWZXJzaW9uGAEgAigFOgExEgwKBE5hbWUYAiAC" + 
          "KAkSEgoGT2Zmc2V0GAogAygCQgIQARIUCghSb3RhdGlvbhgLIAMoAkICEAES" + 
          "EQoFU2NhbGUYDCADKAJCAhABEh8KBk1vZGVscxgUIAMoCzIPLnJlc291cmNl" + 
          "Lk1vZGVsEiQKBkdyb3VwcxgVIAMoCzIULnJlc291cmNlLk1vZGVsR3JvdXAS" + 
          "LwoPVHJhbnNmb3JtYXRpb25zGBYgAygLMhYucmVzb3VyY2UuU3RvcmVkTWF0" + 
          "cml4IqQBCg1TdGFnZVByb3BlcnR5EgoKAklkGAEgAigJEjcKBFR5cGUYAiAC" + 
          "KA4yKS5yZXNvdXJjZS5TdGFnZVByb3BlcnR5LlN0YWdlUHJvcGVydHlUeXBl" + 
          "EgwKBERhdGEYAyACKAwiQAoRU3RhZ2VQcm9wZXJ0eVR5cGUSCwoHVW5rbm93" + 
          "bhAAEgoKBlN0cmluZxABEgkKBUZsb2F0EAISBwoDSW50EAMimwEKC1N0YWdl" + 
          "Q2FtZXJhEgoKAklkGAEgAigJEhMKC0ZpZWxkT2ZWaWV3GAIgAigCEhIKCkxh" + 
          "eWVyRmxhZ3MYCiABKAUSKwoKUHJvcGVydGllcxgLIAMoCzIXLnJlc291cmNl" + 
          "LlN0YWdlUHJvcGVydHkSFAoIUG9zaXRpb24YFCADKAJCAhABEhQKCFJvdGF0" + 
          "aW9uGBUgAygCQgIQASLvAgoKU3RhZ2VMaWdodBIKCgJJZBgBIAIoCRIxCgRU" + 
          "eXBlGAIgAigOMiMucmVzb3VyY2UuU3RhZ2VMaWdodC5TdGFnZUxpZ2h0VHlw" + 
          "ZRIOCgZSYWRpdXMYAyABKAISEQoJSW50ZW5zaXR5GAQgASgCEhgKEEFtYmll" + 
          "bnRJbnRlbnNpdHkYBSABKAISEAoIU3BvdFNpemUYBiABKAISDQoFQW5nbGUY" + 
          "ByABKAISEgoKTGF5ZXJGbGFncxgKIAEoBRIrCgpQcm9wZXJ0aWVzGAsgAygL" + 
          "MhcucmVzb3VyY2UuU3RhZ2VQcm9wZXJ0eRIUCghMb2NhdGlvbhgUIAMoAkIC" + 
          "EAESFQoJRGlyZWN0aW9uGBUgAygCQgIQARIRCgVDb2xvchgWIAMoAkICEAEi" + 
          "QwoOU3RhZ2VMaWdodFR5cGUSCwoHVW5rbm93bhAAEggKBFNwb3QQARIPCgtE" + 
          "aXJlY3Rpb25hbBACEgkKBVBvaW50EAMi2AEKClN0YWdlTW9kZWwSCgoCSWQY" + 
          "ASACKAkSEwoLUmVmZXJlbmNlSWQYAiABKAUSEgoKTGF5ZXJGbGFncxgKIAEo" + 
          "BRIrCgpQcm9wZXJ0aWVzGAsgAygLMhcucmVzb3VyY2UuU3RhZ2VQcm9wZXJ0" + 
          "eRIXCgtUcmFuc2xhdGlvbhgUIAMoAkICEAESFAoIUm90YXRpb24YFSADKAJC" + 
          "AhABEhEKBVNjYWxlGBYgAygCQgIQARImCghDaGlsZHJlbhgeIAMoCzIULnJl" + 
          "c291cmNlLlN0YWdlTW9kZWwiowEKBVN0YWdlEhIKB1ZlcnNpb24YASACKAU6" + 
          "ATESEgoKUmVmZXJlbmNlcxgJIAMoCRImCgdDYW1lcmFzGAogAygLMhUucmVz" + 
          "b3VyY2UuU3RhZ2VDYW1lcmESJAoGTGlnaHRzGAsgAygLMhQucmVzb3VyY2Uu" + 
          "U3RhZ2VMaWdodBIkCgZNb2RlbHMYDCADKAsyFC5yZXNvdXJjZS5TdGFnZU1v" + 
          "ZGVsIjAKBlNjcmlwdBISCgdWZXJzaW9uGAEgAigFOgExEhIKClNjcmlwdERh" + 
          "dGEYAiACKAwijQYKDkNzYW1sQXR0cmlidXRlEjkKBFR5cGUYASACKA4yKy5y" + 
          "ZXNvdXJjZS5Dc2FtbEF0dHJpYnV0ZS5Dc2FtbEF0dHJpYnV0ZVR5cGUSSwoJ" + 
          "VmFsdWVUeXBlGAIgAigOMjAucmVzb3VyY2UuQ3NhbWxBdHRyaWJ1dGUuQ3Nh" + 
          "bWxBdHRyaWJ1dGVWYWx1ZVR5cGU6BlN0cmluZxITCgtWYWx1ZVN0cmluZxgD" + 
          "IAEoCRIQCghWYWx1ZUludBgEIAEoBRISCgpWYWx1ZUZsb2F0GAUgASgCIuYB" + 
          "ChJDc2FtbEF0dHJpYnV0ZVR5cGUSCwoHVW5rbm93bhAAEg8KC0NvbnRyb2xO" + 
          "YW1lEAESCQoFV2lkdGgQAhIKCgZIZWlnaHQQAxIOCgpMYXlvdXRNb2RlEAQS" + 
          "CAoETW9kZRAFEggKBFRleHQQBhIKCgZTb3VyY2UQBxIRCg1UeXBlQXR0cmli" + 
          "dXRlEAgSCAoETGVmdBAJEgcKA1RvcBAKEgkKBVJpZ2h0EAsSCgoGQm90dG9t" + 
          "EAwSFwoTSG9yaXpvbnRhbEFsaWdubWVudBANEhUKEVZlcnRpY2FsQWxpZ25t" + 
          "ZW50EA4iOQoXQ3NhbWxBdHRyaWJ1dGVWYWx1ZVR5cGUSCgoGU3RyaW5nEAAS" + 
          "BwoDSW50EAESCQoFRmxvYXQQAiI5Cg9Dc2FtbExheW91dE1vZGUSEgoOTGF5" + 
          "b3V0QWJzb2x1dGUQABISCg5MYXlvdXRSZWxhdGl2ZRABIjkKFkNzYW1sQ29u" + 
          "dHJvbFNpemluZ01vZGUSDgoKU2l6ZU5vcm1hbBAAEg8KC1NpemVTdHJldGNo" + 
          "EAEiTwocQ3NhbWxIb3Jpem9udGFsQWxpZ25tZW50RW51bRINCglBbGlnbkxl" + 
          "ZnQQABIQCgxBbGlnbkNlbnRlckgQARIOCgpBbGlnblJpZ2h0EAIiTQoaQ3Nh" + 
          "bWxWZXJ0aWNhbEFsaWdubWVudEVudW0SDAoIQWxpZ25Ub3AQABIQCgxBbGln" + 
          "bkNlbnRlclYQARIPCgtBbGlnbkJvdHRvbRACIvwBCglDc2FtbE5vZGUSLwoE" + 
          "VHlwZRgBIAIoDjIhLnJlc291cmNlLkNzYW1sTm9kZS5Dc2FtbE5vZGVUeXBl" + 
          "EiwKCkF0dHJpYnV0ZXMYAiADKAsyGC5yZXNvdXJjZS5Dc2FtbEF0dHJpYnV0" + 
          "ZRIlCghDaGlsZHJlbhgDIAMoCzITLnJlc291cmNlLkNzYW1sTm9kZSJpCg1D" + 
          "c2FtbE5vZGVUeXBlEgsKB1Vua25vd24QABIJCgVGcmFtZRABEgkKBUltYWdl" + 
          "EAISDQoJU29saWRUZXh0EAMSDwoLRHluYW1pY1RleHQQBBILCgdDb25zb2xl" + 
          "EAUSCAoEUGFnZRAGIisKBUNzYW1sEiIKBU5vZGVzGAEgAygLMhMucmVzb3Vy" + 
          "Y2UuQ3NhbWxOb2RlImUKDVVzZXJJbnRlcmZhY2USEgoHVmVyc2lvbhgBIAIo" + 
          "BToBMRIeCgVDc2FtbBgCIAIoCzIPLnJlc291cmNlLkNzYW1sEiAKBlNjcmlw" + 
          "dBgDIAIoCzIQLnJlc291cmNlLlNjcmlwdEI+SAHCPjkKHENhcmJvbkNvcmUu" + 
          "UHJvdG9jb2wuUmVzb3VyY2USEFJlc291cmNlUHJvdG9jb2zqDQYucGIuY3M=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_resource_StoredMatrix__Descriptor = Descriptor.MessageTypes[0];
        internal__static_resource_StoredMatrix__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.StoredMatrix, global::CarbonCore.Protocol.Resource.StoredMatrix.Builder>(internal__static_resource_StoredMatrix__Descriptor,
                new string[] { "Data", });
        internal__static_resource_Raw__Descriptor = Descriptor.MessageTypes[1];
        internal__static_resource_Raw__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.Raw, global::CarbonCore.Protocol.Resource.Raw.Builder>(internal__static_resource_Raw__Descriptor,
                new string[] { "Data", });
        internal__static_resource_CompiledShader__Descriptor = Descriptor.MessageTypes[2];
        internal__static_resource_CompiledShader__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.CompiledShader, global::CarbonCore.Protocol.Resource.CompiledShader.Builder>(internal__static_resource_CompiledShader__Descriptor,
                new string[] { "Version", "MD5", "Data", });
        internal__static_resource_ModelElement__Descriptor = Descriptor.MessageTypes[3];
        internal__static_resource_ModelElement__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.ModelElement, global::CarbonCore.Protocol.Resource.ModelElement.Builder>(internal__static_resource_ModelElement__Descriptor,
                new string[] { "Position", "Normal", "Texture", "Tangent", });
        internal__static_resource_ModelMaterial__Descriptor = Descriptor.MessageTypes[4];
        internal__static_resource_ModelMaterial__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.ModelMaterial, global::CarbonCore.Protocol.Resource.ModelMaterial.Builder>(internal__static_resource_ModelMaterial__Descriptor,
                new string[] { "Type", "Name", "DiffuseTexture", "NormalTexture", "AlphaTexture", "SpecularTexture", "Shinyness", "Refraction", "Transparancy", "ColorDiffuse", "ColorSpecular", "ColorEmission", "ColorAmbient", });
        internal__static_resource_Model__Descriptor = Descriptor.MessageTypes[5];
        internal__static_resource_Model__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.Model, global::CarbonCore.Protocol.Resource.Model.Builder>(internal__static_resource_Model__Descriptor,
                new string[] { "Version", "Name", "TangentsCalculated", "Elements", "Materials", "Indices", });
        internal__static_resource_ModelGroup__Descriptor = Descriptor.MessageTypes[6];
        internal__static_resource_ModelGroup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.ModelGroup, global::CarbonCore.Protocol.Resource.ModelGroup.Builder>(internal__static_resource_ModelGroup__Descriptor,
                new string[] { "Version", "Name", "Offset", "Rotation", "Scale", "Models", "Groups", "Transformations", });
        internal__static_resource_StageProperty__Descriptor = Descriptor.MessageTypes[7];
        internal__static_resource_StageProperty__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.StageProperty, global::CarbonCore.Protocol.Resource.StageProperty.Builder>(internal__static_resource_StageProperty__Descriptor,
                new string[] { "Id", "Type", "Data", });
        internal__static_resource_StageCamera__Descriptor = Descriptor.MessageTypes[8];
        internal__static_resource_StageCamera__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.StageCamera, global::CarbonCore.Protocol.Resource.StageCamera.Builder>(internal__static_resource_StageCamera__Descriptor,
                new string[] { "Id", "FieldOfView", "LayerFlags", "Properties", "Position", "Rotation", });
        internal__static_resource_StageLight__Descriptor = Descriptor.MessageTypes[9];
        internal__static_resource_StageLight__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.StageLight, global::CarbonCore.Protocol.Resource.StageLight.Builder>(internal__static_resource_StageLight__Descriptor,
                new string[] { "Id", "Type", "Radius", "Intensity", "AmbientIntensity", "SpotSize", "Angle", "LayerFlags", "Properties", "Location", "Direction", "Color", });
        internal__static_resource_StageModel__Descriptor = Descriptor.MessageTypes[10];
        internal__static_resource_StageModel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.StageModel, global::CarbonCore.Protocol.Resource.StageModel.Builder>(internal__static_resource_StageModel__Descriptor,
                new string[] { "Id", "ReferenceId", "LayerFlags", "Properties", "Translation", "Rotation", "Scale", "Children", });
        internal__static_resource_Stage__Descriptor = Descriptor.MessageTypes[11];
        internal__static_resource_Stage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.Stage, global::CarbonCore.Protocol.Resource.Stage.Builder>(internal__static_resource_Stage__Descriptor,
                new string[] { "Version", "References", "Cameras", "Lights", "Models", });
        internal__static_resource_Script__Descriptor = Descriptor.MessageTypes[12];
        internal__static_resource_Script__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.Script, global::CarbonCore.Protocol.Resource.Script.Builder>(internal__static_resource_Script__Descriptor,
                new string[] { "Version", "ScriptData", });
        internal__static_resource_CsamlAttribute__Descriptor = Descriptor.MessageTypes[13];
        internal__static_resource_CsamlAttribute__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.CsamlAttribute, global::CarbonCore.Protocol.Resource.CsamlAttribute.Builder>(internal__static_resource_CsamlAttribute__Descriptor,
                new string[] { "Type", "ValueType", "ValueString", "ValueInt", "ValueFloat", });
        internal__static_resource_CsamlNode__Descriptor = Descriptor.MessageTypes[14];
        internal__static_resource_CsamlNode__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.CsamlNode, global::CarbonCore.Protocol.Resource.CsamlNode.Builder>(internal__static_resource_CsamlNode__Descriptor,
                new string[] { "Type", "Attributes", "Children", });
        internal__static_resource_Csaml__Descriptor = Descriptor.MessageTypes[15];
        internal__static_resource_Csaml__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.Csaml, global::CarbonCore.Protocol.Resource.Csaml.Builder>(internal__static_resource_Csaml__Descriptor,
                new string[] { "Nodes", });
        internal__static_resource_UserInterface__Descriptor = Descriptor.MessageTypes[16];
        internal__static_resource_UserInterface__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Resource.UserInterface, global::CarbonCore.Protocol.Resource.UserInterface.Builder>(internal__static_resource_UserInterface__Descriptor,
                new string[] { "Version", "Csaml", "Script", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StoredMatrix : pb::GeneratedMessage<StoredMatrix, StoredMatrix.Builder> {
    private StoredMatrix() { }
    private static readonly StoredMatrix defaultInstance = new StoredMatrix().MakeReadOnly();
    private static readonly string[] _storedMatrixFieldNames = new string[] { "Data" };
    private static readonly uint[] _storedMatrixFieldTags = new uint[] { 13 };
    public static StoredMatrix DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StoredMatrix DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StoredMatrix ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_StoredMatrix__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StoredMatrix, StoredMatrix.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_StoredMatrix__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private pbc::PopsicleList<float> data_ = new pbc::PopsicleList<float>();
    public scg::IList<float> DataList {
      get { return pbc::Lists.AsReadOnly(data_); }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public float GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _storedMatrixFieldNames;
      if (data_.Count > 0) {
        output.WriteFloatArray(1, field_names[0], data_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * data_.Count;
          size += dataSize;
          size += 1 * data_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StoredMatrix ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StoredMatrix ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StoredMatrix ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StoredMatrix ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StoredMatrix ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StoredMatrix ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StoredMatrix ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StoredMatrix ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StoredMatrix ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StoredMatrix ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StoredMatrix MakeReadOnly() {
      data_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StoredMatrix prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StoredMatrix, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StoredMatrix cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StoredMatrix result;
      
      private StoredMatrix PrepareBuilder() {
        if (resultIsReadOnly) {
          StoredMatrix original = result;
          result = new StoredMatrix();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StoredMatrix MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.StoredMatrix.Descriptor; }
      }
      
      public override StoredMatrix DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.StoredMatrix.DefaultInstance; }
      }
      
      public override StoredMatrix BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StoredMatrix) {
          return MergeFrom((StoredMatrix) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StoredMatrix other) {
        if (other == global::CarbonCore.Protocol.Resource.StoredMatrix.DefaultInstance) return this;
        PrepareBuilder();
        if (other.data_.Count != 0) {
          result.data_.Add(other.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_storedMatrixFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _storedMatrixFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadFloatArray(tag, field_name, result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<float> DataList {
        get { return PrepareBuilder().data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public float GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, float value) {
        PrepareBuilder();
        result.data_[index] = value;
        return this;
      }
      public Builder AddData(float value) {
        PrepareBuilder();
        result.data_.Add(value);
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.data_.Add(values);
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.data_.Clear();
        return this;
      }
    }
    static StoredMatrix() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Raw : pb::GeneratedMessage<Raw, Raw.Builder> {
    private Raw() { }
    private static readonly Raw defaultInstance = new Raw().MakeReadOnly();
    private static readonly string[] _rawFieldNames = new string[] { "Data" };
    private static readonly uint[] _rawFieldTags = new uint[] { 10 };
    public static Raw DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Raw DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Raw ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_Raw__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Raw, Raw.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_Raw__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rawFieldNames;
      if (hasData) {
        output.WriteBytes(1, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Raw ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Raw ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Raw ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Raw ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Raw ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Raw ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Raw ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Raw ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Raw ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Raw ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Raw MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Raw prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Raw, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Raw cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Raw result;
      
      private Raw PrepareBuilder() {
        if (resultIsReadOnly) {
          Raw original = result;
          result = new Raw();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Raw MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.Raw.Descriptor; }
      }
      
      public override Raw DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.Raw.DefaultInstance; }
      }
      
      public override Raw BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Raw) {
          return MergeFrom((Raw) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Raw other) {
        if (other == global::CarbonCore.Protocol.Resource.Raw.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rawFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rawFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Raw() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CompiledShader : pb::GeneratedMessage<CompiledShader, CompiledShader.Builder> {
    private CompiledShader() { }
    private static readonly CompiledShader defaultInstance = new CompiledShader().MakeReadOnly();
    private static readonly string[] _compiledShaderFieldNames = new string[] { "Data", "MD5", "Version" };
    private static readonly uint[] _compiledShaderFieldTags = new uint[] { 26, 18, 8 };
    public static CompiledShader DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CompiledShader DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CompiledShader ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_CompiledShader__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CompiledShader, CompiledShader.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_CompiledShader__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private int version_ = 1;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int MD5FieldNumber = 2;
    private bool hasMD5;
    private pb::ByteString mD5_ = pb::ByteString.Empty;
    public bool HasMD5 {
      get { return hasMD5; }
    }
    public pb::ByteString MD5 {
      get { return mD5_; }
    }
    
    public const int DataFieldNumber = 3;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasMD5) return false;
        if (!hasData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _compiledShaderFieldNames;
      if (hasVersion) {
        output.WriteInt32(1, field_names[2], Version);
      }
      if (hasMD5) {
        output.WriteBytes(2, field_names[1], MD5);
      }
      if (hasData) {
        output.WriteBytes(3, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
        }
        if (hasMD5) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, MD5);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CompiledShader ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CompiledShader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CompiledShader ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CompiledShader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CompiledShader ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CompiledShader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CompiledShader ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CompiledShader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CompiledShader ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CompiledShader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CompiledShader MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CompiledShader prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CompiledShader, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CompiledShader cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CompiledShader result;
      
      private CompiledShader PrepareBuilder() {
        if (resultIsReadOnly) {
          CompiledShader original = result;
          result = new CompiledShader();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CompiledShader MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.CompiledShader.Descriptor; }
      }
      
      public override CompiledShader DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.CompiledShader.DefaultInstance; }
      }
      
      public override CompiledShader BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CompiledShader) {
          return MergeFrom((CompiledShader) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CompiledShader other) {
        if (other == global::CarbonCore.Protocol.Resource.CompiledShader.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasMD5) {
          MD5 = other.MD5;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_compiledShaderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _compiledShaderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 18: {
              result.hasMD5 = input.ReadBytes(ref result.mD5_);
              break;
            }
            case 26: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 1;
        return this;
      }
      
      public bool HasMD5 {
        get { return result.hasMD5; }
      }
      public pb::ByteString MD5 {
        get { return result.MD5; }
        set { SetMD5(value); }
      }
      public Builder SetMD5(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMD5 = true;
        result.mD5_ = value;
        return this;
      }
      public Builder ClearMD5() {
        PrepareBuilder();
        result.hasMD5 = false;
        result.mD5_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static CompiledShader() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ModelElement : pb::GeneratedMessage<ModelElement, ModelElement.Builder> {
    private ModelElement() { }
    private static readonly ModelElement defaultInstance = new ModelElement().MakeReadOnly();
    private static readonly string[] _modelElementFieldNames = new string[] { "Normal", "Position", "Tangent", "Texture" };
    private static readonly uint[] _modelElementFieldTags = new uint[] { 18, 10, 34, 26 };
    public static ModelElement DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ModelElement DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ModelElement ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_ModelElement__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ModelElement, ModelElement.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_ModelElement__FieldAccessorTable; }
    }
    
    public const int PositionFieldNumber = 1;
    private int positionMemoizedSerializedSize;
    private pbc::PopsicleList<float> position_ = new pbc::PopsicleList<float>();
    public scg::IList<float> PositionList {
      get { return pbc::Lists.AsReadOnly(position_); }
    }
    public int PositionCount {
      get { return position_.Count; }
    }
    public float GetPosition(int index) {
      return position_[index];
    }
    
    public const int NormalFieldNumber = 2;
    private int normalMemoizedSerializedSize;
    private pbc::PopsicleList<float> normal_ = new pbc::PopsicleList<float>();
    public scg::IList<float> NormalList {
      get { return pbc::Lists.AsReadOnly(normal_); }
    }
    public int NormalCount {
      get { return normal_.Count; }
    }
    public float GetNormal(int index) {
      return normal_[index];
    }
    
    public const int TextureFieldNumber = 3;
    private int textureMemoizedSerializedSize;
    private pbc::PopsicleList<float> texture_ = new pbc::PopsicleList<float>();
    public scg::IList<float> TextureList {
      get { return pbc::Lists.AsReadOnly(texture_); }
    }
    public int TextureCount {
      get { return texture_.Count; }
    }
    public float GetTexture(int index) {
      return texture_[index];
    }
    
    public const int TangentFieldNumber = 4;
    private int tangentMemoizedSerializedSize;
    private pbc::PopsicleList<float> tangent_ = new pbc::PopsicleList<float>();
    public scg::IList<float> TangentList {
      get { return pbc::Lists.AsReadOnly(tangent_); }
    }
    public int TangentCount {
      get { return tangent_.Count; }
    }
    public float GetTangent(int index) {
      return tangent_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _modelElementFieldNames;
      if (position_.Count > 0) {
        output.WritePackedFloatArray(1, field_names[1], positionMemoizedSerializedSize, position_);
      }
      if (normal_.Count > 0) {
        output.WritePackedFloatArray(2, field_names[0], normalMemoizedSerializedSize, normal_);
      }
      if (texture_.Count > 0) {
        output.WritePackedFloatArray(3, field_names[3], textureMemoizedSerializedSize, texture_);
      }
      if (tangent_.Count > 0) {
        output.WritePackedFloatArray(4, field_names[2], tangentMemoizedSerializedSize, tangent_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * position_.Count;
          size += dataSize;
          if (position_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          positionMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * normal_.Count;
          size += dataSize;
          if (normal_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          normalMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * texture_.Count;
          size += dataSize;
          if (texture_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          textureMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * tangent_.Count;
          size += dataSize;
          if (tangent_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          tangentMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ModelElement ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModelElement ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModelElement ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModelElement ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModelElement ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModelElement ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ModelElement ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ModelElement ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ModelElement ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModelElement ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ModelElement MakeReadOnly() {
      position_.MakeReadOnly();
      normal_.MakeReadOnly();
      texture_.MakeReadOnly();
      tangent_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ModelElement prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ModelElement, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ModelElement cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ModelElement result;
      
      private ModelElement PrepareBuilder() {
        if (resultIsReadOnly) {
          ModelElement original = result;
          result = new ModelElement();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ModelElement MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.ModelElement.Descriptor; }
      }
      
      public override ModelElement DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.ModelElement.DefaultInstance; }
      }
      
      public override ModelElement BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ModelElement) {
          return MergeFrom((ModelElement) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ModelElement other) {
        if (other == global::CarbonCore.Protocol.Resource.ModelElement.DefaultInstance) return this;
        PrepareBuilder();
        if (other.position_.Count != 0) {
          result.position_.Add(other.position_);
        }
        if (other.normal_.Count != 0) {
          result.normal_.Add(other.normal_);
        }
        if (other.texture_.Count != 0) {
          result.texture_.Add(other.texture_);
        }
        if (other.tangent_.Count != 0) {
          result.tangent_.Add(other.tangent_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_modelElementFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _modelElementFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadFloatArray(tag, field_name, result.position_);
              break;
            }
            case 18:
            case 21: {
              input.ReadFloatArray(tag, field_name, result.normal_);
              break;
            }
            case 26:
            case 29: {
              input.ReadFloatArray(tag, field_name, result.texture_);
              break;
            }
            case 34:
            case 37: {
              input.ReadFloatArray(tag, field_name, result.tangent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<float> PositionList {
        get { return PrepareBuilder().position_; }
      }
      public int PositionCount {
        get { return result.PositionCount; }
      }
      public float GetPosition(int index) {
        return result.GetPosition(index);
      }
      public Builder SetPosition(int index, float value) {
        PrepareBuilder();
        result.position_[index] = value;
        return this;
      }
      public Builder AddPosition(float value) {
        PrepareBuilder();
        result.position_.Add(value);
        return this;
      }
      public Builder AddRangePosition(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.position_.Add(values);
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.position_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> NormalList {
        get { return PrepareBuilder().normal_; }
      }
      public int NormalCount {
        get { return result.NormalCount; }
      }
      public float GetNormal(int index) {
        return result.GetNormal(index);
      }
      public Builder SetNormal(int index, float value) {
        PrepareBuilder();
        result.normal_[index] = value;
        return this;
      }
      public Builder AddNormal(float value) {
        PrepareBuilder();
        result.normal_.Add(value);
        return this;
      }
      public Builder AddRangeNormal(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.normal_.Add(values);
        return this;
      }
      public Builder ClearNormal() {
        PrepareBuilder();
        result.normal_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> TextureList {
        get { return PrepareBuilder().texture_; }
      }
      public int TextureCount {
        get { return result.TextureCount; }
      }
      public float GetTexture(int index) {
        return result.GetTexture(index);
      }
      public Builder SetTexture(int index, float value) {
        PrepareBuilder();
        result.texture_[index] = value;
        return this;
      }
      public Builder AddTexture(float value) {
        PrepareBuilder();
        result.texture_.Add(value);
        return this;
      }
      public Builder AddRangeTexture(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.texture_.Add(values);
        return this;
      }
      public Builder ClearTexture() {
        PrepareBuilder();
        result.texture_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> TangentList {
        get { return PrepareBuilder().tangent_; }
      }
      public int TangentCount {
        get { return result.TangentCount; }
      }
      public float GetTangent(int index) {
        return result.GetTangent(index);
      }
      public Builder SetTangent(int index, float value) {
        PrepareBuilder();
        result.tangent_[index] = value;
        return this;
      }
      public Builder AddTangent(float value) {
        PrepareBuilder();
        result.tangent_.Add(value);
        return this;
      }
      public Builder AddRangeTangent(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.tangent_.Add(values);
        return this;
      }
      public Builder ClearTangent() {
        PrepareBuilder();
        result.tangent_.Clear();
        return this;
      }
    }
    static ModelElement() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ModelMaterial : pb::GeneratedMessage<ModelMaterial, ModelMaterial.Builder> {
    private ModelMaterial() { }
    private static readonly ModelMaterial defaultInstance = new ModelMaterial().MakeReadOnly();
    private static readonly string[] _modelMaterialFieldNames = new string[] { "AlphaTexture", "ColorAmbient", "ColorDiffuse", "ColorEmission", "ColorSpecular", "DiffuseTexture", "Name", "NormalTexture", "Refraction", "Shinyness", "SpecularTexture", "Transparancy", "Type" };
    private static readonly uint[] _modelMaterialFieldTags = new uint[] { 42, 186, 162, 178, 170, 26, 18, 34, 93, 85, 50, 101, 8 };
    public static ModelMaterial DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ModelMaterial DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ModelMaterial ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_ModelMaterial__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ModelMaterial, ModelMaterial.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_ModelMaterial__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ModelMaterialType {
        Blinn = 0,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::CarbonCore.Protocol.Resource.ModelMaterial.Types.ModelMaterialType type_ = global::CarbonCore.Protocol.Resource.ModelMaterial.Types.ModelMaterialType.Blinn;
    public bool HasType {
      get { return hasType; }
    }
    public global::CarbonCore.Protocol.Resource.ModelMaterial.Types.ModelMaterialType Type {
      get { return type_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DiffuseTextureFieldNumber = 3;
    private bool hasDiffuseTexture;
    private string diffuseTexture_ = "";
    public bool HasDiffuseTexture {
      get { return hasDiffuseTexture; }
    }
    public string DiffuseTexture {
      get { return diffuseTexture_; }
    }
    
    public const int NormalTextureFieldNumber = 4;
    private bool hasNormalTexture;
    private string normalTexture_ = "";
    public bool HasNormalTexture {
      get { return hasNormalTexture; }
    }
    public string NormalTexture {
      get { return normalTexture_; }
    }
    
    public const int AlphaTextureFieldNumber = 5;
    private bool hasAlphaTexture;
    private string alphaTexture_ = "";
    public bool HasAlphaTexture {
      get { return hasAlphaTexture; }
    }
    public string AlphaTexture {
      get { return alphaTexture_; }
    }
    
    public const int SpecularTextureFieldNumber = 6;
    private bool hasSpecularTexture;
    private string specularTexture_ = "";
    public bool HasSpecularTexture {
      get { return hasSpecularTexture; }
    }
    public string SpecularTexture {
      get { return specularTexture_; }
    }
    
    public const int ShinynessFieldNumber = 10;
    private bool hasShinyness;
    private float shinyness_;
    public bool HasShinyness {
      get { return hasShinyness; }
    }
    public float Shinyness {
      get { return shinyness_; }
    }
    
    public const int RefractionFieldNumber = 11;
    private bool hasRefraction;
    private float refraction_;
    public bool HasRefraction {
      get { return hasRefraction; }
    }
    public float Refraction {
      get { return refraction_; }
    }
    
    public const int TransparancyFieldNumber = 12;
    private bool hasTransparancy;
    private float transparancy_;
    public bool HasTransparancy {
      get { return hasTransparancy; }
    }
    public float Transparancy {
      get { return transparancy_; }
    }
    
    public const int ColorDiffuseFieldNumber = 20;
    private int colorDiffuseMemoizedSerializedSize;
    private pbc::PopsicleList<float> colorDiffuse_ = new pbc::PopsicleList<float>();
    public scg::IList<float> ColorDiffuseList {
      get { return pbc::Lists.AsReadOnly(colorDiffuse_); }
    }
    public int ColorDiffuseCount {
      get { return colorDiffuse_.Count; }
    }
    public float GetColorDiffuse(int index) {
      return colorDiffuse_[index];
    }
    
    public const int ColorSpecularFieldNumber = 21;
    private int colorSpecularMemoizedSerializedSize;
    private pbc::PopsicleList<float> colorSpecular_ = new pbc::PopsicleList<float>();
    public scg::IList<float> ColorSpecularList {
      get { return pbc::Lists.AsReadOnly(colorSpecular_); }
    }
    public int ColorSpecularCount {
      get { return colorSpecular_.Count; }
    }
    public float GetColorSpecular(int index) {
      return colorSpecular_[index];
    }
    
    public const int ColorEmissionFieldNumber = 22;
    private int colorEmissionMemoizedSerializedSize;
    private pbc::PopsicleList<float> colorEmission_ = new pbc::PopsicleList<float>();
    public scg::IList<float> ColorEmissionList {
      get { return pbc::Lists.AsReadOnly(colorEmission_); }
    }
    public int ColorEmissionCount {
      get { return colorEmission_.Count; }
    }
    public float GetColorEmission(int index) {
      return colorEmission_[index];
    }
    
    public const int ColorAmbientFieldNumber = 23;
    private int colorAmbientMemoizedSerializedSize;
    private pbc::PopsicleList<float> colorAmbient_ = new pbc::PopsicleList<float>();
    public scg::IList<float> ColorAmbientList {
      get { return pbc::Lists.AsReadOnly(colorAmbient_); }
    }
    public int ColorAmbientCount {
      get { return colorAmbient_.Count; }
    }
    public float GetColorAmbient(int index) {
      return colorAmbient_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasName) return false;
        if (!hasShinyness) return false;
        if (!hasRefraction) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _modelMaterialFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[12], (int) Type, Type);
      }
      if (hasName) {
        output.WriteString(2, field_names[6], Name);
      }
      if (hasDiffuseTexture) {
        output.WriteString(3, field_names[5], DiffuseTexture);
      }
      if (hasNormalTexture) {
        output.WriteString(4, field_names[7], NormalTexture);
      }
      if (hasAlphaTexture) {
        output.WriteString(5, field_names[0], AlphaTexture);
      }
      if (hasSpecularTexture) {
        output.WriteString(6, field_names[10], SpecularTexture);
      }
      if (hasShinyness) {
        output.WriteFloat(10, field_names[9], Shinyness);
      }
      if (hasRefraction) {
        output.WriteFloat(11, field_names[8], Refraction);
      }
      if (hasTransparancy) {
        output.WriteFloat(12, field_names[11], Transparancy);
      }
      if (colorDiffuse_.Count > 0) {
        output.WritePackedFloatArray(20, field_names[2], colorDiffuseMemoizedSerializedSize, colorDiffuse_);
      }
      if (colorSpecular_.Count > 0) {
        output.WritePackedFloatArray(21, field_names[4], colorSpecularMemoizedSerializedSize, colorSpecular_);
      }
      if (colorEmission_.Count > 0) {
        output.WritePackedFloatArray(22, field_names[3], colorEmissionMemoizedSerializedSize, colorEmission_);
      }
      if (colorAmbient_.Count > 0) {
        output.WritePackedFloatArray(23, field_names[1], colorAmbientMemoizedSerializedSize, colorAmbient_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasDiffuseTexture) {
          size += pb::CodedOutputStream.ComputeStringSize(3, DiffuseTexture);
        }
        if (hasNormalTexture) {
          size += pb::CodedOutputStream.ComputeStringSize(4, NormalTexture);
        }
        if (hasAlphaTexture) {
          size += pb::CodedOutputStream.ComputeStringSize(5, AlphaTexture);
        }
        if (hasSpecularTexture) {
          size += pb::CodedOutputStream.ComputeStringSize(6, SpecularTexture);
        }
        if (hasShinyness) {
          size += pb::CodedOutputStream.ComputeFloatSize(10, Shinyness);
        }
        if (hasRefraction) {
          size += pb::CodedOutputStream.ComputeFloatSize(11, Refraction);
        }
        if (hasTransparancy) {
          size += pb::CodedOutputStream.ComputeFloatSize(12, Transparancy);
        }
        {
          int dataSize = 0;
          dataSize = 4 * colorDiffuse_.Count;
          size += dataSize;
          if (colorDiffuse_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          colorDiffuseMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * colorSpecular_.Count;
          size += dataSize;
          if (colorSpecular_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          colorSpecularMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * colorEmission_.Count;
          size += dataSize;
          if (colorEmission_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          colorEmissionMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * colorAmbient_.Count;
          size += dataSize;
          if (colorAmbient_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          colorAmbientMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ModelMaterial ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModelMaterial ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModelMaterial ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModelMaterial ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModelMaterial ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModelMaterial ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ModelMaterial ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ModelMaterial ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ModelMaterial ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModelMaterial ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ModelMaterial MakeReadOnly() {
      colorDiffuse_.MakeReadOnly();
      colorSpecular_.MakeReadOnly();
      colorEmission_.MakeReadOnly();
      colorAmbient_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ModelMaterial prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ModelMaterial, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ModelMaterial cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ModelMaterial result;
      
      private ModelMaterial PrepareBuilder() {
        if (resultIsReadOnly) {
          ModelMaterial original = result;
          result = new ModelMaterial();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ModelMaterial MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.ModelMaterial.Descriptor; }
      }
      
      public override ModelMaterial DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.ModelMaterial.DefaultInstance; }
      }
      
      public override ModelMaterial BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ModelMaterial) {
          return MergeFrom((ModelMaterial) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ModelMaterial other) {
        if (other == global::CarbonCore.Protocol.Resource.ModelMaterial.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDiffuseTexture) {
          DiffuseTexture = other.DiffuseTexture;
        }
        if (other.HasNormalTexture) {
          NormalTexture = other.NormalTexture;
        }
        if (other.HasAlphaTexture) {
          AlphaTexture = other.AlphaTexture;
        }
        if (other.HasSpecularTexture) {
          SpecularTexture = other.SpecularTexture;
        }
        if (other.HasShinyness) {
          Shinyness = other.Shinyness;
        }
        if (other.HasRefraction) {
          Refraction = other.Refraction;
        }
        if (other.HasTransparancy) {
          Transparancy = other.Transparancy;
        }
        if (other.colorDiffuse_.Count != 0) {
          result.colorDiffuse_.Add(other.colorDiffuse_);
        }
        if (other.colorSpecular_.Count != 0) {
          result.colorSpecular_.Add(other.colorSpecular_);
        }
        if (other.colorEmission_.Count != 0) {
          result.colorEmission_.Add(other.colorEmission_);
        }
        if (other.colorAmbient_.Count != 0) {
          result.colorAmbient_.Add(other.colorAmbient_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_modelMaterialFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _modelMaterialFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasDiffuseTexture = input.ReadString(ref result.diffuseTexture_);
              break;
            }
            case 34: {
              result.hasNormalTexture = input.ReadString(ref result.normalTexture_);
              break;
            }
            case 42: {
              result.hasAlphaTexture = input.ReadString(ref result.alphaTexture_);
              break;
            }
            case 50: {
              result.hasSpecularTexture = input.ReadString(ref result.specularTexture_);
              break;
            }
            case 85: {
              result.hasShinyness = input.ReadFloat(ref result.shinyness_);
              break;
            }
            case 93: {
              result.hasRefraction = input.ReadFloat(ref result.refraction_);
              break;
            }
            case 101: {
              result.hasTransparancy = input.ReadFloat(ref result.transparancy_);
              break;
            }
            case 162:
            case 165: {
              input.ReadFloatArray(tag, field_name, result.colorDiffuse_);
              break;
            }
            case 170:
            case 173: {
              input.ReadFloatArray(tag, field_name, result.colorSpecular_);
              break;
            }
            case 178:
            case 181: {
              input.ReadFloatArray(tag, field_name, result.colorEmission_);
              break;
            }
            case 186:
            case 189: {
              input.ReadFloatArray(tag, field_name, result.colorAmbient_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::CarbonCore.Protocol.Resource.ModelMaterial.Types.ModelMaterialType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::CarbonCore.Protocol.Resource.ModelMaterial.Types.ModelMaterialType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::CarbonCore.Protocol.Resource.ModelMaterial.Types.ModelMaterialType.Blinn;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDiffuseTexture {
        get { return result.hasDiffuseTexture; }
      }
      public string DiffuseTexture {
        get { return result.DiffuseTexture; }
        set { SetDiffuseTexture(value); }
      }
      public Builder SetDiffuseTexture(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDiffuseTexture = true;
        result.diffuseTexture_ = value;
        return this;
      }
      public Builder ClearDiffuseTexture() {
        PrepareBuilder();
        result.hasDiffuseTexture = false;
        result.diffuseTexture_ = "";
        return this;
      }
      
      public bool HasNormalTexture {
        get { return result.hasNormalTexture; }
      }
      public string NormalTexture {
        get { return result.NormalTexture; }
        set { SetNormalTexture(value); }
      }
      public Builder SetNormalTexture(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNormalTexture = true;
        result.normalTexture_ = value;
        return this;
      }
      public Builder ClearNormalTexture() {
        PrepareBuilder();
        result.hasNormalTexture = false;
        result.normalTexture_ = "";
        return this;
      }
      
      public bool HasAlphaTexture {
        get { return result.hasAlphaTexture; }
      }
      public string AlphaTexture {
        get { return result.AlphaTexture; }
        set { SetAlphaTexture(value); }
      }
      public Builder SetAlphaTexture(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAlphaTexture = true;
        result.alphaTexture_ = value;
        return this;
      }
      public Builder ClearAlphaTexture() {
        PrepareBuilder();
        result.hasAlphaTexture = false;
        result.alphaTexture_ = "";
        return this;
      }
      
      public bool HasSpecularTexture {
        get { return result.hasSpecularTexture; }
      }
      public string SpecularTexture {
        get { return result.SpecularTexture; }
        set { SetSpecularTexture(value); }
      }
      public Builder SetSpecularTexture(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpecularTexture = true;
        result.specularTexture_ = value;
        return this;
      }
      public Builder ClearSpecularTexture() {
        PrepareBuilder();
        result.hasSpecularTexture = false;
        result.specularTexture_ = "";
        return this;
      }
      
      public bool HasShinyness {
        get { return result.hasShinyness; }
      }
      public float Shinyness {
        get { return result.Shinyness; }
        set { SetShinyness(value); }
      }
      public Builder SetShinyness(float value) {
        PrepareBuilder();
        result.hasShinyness = true;
        result.shinyness_ = value;
        return this;
      }
      public Builder ClearShinyness() {
        PrepareBuilder();
        result.hasShinyness = false;
        result.shinyness_ = 0F;
        return this;
      }
      
      public bool HasRefraction {
        get { return result.hasRefraction; }
      }
      public float Refraction {
        get { return result.Refraction; }
        set { SetRefraction(value); }
      }
      public Builder SetRefraction(float value) {
        PrepareBuilder();
        result.hasRefraction = true;
        result.refraction_ = value;
        return this;
      }
      public Builder ClearRefraction() {
        PrepareBuilder();
        result.hasRefraction = false;
        result.refraction_ = 0F;
        return this;
      }
      
      public bool HasTransparancy {
        get { return result.hasTransparancy; }
      }
      public float Transparancy {
        get { return result.Transparancy; }
        set { SetTransparancy(value); }
      }
      public Builder SetTransparancy(float value) {
        PrepareBuilder();
        result.hasTransparancy = true;
        result.transparancy_ = value;
        return this;
      }
      public Builder ClearTransparancy() {
        PrepareBuilder();
        result.hasTransparancy = false;
        result.transparancy_ = 0F;
        return this;
      }
      
      public pbc::IPopsicleList<float> ColorDiffuseList {
        get { return PrepareBuilder().colorDiffuse_; }
      }
      public int ColorDiffuseCount {
        get { return result.ColorDiffuseCount; }
      }
      public float GetColorDiffuse(int index) {
        return result.GetColorDiffuse(index);
      }
      public Builder SetColorDiffuse(int index, float value) {
        PrepareBuilder();
        result.colorDiffuse_[index] = value;
        return this;
      }
      public Builder AddColorDiffuse(float value) {
        PrepareBuilder();
        result.colorDiffuse_.Add(value);
        return this;
      }
      public Builder AddRangeColorDiffuse(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.colorDiffuse_.Add(values);
        return this;
      }
      public Builder ClearColorDiffuse() {
        PrepareBuilder();
        result.colorDiffuse_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> ColorSpecularList {
        get { return PrepareBuilder().colorSpecular_; }
      }
      public int ColorSpecularCount {
        get { return result.ColorSpecularCount; }
      }
      public float GetColorSpecular(int index) {
        return result.GetColorSpecular(index);
      }
      public Builder SetColorSpecular(int index, float value) {
        PrepareBuilder();
        result.colorSpecular_[index] = value;
        return this;
      }
      public Builder AddColorSpecular(float value) {
        PrepareBuilder();
        result.colorSpecular_.Add(value);
        return this;
      }
      public Builder AddRangeColorSpecular(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.colorSpecular_.Add(values);
        return this;
      }
      public Builder ClearColorSpecular() {
        PrepareBuilder();
        result.colorSpecular_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> ColorEmissionList {
        get { return PrepareBuilder().colorEmission_; }
      }
      public int ColorEmissionCount {
        get { return result.ColorEmissionCount; }
      }
      public float GetColorEmission(int index) {
        return result.GetColorEmission(index);
      }
      public Builder SetColorEmission(int index, float value) {
        PrepareBuilder();
        result.colorEmission_[index] = value;
        return this;
      }
      public Builder AddColorEmission(float value) {
        PrepareBuilder();
        result.colorEmission_.Add(value);
        return this;
      }
      public Builder AddRangeColorEmission(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.colorEmission_.Add(values);
        return this;
      }
      public Builder ClearColorEmission() {
        PrepareBuilder();
        result.colorEmission_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> ColorAmbientList {
        get { return PrepareBuilder().colorAmbient_; }
      }
      public int ColorAmbientCount {
        get { return result.ColorAmbientCount; }
      }
      public float GetColorAmbient(int index) {
        return result.GetColorAmbient(index);
      }
      public Builder SetColorAmbient(int index, float value) {
        PrepareBuilder();
        result.colorAmbient_[index] = value;
        return this;
      }
      public Builder AddColorAmbient(float value) {
        PrepareBuilder();
        result.colorAmbient_.Add(value);
        return this;
      }
      public Builder AddRangeColorAmbient(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.colorAmbient_.Add(values);
        return this;
      }
      public Builder ClearColorAmbient() {
        PrepareBuilder();
        result.colorAmbient_.Clear();
        return this;
      }
    }
    static ModelMaterial() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Model : pb::GeneratedMessage<Model, Model.Builder> {
    private Model() { }
    private static readonly Model defaultInstance = new Model().MakeReadOnly();
    private static readonly string[] _modelFieldNames = new string[] { "Elements", "Indices", "Materials", "Name", "TangentsCalculated", "Version" };
    private static readonly uint[] _modelFieldTags = new uint[] { 162, 176, 170, 18, 24, 8 };
    public static Model DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Model DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Model ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_Model__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Model, Model.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_Model__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private int version_ = 1;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int TangentsCalculatedFieldNumber = 3;
    private bool hasTangentsCalculated;
    private bool tangentsCalculated_;
    public bool HasTangentsCalculated {
      get { return hasTangentsCalculated; }
    }
    public bool TangentsCalculated {
      get { return tangentsCalculated_; }
    }
    
    public const int ElementsFieldNumber = 20;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.ModelElement> elements_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.ModelElement>();
    public scg::IList<global::CarbonCore.Protocol.Resource.ModelElement> ElementsList {
      get { return elements_; }
    }
    public int ElementsCount {
      get { return elements_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.ModelElement GetElements(int index) {
      return elements_[index];
    }
    
    public const int MaterialsFieldNumber = 21;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.ModelMaterial> materials_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.ModelMaterial>();
    public scg::IList<global::CarbonCore.Protocol.Resource.ModelMaterial> MaterialsList {
      get { return materials_; }
    }
    public int MaterialsCount {
      get { return materials_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.ModelMaterial GetMaterials(int index) {
      return materials_[index];
    }
    
    public const int IndicesFieldNumber = 22;
    private pbc::PopsicleList<uint> indices_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> IndicesList {
      get { return pbc::Lists.AsReadOnly(indices_); }
    }
    public int IndicesCount {
      get { return indices_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetIndices(int index) {
      return indices_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasName) return false;
        if (!hasTangentsCalculated) return false;
        foreach (global::CarbonCore.Protocol.Resource.ModelMaterial element in MaterialsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _modelFieldNames;
      if (hasVersion) {
        output.WriteInt32(1, field_names[5], Version);
      }
      if (hasName) {
        output.WriteString(2, field_names[3], Name);
      }
      if (hasTangentsCalculated) {
        output.WriteBool(3, field_names[4], TangentsCalculated);
      }
      if (elements_.Count > 0) {
        output.WriteMessageArray(20, field_names[0], elements_);
      }
      if (materials_.Count > 0) {
        output.WriteMessageArray(21, field_names[2], materials_);
      }
      if (indices_.Count > 0) {
        output.WriteUInt32Array(22, field_names[1], indices_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasTangentsCalculated) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, TangentsCalculated);
        }
        foreach (global::CarbonCore.Protocol.Resource.ModelElement element in ElementsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, element);
        }
        foreach (global::CarbonCore.Protocol.Resource.ModelMaterial element in MaterialsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, element);
        }
        {
          int dataSize = 0;
          foreach (uint element in IndicesList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 2 * indices_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Model ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Model ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Model ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Model ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Model ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Model ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Model ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Model ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Model ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Model ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Model MakeReadOnly() {
      elements_.MakeReadOnly();
      materials_.MakeReadOnly();
      indices_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Model prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Model, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Model cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Model result;
      
      private Model PrepareBuilder() {
        if (resultIsReadOnly) {
          Model original = result;
          result = new Model();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Model MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.Model.Descriptor; }
      }
      
      public override Model DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.Model.DefaultInstance; }
      }
      
      public override Model BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Model) {
          return MergeFrom((Model) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Model other) {
        if (other == global::CarbonCore.Protocol.Resource.Model.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasTangentsCalculated) {
          TangentsCalculated = other.TangentsCalculated;
        }
        if (other.elements_.Count != 0) {
          result.elements_.Add(other.elements_);
        }
        if (other.materials_.Count != 0) {
          result.materials_.Add(other.materials_);
        }
        if (other.indices_.Count != 0) {
          result.indices_.Add(other.indices_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_modelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _modelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasTangentsCalculated = input.ReadBool(ref result.tangentsCalculated_);
              break;
            }
            case 162: {
              input.ReadMessageArray(tag, field_name, result.elements_, global::CarbonCore.Protocol.Resource.ModelElement.DefaultInstance, extensionRegistry);
              break;
            }
            case 170: {
              input.ReadMessageArray(tag, field_name, result.materials_, global::CarbonCore.Protocol.Resource.ModelMaterial.DefaultInstance, extensionRegistry);
              break;
            }
            case 178:
            case 176: {
              input.ReadUInt32Array(tag, field_name, result.indices_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 1;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasTangentsCalculated {
        get { return result.hasTangentsCalculated; }
      }
      public bool TangentsCalculated {
        get { return result.TangentsCalculated; }
        set { SetTangentsCalculated(value); }
      }
      public Builder SetTangentsCalculated(bool value) {
        PrepareBuilder();
        result.hasTangentsCalculated = true;
        result.tangentsCalculated_ = value;
        return this;
      }
      public Builder ClearTangentsCalculated() {
        PrepareBuilder();
        result.hasTangentsCalculated = false;
        result.tangentsCalculated_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.ModelElement> ElementsList {
        get { return PrepareBuilder().elements_; }
      }
      public int ElementsCount {
        get { return result.ElementsCount; }
      }
      public global::CarbonCore.Protocol.Resource.ModelElement GetElements(int index) {
        return result.GetElements(index);
      }
      public Builder SetElements(int index, global::CarbonCore.Protocol.Resource.ModelElement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.elements_[index] = value;
        return this;
      }
      public Builder SetElements(int index, global::CarbonCore.Protocol.Resource.ModelElement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.elements_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddElements(global::CarbonCore.Protocol.Resource.ModelElement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.elements_.Add(value);
        return this;
      }
      public Builder AddElements(global::CarbonCore.Protocol.Resource.ModelElement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.elements_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeElements(scg::IEnumerable<global::CarbonCore.Protocol.Resource.ModelElement> values) {
        PrepareBuilder();
        result.elements_.Add(values);
        return this;
      }
      public Builder ClearElements() {
        PrepareBuilder();
        result.elements_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.ModelMaterial> MaterialsList {
        get { return PrepareBuilder().materials_; }
      }
      public int MaterialsCount {
        get { return result.MaterialsCount; }
      }
      public global::CarbonCore.Protocol.Resource.ModelMaterial GetMaterials(int index) {
        return result.GetMaterials(index);
      }
      public Builder SetMaterials(int index, global::CarbonCore.Protocol.Resource.ModelMaterial value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.materials_[index] = value;
        return this;
      }
      public Builder SetMaterials(int index, global::CarbonCore.Protocol.Resource.ModelMaterial.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.materials_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMaterials(global::CarbonCore.Protocol.Resource.ModelMaterial value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.materials_.Add(value);
        return this;
      }
      public Builder AddMaterials(global::CarbonCore.Protocol.Resource.ModelMaterial.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.materials_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMaterials(scg::IEnumerable<global::CarbonCore.Protocol.Resource.ModelMaterial> values) {
        PrepareBuilder();
        result.materials_.Add(values);
        return this;
      }
      public Builder ClearMaterials() {
        PrepareBuilder();
        result.materials_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> IndicesList {
        get { return PrepareBuilder().indices_; }
      }
      public int IndicesCount {
        get { return result.IndicesCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetIndices(int index) {
        return result.GetIndices(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIndices(int index, uint value) {
        PrepareBuilder();
        result.indices_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddIndices(uint value) {
        PrepareBuilder();
        result.indices_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeIndices(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.indices_.Add(values);
        return this;
      }
      public Builder ClearIndices() {
        PrepareBuilder();
        result.indices_.Clear();
        return this;
      }
    }
    static Model() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ModelGroup : pb::GeneratedMessage<ModelGroup, ModelGroup.Builder> {
    private ModelGroup() { }
    private static readonly ModelGroup defaultInstance = new ModelGroup().MakeReadOnly();
    private static readonly string[] _modelGroupFieldNames = new string[] { "Groups", "Models", "Name", "Offset", "Rotation", "Scale", "Transformations", "Version" };
    private static readonly uint[] _modelGroupFieldTags = new uint[] { 170, 162, 18, 82, 90, 98, 178, 8 };
    public static ModelGroup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ModelGroup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ModelGroup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_ModelGroup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ModelGroup, ModelGroup.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_ModelGroup__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private int version_ = 1;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int OffsetFieldNumber = 10;
    private int offsetMemoizedSerializedSize;
    private pbc::PopsicleList<float> offset_ = new pbc::PopsicleList<float>();
    public scg::IList<float> OffsetList {
      get { return pbc::Lists.AsReadOnly(offset_); }
    }
    public int OffsetCount {
      get { return offset_.Count; }
    }
    public float GetOffset(int index) {
      return offset_[index];
    }
    
    public const int RotationFieldNumber = 11;
    private int rotationMemoizedSerializedSize;
    private pbc::PopsicleList<float> rotation_ = new pbc::PopsicleList<float>();
    public scg::IList<float> RotationList {
      get { return pbc::Lists.AsReadOnly(rotation_); }
    }
    public int RotationCount {
      get { return rotation_.Count; }
    }
    public float GetRotation(int index) {
      return rotation_[index];
    }
    
    public const int ScaleFieldNumber = 12;
    private int scaleMemoizedSerializedSize;
    private pbc::PopsicleList<float> scale_ = new pbc::PopsicleList<float>();
    public scg::IList<float> ScaleList {
      get { return pbc::Lists.AsReadOnly(scale_); }
    }
    public int ScaleCount {
      get { return scale_.Count; }
    }
    public float GetScale(int index) {
      return scale_[index];
    }
    
    public const int ModelsFieldNumber = 20;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.Model> models_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.Model>();
    public scg::IList<global::CarbonCore.Protocol.Resource.Model> ModelsList {
      get { return models_; }
    }
    public int ModelsCount {
      get { return models_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.Model GetModels(int index) {
      return models_[index];
    }
    
    public const int GroupsFieldNumber = 21;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.ModelGroup> groups_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.ModelGroup>();
    public scg::IList<global::CarbonCore.Protocol.Resource.ModelGroup> GroupsList {
      get { return groups_; }
    }
    public int GroupsCount {
      get { return groups_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.ModelGroup GetGroups(int index) {
      return groups_[index];
    }
    
    public const int TransformationsFieldNumber = 22;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StoredMatrix> transformations_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StoredMatrix>();
    public scg::IList<global::CarbonCore.Protocol.Resource.StoredMatrix> TransformationsList {
      get { return transformations_; }
    }
    public int TransformationsCount {
      get { return transformations_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.StoredMatrix GetTransformations(int index) {
      return transformations_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasName) return false;
        foreach (global::CarbonCore.Protocol.Resource.Model element in ModelsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::CarbonCore.Protocol.Resource.ModelGroup element in GroupsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _modelGroupFieldNames;
      if (hasVersion) {
        output.WriteInt32(1, field_names[7], Version);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (offset_.Count > 0) {
        output.WritePackedFloatArray(10, field_names[3], offsetMemoizedSerializedSize, offset_);
      }
      if (rotation_.Count > 0) {
        output.WritePackedFloatArray(11, field_names[4], rotationMemoizedSerializedSize, rotation_);
      }
      if (scale_.Count > 0) {
        output.WritePackedFloatArray(12, field_names[5], scaleMemoizedSerializedSize, scale_);
      }
      if (models_.Count > 0) {
        output.WriteMessageArray(20, field_names[1], models_);
      }
      if (groups_.Count > 0) {
        output.WriteMessageArray(21, field_names[0], groups_);
      }
      if (transformations_.Count > 0) {
        output.WriteMessageArray(22, field_names[6], transformations_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        {
          int dataSize = 0;
          dataSize = 4 * offset_.Count;
          size += dataSize;
          if (offset_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          offsetMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * rotation_.Count;
          size += dataSize;
          if (rotation_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          rotationMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * scale_.Count;
          size += dataSize;
          if (scale_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          scaleMemoizedSerializedSize = dataSize;
        }
        foreach (global::CarbonCore.Protocol.Resource.Model element in ModelsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, element);
        }
        foreach (global::CarbonCore.Protocol.Resource.ModelGroup element in GroupsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, element);
        }
        foreach (global::CarbonCore.Protocol.Resource.StoredMatrix element in TransformationsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(22, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ModelGroup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModelGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModelGroup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModelGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModelGroup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModelGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ModelGroup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ModelGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ModelGroup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModelGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ModelGroup MakeReadOnly() {
      offset_.MakeReadOnly();
      rotation_.MakeReadOnly();
      scale_.MakeReadOnly();
      models_.MakeReadOnly();
      groups_.MakeReadOnly();
      transformations_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ModelGroup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ModelGroup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ModelGroup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ModelGroup result;
      
      private ModelGroup PrepareBuilder() {
        if (resultIsReadOnly) {
          ModelGroup original = result;
          result = new ModelGroup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ModelGroup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.ModelGroup.Descriptor; }
      }
      
      public override ModelGroup DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.ModelGroup.DefaultInstance; }
      }
      
      public override ModelGroup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ModelGroup) {
          return MergeFrom((ModelGroup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ModelGroup other) {
        if (other == global::CarbonCore.Protocol.Resource.ModelGroup.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.offset_.Count != 0) {
          result.offset_.Add(other.offset_);
        }
        if (other.rotation_.Count != 0) {
          result.rotation_.Add(other.rotation_);
        }
        if (other.scale_.Count != 0) {
          result.scale_.Add(other.scale_);
        }
        if (other.models_.Count != 0) {
          result.models_.Add(other.models_);
        }
        if (other.groups_.Count != 0) {
          result.groups_.Add(other.groups_);
        }
        if (other.transformations_.Count != 0) {
          result.transformations_.Add(other.transformations_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_modelGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _modelGroupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 82:
            case 85: {
              input.ReadFloatArray(tag, field_name, result.offset_);
              break;
            }
            case 90:
            case 93: {
              input.ReadFloatArray(tag, field_name, result.rotation_);
              break;
            }
            case 98:
            case 101: {
              input.ReadFloatArray(tag, field_name, result.scale_);
              break;
            }
            case 162: {
              input.ReadMessageArray(tag, field_name, result.models_, global::CarbonCore.Protocol.Resource.Model.DefaultInstance, extensionRegistry);
              break;
            }
            case 170: {
              input.ReadMessageArray(tag, field_name, result.groups_, global::CarbonCore.Protocol.Resource.ModelGroup.DefaultInstance, extensionRegistry);
              break;
            }
            case 178: {
              input.ReadMessageArray(tag, field_name, result.transformations_, global::CarbonCore.Protocol.Resource.StoredMatrix.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 1;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<float> OffsetList {
        get { return PrepareBuilder().offset_; }
      }
      public int OffsetCount {
        get { return result.OffsetCount; }
      }
      public float GetOffset(int index) {
        return result.GetOffset(index);
      }
      public Builder SetOffset(int index, float value) {
        PrepareBuilder();
        result.offset_[index] = value;
        return this;
      }
      public Builder AddOffset(float value) {
        PrepareBuilder();
        result.offset_.Add(value);
        return this;
      }
      public Builder AddRangeOffset(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.offset_.Add(values);
        return this;
      }
      public Builder ClearOffset() {
        PrepareBuilder();
        result.offset_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> RotationList {
        get { return PrepareBuilder().rotation_; }
      }
      public int RotationCount {
        get { return result.RotationCount; }
      }
      public float GetRotation(int index) {
        return result.GetRotation(index);
      }
      public Builder SetRotation(int index, float value) {
        PrepareBuilder();
        result.rotation_[index] = value;
        return this;
      }
      public Builder AddRotation(float value) {
        PrepareBuilder();
        result.rotation_.Add(value);
        return this;
      }
      public Builder AddRangeRotation(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.rotation_.Add(values);
        return this;
      }
      public Builder ClearRotation() {
        PrepareBuilder();
        result.rotation_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> ScaleList {
        get { return PrepareBuilder().scale_; }
      }
      public int ScaleCount {
        get { return result.ScaleCount; }
      }
      public float GetScale(int index) {
        return result.GetScale(index);
      }
      public Builder SetScale(int index, float value) {
        PrepareBuilder();
        result.scale_[index] = value;
        return this;
      }
      public Builder AddScale(float value) {
        PrepareBuilder();
        result.scale_.Add(value);
        return this;
      }
      public Builder AddRangeScale(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.scale_.Add(values);
        return this;
      }
      public Builder ClearScale() {
        PrepareBuilder();
        result.scale_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.Model> ModelsList {
        get { return PrepareBuilder().models_; }
      }
      public int ModelsCount {
        get { return result.ModelsCount; }
      }
      public global::CarbonCore.Protocol.Resource.Model GetModels(int index) {
        return result.GetModels(index);
      }
      public Builder SetModels(int index, global::CarbonCore.Protocol.Resource.Model value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.models_[index] = value;
        return this;
      }
      public Builder SetModels(int index, global::CarbonCore.Protocol.Resource.Model.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.models_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddModels(global::CarbonCore.Protocol.Resource.Model value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.models_.Add(value);
        return this;
      }
      public Builder AddModels(global::CarbonCore.Protocol.Resource.Model.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.models_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeModels(scg::IEnumerable<global::CarbonCore.Protocol.Resource.Model> values) {
        PrepareBuilder();
        result.models_.Add(values);
        return this;
      }
      public Builder ClearModels() {
        PrepareBuilder();
        result.models_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.ModelGroup> GroupsList {
        get { return PrepareBuilder().groups_; }
      }
      public int GroupsCount {
        get { return result.GroupsCount; }
      }
      public global::CarbonCore.Protocol.Resource.ModelGroup GetGroups(int index) {
        return result.GetGroups(index);
      }
      public Builder SetGroups(int index, global::CarbonCore.Protocol.Resource.ModelGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groups_[index] = value;
        return this;
      }
      public Builder SetGroups(int index, global::CarbonCore.Protocol.Resource.ModelGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groups_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGroups(global::CarbonCore.Protocol.Resource.ModelGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groups_.Add(value);
        return this;
      }
      public Builder AddGroups(global::CarbonCore.Protocol.Resource.ModelGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groups_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGroups(scg::IEnumerable<global::CarbonCore.Protocol.Resource.ModelGroup> values) {
        PrepareBuilder();
        result.groups_.Add(values);
        return this;
      }
      public Builder ClearGroups() {
        PrepareBuilder();
        result.groups_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.StoredMatrix> TransformationsList {
        get { return PrepareBuilder().transformations_; }
      }
      public int TransformationsCount {
        get { return result.TransformationsCount; }
      }
      public global::CarbonCore.Protocol.Resource.StoredMatrix GetTransformations(int index) {
        return result.GetTransformations(index);
      }
      public Builder SetTransformations(int index, global::CarbonCore.Protocol.Resource.StoredMatrix value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.transformations_[index] = value;
        return this;
      }
      public Builder SetTransformations(int index, global::CarbonCore.Protocol.Resource.StoredMatrix.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.transformations_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTransformations(global::CarbonCore.Protocol.Resource.StoredMatrix value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.transformations_.Add(value);
        return this;
      }
      public Builder AddTransformations(global::CarbonCore.Protocol.Resource.StoredMatrix.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.transformations_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTransformations(scg::IEnumerable<global::CarbonCore.Protocol.Resource.StoredMatrix> values) {
        PrepareBuilder();
        result.transformations_.Add(values);
        return this;
      }
      public Builder ClearTransformations() {
        PrepareBuilder();
        result.transformations_.Clear();
        return this;
      }
    }
    static ModelGroup() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageProperty : pb::GeneratedMessage<StageProperty, StageProperty.Builder> {
    private StageProperty() { }
    private static readonly StageProperty defaultInstance = new StageProperty().MakeReadOnly();
    private static readonly string[] _stagePropertyFieldNames = new string[] { "Data", "Id", "Type" };
    private static readonly uint[] _stagePropertyFieldTags = new uint[] { 26, 10, 16 };
    public static StageProperty DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StageProperty DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StageProperty ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_StageProperty__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StageProperty, StageProperty.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_StageProperty__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum StagePropertyType {
        Unknown = 0,
        String = 1,
        Float = 2,
        Int = 3,
      }
      
    }
    #endregion
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::CarbonCore.Protocol.Resource.StageProperty.Types.StagePropertyType type_ = global::CarbonCore.Protocol.Resource.StageProperty.Types.StagePropertyType.Unknown;
    public bool HasType {
      get { return hasType; }
    }
    public global::CarbonCore.Protocol.Resource.StageProperty.Types.StagePropertyType Type {
      get { return type_; }
    }
    
    public const int DataFieldNumber = 3;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasType) return false;
        if (!hasData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _stagePropertyFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[2], (int) Type, Type);
      }
      if (hasData) {
        output.WriteBytes(3, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Id);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StageProperty ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageProperty ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageProperty ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageProperty ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageProperty ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageProperty ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StageProperty ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StageProperty ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StageProperty ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageProperty ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StageProperty MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StageProperty prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StageProperty, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StageProperty cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StageProperty result;
      
      private StageProperty PrepareBuilder() {
        if (resultIsReadOnly) {
          StageProperty original = result;
          result = new StageProperty();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StageProperty MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.StageProperty.Descriptor; }
      }
      
      public override StageProperty DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.StageProperty.DefaultInstance; }
      }
      
      public override StageProperty BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StageProperty) {
          return MergeFrom((StageProperty) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StageProperty other) {
        if (other == global::CarbonCore.Protocol.Resource.StageProperty.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stagePropertyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stagePropertyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::CarbonCore.Protocol.Resource.StageProperty.Types.StagePropertyType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::CarbonCore.Protocol.Resource.StageProperty.Types.StagePropertyType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::CarbonCore.Protocol.Resource.StageProperty.Types.StagePropertyType.Unknown;
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static StageProperty() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageCamera : pb::GeneratedMessage<StageCamera, StageCamera.Builder> {
    private StageCamera() { }
    private static readonly StageCamera defaultInstance = new StageCamera().MakeReadOnly();
    private static readonly string[] _stageCameraFieldNames = new string[] { "FieldOfView", "Id", "LayerFlags", "Position", "Properties", "Rotation" };
    private static readonly uint[] _stageCameraFieldTags = new uint[] { 21, 10, 80, 162, 90, 170 };
    public static StageCamera DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StageCamera DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StageCamera ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_StageCamera__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StageCamera, StageCamera.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_StageCamera__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int FieldOfViewFieldNumber = 2;
    private bool hasFieldOfView;
    private float fieldOfView_;
    public bool HasFieldOfView {
      get { return hasFieldOfView; }
    }
    public float FieldOfView {
      get { return fieldOfView_; }
    }
    
    public const int LayerFlagsFieldNumber = 10;
    private bool hasLayerFlags;
    private int layerFlags_;
    public bool HasLayerFlags {
      get { return hasLayerFlags; }
    }
    public int LayerFlags {
      get { return layerFlags_; }
    }
    
    public const int PropertiesFieldNumber = 11;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageProperty> properties_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageProperty>();
    public scg::IList<global::CarbonCore.Protocol.Resource.StageProperty> PropertiesList {
      get { return properties_; }
    }
    public int PropertiesCount {
      get { return properties_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.StageProperty GetProperties(int index) {
      return properties_[index];
    }
    
    public const int PositionFieldNumber = 20;
    private int positionMemoizedSerializedSize;
    private pbc::PopsicleList<float> position_ = new pbc::PopsicleList<float>();
    public scg::IList<float> PositionList {
      get { return pbc::Lists.AsReadOnly(position_); }
    }
    public int PositionCount {
      get { return position_.Count; }
    }
    public float GetPosition(int index) {
      return position_[index];
    }
    
    public const int RotationFieldNumber = 21;
    private int rotationMemoizedSerializedSize;
    private pbc::PopsicleList<float> rotation_ = new pbc::PopsicleList<float>();
    public scg::IList<float> RotationList {
      get { return pbc::Lists.AsReadOnly(rotation_); }
    }
    public int RotationCount {
      get { return rotation_.Count; }
    }
    public float GetRotation(int index) {
      return rotation_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasFieldOfView) return false;
        foreach (global::CarbonCore.Protocol.Resource.StageProperty element in PropertiesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _stageCameraFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasFieldOfView) {
        output.WriteFloat(2, field_names[0], FieldOfView);
      }
      if (hasLayerFlags) {
        output.WriteInt32(10, field_names[2], LayerFlags);
      }
      if (properties_.Count > 0) {
        output.WriteMessageArray(11, field_names[4], properties_);
      }
      if (position_.Count > 0) {
        output.WritePackedFloatArray(20, field_names[3], positionMemoizedSerializedSize, position_);
      }
      if (rotation_.Count > 0) {
        output.WritePackedFloatArray(21, field_names[5], rotationMemoizedSerializedSize, rotation_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Id);
        }
        if (hasFieldOfView) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, FieldOfView);
        }
        if (hasLayerFlags) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, LayerFlags);
        }
        foreach (global::CarbonCore.Protocol.Resource.StageProperty element in PropertiesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        {
          int dataSize = 0;
          dataSize = 4 * position_.Count;
          size += dataSize;
          if (position_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          positionMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * rotation_.Count;
          size += dataSize;
          if (rotation_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          rotationMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StageCamera ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageCamera ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageCamera ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageCamera ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageCamera ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageCamera ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StageCamera ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StageCamera ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StageCamera ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageCamera ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StageCamera MakeReadOnly() {
      properties_.MakeReadOnly();
      position_.MakeReadOnly();
      rotation_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StageCamera prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StageCamera, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StageCamera cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StageCamera result;
      
      private StageCamera PrepareBuilder() {
        if (resultIsReadOnly) {
          StageCamera original = result;
          result = new StageCamera();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StageCamera MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.StageCamera.Descriptor; }
      }
      
      public override StageCamera DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.StageCamera.DefaultInstance; }
      }
      
      public override StageCamera BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StageCamera) {
          return MergeFrom((StageCamera) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StageCamera other) {
        if (other == global::CarbonCore.Protocol.Resource.StageCamera.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasFieldOfView) {
          FieldOfView = other.FieldOfView;
        }
        if (other.HasLayerFlags) {
          LayerFlags = other.LayerFlags;
        }
        if (other.properties_.Count != 0) {
          result.properties_.Add(other.properties_);
        }
        if (other.position_.Count != 0) {
          result.position_.Add(other.position_);
        }
        if (other.rotation_.Count != 0) {
          result.rotation_.Add(other.rotation_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stageCameraFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stageCameraFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 21: {
              result.hasFieldOfView = input.ReadFloat(ref result.fieldOfView_);
              break;
            }
            case 80: {
              result.hasLayerFlags = input.ReadInt32(ref result.layerFlags_);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.properties_, global::CarbonCore.Protocol.Resource.StageProperty.DefaultInstance, extensionRegistry);
              break;
            }
            case 162:
            case 165: {
              input.ReadFloatArray(tag, field_name, result.position_);
              break;
            }
            case 170:
            case 173: {
              input.ReadFloatArray(tag, field_name, result.rotation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasFieldOfView {
        get { return result.hasFieldOfView; }
      }
      public float FieldOfView {
        get { return result.FieldOfView; }
        set { SetFieldOfView(value); }
      }
      public Builder SetFieldOfView(float value) {
        PrepareBuilder();
        result.hasFieldOfView = true;
        result.fieldOfView_ = value;
        return this;
      }
      public Builder ClearFieldOfView() {
        PrepareBuilder();
        result.hasFieldOfView = false;
        result.fieldOfView_ = 0F;
        return this;
      }
      
      public bool HasLayerFlags {
        get { return result.hasLayerFlags; }
      }
      public int LayerFlags {
        get { return result.LayerFlags; }
        set { SetLayerFlags(value); }
      }
      public Builder SetLayerFlags(int value) {
        PrepareBuilder();
        result.hasLayerFlags = true;
        result.layerFlags_ = value;
        return this;
      }
      public Builder ClearLayerFlags() {
        PrepareBuilder();
        result.hasLayerFlags = false;
        result.layerFlags_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.StageProperty> PropertiesList {
        get { return PrepareBuilder().properties_; }
      }
      public int PropertiesCount {
        get { return result.PropertiesCount; }
      }
      public global::CarbonCore.Protocol.Resource.StageProperty GetProperties(int index) {
        return result.GetProperties(index);
      }
      public Builder SetProperties(int index, global::CarbonCore.Protocol.Resource.StageProperty value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.properties_[index] = value;
        return this;
      }
      public Builder SetProperties(int index, global::CarbonCore.Protocol.Resource.StageProperty.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.properties_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddProperties(global::CarbonCore.Protocol.Resource.StageProperty value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.properties_.Add(value);
        return this;
      }
      public Builder AddProperties(global::CarbonCore.Protocol.Resource.StageProperty.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.properties_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeProperties(scg::IEnumerable<global::CarbonCore.Protocol.Resource.StageProperty> values) {
        PrepareBuilder();
        result.properties_.Add(values);
        return this;
      }
      public Builder ClearProperties() {
        PrepareBuilder();
        result.properties_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> PositionList {
        get { return PrepareBuilder().position_; }
      }
      public int PositionCount {
        get { return result.PositionCount; }
      }
      public float GetPosition(int index) {
        return result.GetPosition(index);
      }
      public Builder SetPosition(int index, float value) {
        PrepareBuilder();
        result.position_[index] = value;
        return this;
      }
      public Builder AddPosition(float value) {
        PrepareBuilder();
        result.position_.Add(value);
        return this;
      }
      public Builder AddRangePosition(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.position_.Add(values);
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.position_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> RotationList {
        get { return PrepareBuilder().rotation_; }
      }
      public int RotationCount {
        get { return result.RotationCount; }
      }
      public float GetRotation(int index) {
        return result.GetRotation(index);
      }
      public Builder SetRotation(int index, float value) {
        PrepareBuilder();
        result.rotation_[index] = value;
        return this;
      }
      public Builder AddRotation(float value) {
        PrepareBuilder();
        result.rotation_.Add(value);
        return this;
      }
      public Builder AddRangeRotation(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.rotation_.Add(values);
        return this;
      }
      public Builder ClearRotation() {
        PrepareBuilder();
        result.rotation_.Clear();
        return this;
      }
    }
    static StageCamera() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageLight : pb::GeneratedMessage<StageLight, StageLight.Builder> {
    private StageLight() { }
    private static readonly StageLight defaultInstance = new StageLight().MakeReadOnly();
    private static readonly string[] _stageLightFieldNames = new string[] { "AmbientIntensity", "Angle", "Color", "Direction", "Id", "Intensity", "LayerFlags", "Location", "Properties", "Radius", "SpotSize", "Type" };
    private static readonly uint[] _stageLightFieldTags = new uint[] { 45, 61, 178, 170, 10, 37, 80, 162, 90, 29, 53, 16 };
    public static StageLight DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StageLight DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StageLight ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_StageLight__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StageLight, StageLight.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_StageLight__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum StageLightType {
        Unknown = 0,
        Spot = 1,
        Directional = 2,
        Point = 3,
      }
      
    }
    #endregion
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::CarbonCore.Protocol.Resource.StageLight.Types.StageLightType type_ = global::CarbonCore.Protocol.Resource.StageLight.Types.StageLightType.Unknown;
    public bool HasType {
      get { return hasType; }
    }
    public global::CarbonCore.Protocol.Resource.StageLight.Types.StageLightType Type {
      get { return type_; }
    }
    
    public const int RadiusFieldNumber = 3;
    private bool hasRadius;
    private float radius_;
    public bool HasRadius {
      get { return hasRadius; }
    }
    public float Radius {
      get { return radius_; }
    }
    
    public const int IntensityFieldNumber = 4;
    private bool hasIntensity;
    private float intensity_;
    public bool HasIntensity {
      get { return hasIntensity; }
    }
    public float Intensity {
      get { return intensity_; }
    }
    
    public const int AmbientIntensityFieldNumber = 5;
    private bool hasAmbientIntensity;
    private float ambientIntensity_;
    public bool HasAmbientIntensity {
      get { return hasAmbientIntensity; }
    }
    public float AmbientIntensity {
      get { return ambientIntensity_; }
    }
    
    public const int SpotSizeFieldNumber = 6;
    private bool hasSpotSize;
    private float spotSize_;
    public bool HasSpotSize {
      get { return hasSpotSize; }
    }
    public float SpotSize {
      get { return spotSize_; }
    }
    
    public const int AngleFieldNumber = 7;
    private bool hasAngle;
    private float angle_;
    public bool HasAngle {
      get { return hasAngle; }
    }
    public float Angle {
      get { return angle_; }
    }
    
    public const int LayerFlagsFieldNumber = 10;
    private bool hasLayerFlags;
    private int layerFlags_;
    public bool HasLayerFlags {
      get { return hasLayerFlags; }
    }
    public int LayerFlags {
      get { return layerFlags_; }
    }
    
    public const int PropertiesFieldNumber = 11;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageProperty> properties_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageProperty>();
    public scg::IList<global::CarbonCore.Protocol.Resource.StageProperty> PropertiesList {
      get { return properties_; }
    }
    public int PropertiesCount {
      get { return properties_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.StageProperty GetProperties(int index) {
      return properties_[index];
    }
    
    public const int LocationFieldNumber = 20;
    private int locationMemoizedSerializedSize;
    private pbc::PopsicleList<float> location_ = new pbc::PopsicleList<float>();
    public scg::IList<float> LocationList {
      get { return pbc::Lists.AsReadOnly(location_); }
    }
    public int LocationCount {
      get { return location_.Count; }
    }
    public float GetLocation(int index) {
      return location_[index];
    }
    
    public const int DirectionFieldNumber = 21;
    private int directionMemoizedSerializedSize;
    private pbc::PopsicleList<float> direction_ = new pbc::PopsicleList<float>();
    public scg::IList<float> DirectionList {
      get { return pbc::Lists.AsReadOnly(direction_); }
    }
    public int DirectionCount {
      get { return direction_.Count; }
    }
    public float GetDirection(int index) {
      return direction_[index];
    }
    
    public const int ColorFieldNumber = 22;
    private int colorMemoizedSerializedSize;
    private pbc::PopsicleList<float> color_ = new pbc::PopsicleList<float>();
    public scg::IList<float> ColorList {
      get { return pbc::Lists.AsReadOnly(color_); }
    }
    public int ColorCount {
      get { return color_.Count; }
    }
    public float GetColor(int index) {
      return color_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasType) return false;
        foreach (global::CarbonCore.Protocol.Resource.StageProperty element in PropertiesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _stageLightFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[4], Id);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[11], (int) Type, Type);
      }
      if (hasRadius) {
        output.WriteFloat(3, field_names[9], Radius);
      }
      if (hasIntensity) {
        output.WriteFloat(4, field_names[5], Intensity);
      }
      if (hasAmbientIntensity) {
        output.WriteFloat(5, field_names[0], AmbientIntensity);
      }
      if (hasSpotSize) {
        output.WriteFloat(6, field_names[10], SpotSize);
      }
      if (hasAngle) {
        output.WriteFloat(7, field_names[1], Angle);
      }
      if (hasLayerFlags) {
        output.WriteInt32(10, field_names[6], LayerFlags);
      }
      if (properties_.Count > 0) {
        output.WriteMessageArray(11, field_names[8], properties_);
      }
      if (location_.Count > 0) {
        output.WritePackedFloatArray(20, field_names[7], locationMemoizedSerializedSize, location_);
      }
      if (direction_.Count > 0) {
        output.WritePackedFloatArray(21, field_names[3], directionMemoizedSerializedSize, direction_);
      }
      if (color_.Count > 0) {
        output.WritePackedFloatArray(22, field_names[2], colorMemoizedSerializedSize, color_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Id);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (hasRadius) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Radius);
        }
        if (hasIntensity) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Intensity);
        }
        if (hasAmbientIntensity) {
          size += pb::CodedOutputStream.ComputeFloatSize(5, AmbientIntensity);
        }
        if (hasSpotSize) {
          size += pb::CodedOutputStream.ComputeFloatSize(6, SpotSize);
        }
        if (hasAngle) {
          size += pb::CodedOutputStream.ComputeFloatSize(7, Angle);
        }
        if (hasLayerFlags) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, LayerFlags);
        }
        foreach (global::CarbonCore.Protocol.Resource.StageProperty element in PropertiesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        {
          int dataSize = 0;
          dataSize = 4 * location_.Count;
          size += dataSize;
          if (location_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          locationMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * direction_.Count;
          size += dataSize;
          if (direction_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          directionMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * color_.Count;
          size += dataSize;
          if (color_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          colorMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StageLight ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageLight ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageLight ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageLight ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageLight ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageLight ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StageLight ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StageLight ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StageLight ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageLight ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StageLight MakeReadOnly() {
      properties_.MakeReadOnly();
      location_.MakeReadOnly();
      direction_.MakeReadOnly();
      color_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StageLight prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StageLight, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StageLight cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StageLight result;
      
      private StageLight PrepareBuilder() {
        if (resultIsReadOnly) {
          StageLight original = result;
          result = new StageLight();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StageLight MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.StageLight.Descriptor; }
      }
      
      public override StageLight DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.StageLight.DefaultInstance; }
      }
      
      public override StageLight BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StageLight) {
          return MergeFrom((StageLight) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StageLight other) {
        if (other == global::CarbonCore.Protocol.Resource.StageLight.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasRadius) {
          Radius = other.Radius;
        }
        if (other.HasIntensity) {
          Intensity = other.Intensity;
        }
        if (other.HasAmbientIntensity) {
          AmbientIntensity = other.AmbientIntensity;
        }
        if (other.HasSpotSize) {
          SpotSize = other.SpotSize;
        }
        if (other.HasAngle) {
          Angle = other.Angle;
        }
        if (other.HasLayerFlags) {
          LayerFlags = other.LayerFlags;
        }
        if (other.properties_.Count != 0) {
          result.properties_.Add(other.properties_);
        }
        if (other.location_.Count != 0) {
          result.location_.Add(other.location_);
        }
        if (other.direction_.Count != 0) {
          result.direction_.Add(other.direction_);
        }
        if (other.color_.Count != 0) {
          result.color_.Add(other.color_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stageLightFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stageLightFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 29: {
              result.hasRadius = input.ReadFloat(ref result.radius_);
              break;
            }
            case 37: {
              result.hasIntensity = input.ReadFloat(ref result.intensity_);
              break;
            }
            case 45: {
              result.hasAmbientIntensity = input.ReadFloat(ref result.ambientIntensity_);
              break;
            }
            case 53: {
              result.hasSpotSize = input.ReadFloat(ref result.spotSize_);
              break;
            }
            case 61: {
              result.hasAngle = input.ReadFloat(ref result.angle_);
              break;
            }
            case 80: {
              result.hasLayerFlags = input.ReadInt32(ref result.layerFlags_);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.properties_, global::CarbonCore.Protocol.Resource.StageProperty.DefaultInstance, extensionRegistry);
              break;
            }
            case 162:
            case 165: {
              input.ReadFloatArray(tag, field_name, result.location_);
              break;
            }
            case 170:
            case 173: {
              input.ReadFloatArray(tag, field_name, result.direction_);
              break;
            }
            case 178:
            case 181: {
              input.ReadFloatArray(tag, field_name, result.color_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::CarbonCore.Protocol.Resource.StageLight.Types.StageLightType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::CarbonCore.Protocol.Resource.StageLight.Types.StageLightType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::CarbonCore.Protocol.Resource.StageLight.Types.StageLightType.Unknown;
        return this;
      }
      
      public bool HasRadius {
        get { return result.hasRadius; }
      }
      public float Radius {
        get { return result.Radius; }
        set { SetRadius(value); }
      }
      public Builder SetRadius(float value) {
        PrepareBuilder();
        result.hasRadius = true;
        result.radius_ = value;
        return this;
      }
      public Builder ClearRadius() {
        PrepareBuilder();
        result.hasRadius = false;
        result.radius_ = 0F;
        return this;
      }
      
      public bool HasIntensity {
        get { return result.hasIntensity; }
      }
      public float Intensity {
        get { return result.Intensity; }
        set { SetIntensity(value); }
      }
      public Builder SetIntensity(float value) {
        PrepareBuilder();
        result.hasIntensity = true;
        result.intensity_ = value;
        return this;
      }
      public Builder ClearIntensity() {
        PrepareBuilder();
        result.hasIntensity = false;
        result.intensity_ = 0F;
        return this;
      }
      
      public bool HasAmbientIntensity {
        get { return result.hasAmbientIntensity; }
      }
      public float AmbientIntensity {
        get { return result.AmbientIntensity; }
        set { SetAmbientIntensity(value); }
      }
      public Builder SetAmbientIntensity(float value) {
        PrepareBuilder();
        result.hasAmbientIntensity = true;
        result.ambientIntensity_ = value;
        return this;
      }
      public Builder ClearAmbientIntensity() {
        PrepareBuilder();
        result.hasAmbientIntensity = false;
        result.ambientIntensity_ = 0F;
        return this;
      }
      
      public bool HasSpotSize {
        get { return result.hasSpotSize; }
      }
      public float SpotSize {
        get { return result.SpotSize; }
        set { SetSpotSize(value); }
      }
      public Builder SetSpotSize(float value) {
        PrepareBuilder();
        result.hasSpotSize = true;
        result.spotSize_ = value;
        return this;
      }
      public Builder ClearSpotSize() {
        PrepareBuilder();
        result.hasSpotSize = false;
        result.spotSize_ = 0F;
        return this;
      }
      
      public bool HasAngle {
        get { return result.hasAngle; }
      }
      public float Angle {
        get { return result.Angle; }
        set { SetAngle(value); }
      }
      public Builder SetAngle(float value) {
        PrepareBuilder();
        result.hasAngle = true;
        result.angle_ = value;
        return this;
      }
      public Builder ClearAngle() {
        PrepareBuilder();
        result.hasAngle = false;
        result.angle_ = 0F;
        return this;
      }
      
      public bool HasLayerFlags {
        get { return result.hasLayerFlags; }
      }
      public int LayerFlags {
        get { return result.LayerFlags; }
        set { SetLayerFlags(value); }
      }
      public Builder SetLayerFlags(int value) {
        PrepareBuilder();
        result.hasLayerFlags = true;
        result.layerFlags_ = value;
        return this;
      }
      public Builder ClearLayerFlags() {
        PrepareBuilder();
        result.hasLayerFlags = false;
        result.layerFlags_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.StageProperty> PropertiesList {
        get { return PrepareBuilder().properties_; }
      }
      public int PropertiesCount {
        get { return result.PropertiesCount; }
      }
      public global::CarbonCore.Protocol.Resource.StageProperty GetProperties(int index) {
        return result.GetProperties(index);
      }
      public Builder SetProperties(int index, global::CarbonCore.Protocol.Resource.StageProperty value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.properties_[index] = value;
        return this;
      }
      public Builder SetProperties(int index, global::CarbonCore.Protocol.Resource.StageProperty.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.properties_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddProperties(global::CarbonCore.Protocol.Resource.StageProperty value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.properties_.Add(value);
        return this;
      }
      public Builder AddProperties(global::CarbonCore.Protocol.Resource.StageProperty.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.properties_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeProperties(scg::IEnumerable<global::CarbonCore.Protocol.Resource.StageProperty> values) {
        PrepareBuilder();
        result.properties_.Add(values);
        return this;
      }
      public Builder ClearProperties() {
        PrepareBuilder();
        result.properties_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> LocationList {
        get { return PrepareBuilder().location_; }
      }
      public int LocationCount {
        get { return result.LocationCount; }
      }
      public float GetLocation(int index) {
        return result.GetLocation(index);
      }
      public Builder SetLocation(int index, float value) {
        PrepareBuilder();
        result.location_[index] = value;
        return this;
      }
      public Builder AddLocation(float value) {
        PrepareBuilder();
        result.location_.Add(value);
        return this;
      }
      public Builder AddRangeLocation(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.location_.Add(values);
        return this;
      }
      public Builder ClearLocation() {
        PrepareBuilder();
        result.location_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> DirectionList {
        get { return PrepareBuilder().direction_; }
      }
      public int DirectionCount {
        get { return result.DirectionCount; }
      }
      public float GetDirection(int index) {
        return result.GetDirection(index);
      }
      public Builder SetDirection(int index, float value) {
        PrepareBuilder();
        result.direction_[index] = value;
        return this;
      }
      public Builder AddDirection(float value) {
        PrepareBuilder();
        result.direction_.Add(value);
        return this;
      }
      public Builder AddRangeDirection(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.direction_.Add(values);
        return this;
      }
      public Builder ClearDirection() {
        PrepareBuilder();
        result.direction_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> ColorList {
        get { return PrepareBuilder().color_; }
      }
      public int ColorCount {
        get { return result.ColorCount; }
      }
      public float GetColor(int index) {
        return result.GetColor(index);
      }
      public Builder SetColor(int index, float value) {
        PrepareBuilder();
        result.color_[index] = value;
        return this;
      }
      public Builder AddColor(float value) {
        PrepareBuilder();
        result.color_.Add(value);
        return this;
      }
      public Builder AddRangeColor(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.color_.Add(values);
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.color_.Clear();
        return this;
      }
    }
    static StageLight() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageModel : pb::GeneratedMessage<StageModel, StageModel.Builder> {
    private StageModel() { }
    private static readonly StageModel defaultInstance = new StageModel().MakeReadOnly();
    private static readonly string[] _stageModelFieldNames = new string[] { "Children", "Id", "LayerFlags", "Properties", "ReferenceId", "Rotation", "Scale", "Translation" };
    private static readonly uint[] _stageModelFieldTags = new uint[] { 242, 10, 80, 90, 16, 170, 178, 162 };
    public static StageModel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StageModel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StageModel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_StageModel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StageModel, StageModel.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_StageModel__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ReferenceIdFieldNumber = 2;
    private bool hasReferenceId;
    private int referenceId_;
    public bool HasReferenceId {
      get { return hasReferenceId; }
    }
    public int ReferenceId {
      get { return referenceId_; }
    }
    
    public const int LayerFlagsFieldNumber = 10;
    private bool hasLayerFlags;
    private int layerFlags_;
    public bool HasLayerFlags {
      get { return hasLayerFlags; }
    }
    public int LayerFlags {
      get { return layerFlags_; }
    }
    
    public const int PropertiesFieldNumber = 11;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageProperty> properties_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageProperty>();
    public scg::IList<global::CarbonCore.Protocol.Resource.StageProperty> PropertiesList {
      get { return properties_; }
    }
    public int PropertiesCount {
      get { return properties_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.StageProperty GetProperties(int index) {
      return properties_[index];
    }
    
    public const int TranslationFieldNumber = 20;
    private int translationMemoizedSerializedSize;
    private pbc::PopsicleList<float> translation_ = new pbc::PopsicleList<float>();
    public scg::IList<float> TranslationList {
      get { return pbc::Lists.AsReadOnly(translation_); }
    }
    public int TranslationCount {
      get { return translation_.Count; }
    }
    public float GetTranslation(int index) {
      return translation_[index];
    }
    
    public const int RotationFieldNumber = 21;
    private int rotationMemoizedSerializedSize;
    private pbc::PopsicleList<float> rotation_ = new pbc::PopsicleList<float>();
    public scg::IList<float> RotationList {
      get { return pbc::Lists.AsReadOnly(rotation_); }
    }
    public int RotationCount {
      get { return rotation_.Count; }
    }
    public float GetRotation(int index) {
      return rotation_[index];
    }
    
    public const int ScaleFieldNumber = 22;
    private int scaleMemoizedSerializedSize;
    private pbc::PopsicleList<float> scale_ = new pbc::PopsicleList<float>();
    public scg::IList<float> ScaleList {
      get { return pbc::Lists.AsReadOnly(scale_); }
    }
    public int ScaleCount {
      get { return scale_.Count; }
    }
    public float GetScale(int index) {
      return scale_[index];
    }
    
    public const int ChildrenFieldNumber = 30;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageModel> children_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageModel>();
    public scg::IList<global::CarbonCore.Protocol.Resource.StageModel> ChildrenList {
      get { return children_; }
    }
    public int ChildrenCount {
      get { return children_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.StageModel GetChildren(int index) {
      return children_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        foreach (global::CarbonCore.Protocol.Resource.StageProperty element in PropertiesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::CarbonCore.Protocol.Resource.StageModel element in ChildrenList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _stageModelFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasReferenceId) {
        output.WriteInt32(2, field_names[4], ReferenceId);
      }
      if (hasLayerFlags) {
        output.WriteInt32(10, field_names[2], LayerFlags);
      }
      if (properties_.Count > 0) {
        output.WriteMessageArray(11, field_names[3], properties_);
      }
      if (translation_.Count > 0) {
        output.WritePackedFloatArray(20, field_names[7], translationMemoizedSerializedSize, translation_);
      }
      if (rotation_.Count > 0) {
        output.WritePackedFloatArray(21, field_names[5], rotationMemoizedSerializedSize, rotation_);
      }
      if (scale_.Count > 0) {
        output.WritePackedFloatArray(22, field_names[6], scaleMemoizedSerializedSize, scale_);
      }
      if (children_.Count > 0) {
        output.WriteMessageArray(30, field_names[0], children_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Id);
        }
        if (hasReferenceId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ReferenceId);
        }
        if (hasLayerFlags) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, LayerFlags);
        }
        foreach (global::CarbonCore.Protocol.Resource.StageProperty element in PropertiesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        {
          int dataSize = 0;
          dataSize = 4 * translation_.Count;
          size += dataSize;
          if (translation_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          translationMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * rotation_.Count;
          size += dataSize;
          if (rotation_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          rotationMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * scale_.Count;
          size += dataSize;
          if (scale_.Count != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          scaleMemoizedSerializedSize = dataSize;
        }
        foreach (global::CarbonCore.Protocol.Resource.StageModel element in ChildrenList) {
          size += pb::CodedOutputStream.ComputeMessageSize(30, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StageModel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageModel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageModel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageModel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageModel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageModel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StageModel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StageModel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StageModel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageModel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StageModel MakeReadOnly() {
      properties_.MakeReadOnly();
      translation_.MakeReadOnly();
      rotation_.MakeReadOnly();
      scale_.MakeReadOnly();
      children_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StageModel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StageModel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StageModel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StageModel result;
      
      private StageModel PrepareBuilder() {
        if (resultIsReadOnly) {
          StageModel original = result;
          result = new StageModel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StageModel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.StageModel.Descriptor; }
      }
      
      public override StageModel DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.StageModel.DefaultInstance; }
      }
      
      public override StageModel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StageModel) {
          return MergeFrom((StageModel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StageModel other) {
        if (other == global::CarbonCore.Protocol.Resource.StageModel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasReferenceId) {
          ReferenceId = other.ReferenceId;
        }
        if (other.HasLayerFlags) {
          LayerFlags = other.LayerFlags;
        }
        if (other.properties_.Count != 0) {
          result.properties_.Add(other.properties_);
        }
        if (other.translation_.Count != 0) {
          result.translation_.Add(other.translation_);
        }
        if (other.rotation_.Count != 0) {
          result.rotation_.Add(other.rotation_);
        }
        if (other.scale_.Count != 0) {
          result.scale_.Add(other.scale_);
        }
        if (other.children_.Count != 0) {
          result.children_.Add(other.children_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stageModelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stageModelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasReferenceId = input.ReadInt32(ref result.referenceId_);
              break;
            }
            case 80: {
              result.hasLayerFlags = input.ReadInt32(ref result.layerFlags_);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.properties_, global::CarbonCore.Protocol.Resource.StageProperty.DefaultInstance, extensionRegistry);
              break;
            }
            case 162:
            case 165: {
              input.ReadFloatArray(tag, field_name, result.translation_);
              break;
            }
            case 170:
            case 173: {
              input.ReadFloatArray(tag, field_name, result.rotation_);
              break;
            }
            case 178:
            case 181: {
              input.ReadFloatArray(tag, field_name, result.scale_);
              break;
            }
            case 242: {
              input.ReadMessageArray(tag, field_name, result.children_, global::CarbonCore.Protocol.Resource.StageModel.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasReferenceId {
        get { return result.hasReferenceId; }
      }
      public int ReferenceId {
        get { return result.ReferenceId; }
        set { SetReferenceId(value); }
      }
      public Builder SetReferenceId(int value) {
        PrepareBuilder();
        result.hasReferenceId = true;
        result.referenceId_ = value;
        return this;
      }
      public Builder ClearReferenceId() {
        PrepareBuilder();
        result.hasReferenceId = false;
        result.referenceId_ = 0;
        return this;
      }
      
      public bool HasLayerFlags {
        get { return result.hasLayerFlags; }
      }
      public int LayerFlags {
        get { return result.LayerFlags; }
        set { SetLayerFlags(value); }
      }
      public Builder SetLayerFlags(int value) {
        PrepareBuilder();
        result.hasLayerFlags = true;
        result.layerFlags_ = value;
        return this;
      }
      public Builder ClearLayerFlags() {
        PrepareBuilder();
        result.hasLayerFlags = false;
        result.layerFlags_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.StageProperty> PropertiesList {
        get { return PrepareBuilder().properties_; }
      }
      public int PropertiesCount {
        get { return result.PropertiesCount; }
      }
      public global::CarbonCore.Protocol.Resource.StageProperty GetProperties(int index) {
        return result.GetProperties(index);
      }
      public Builder SetProperties(int index, global::CarbonCore.Protocol.Resource.StageProperty value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.properties_[index] = value;
        return this;
      }
      public Builder SetProperties(int index, global::CarbonCore.Protocol.Resource.StageProperty.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.properties_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddProperties(global::CarbonCore.Protocol.Resource.StageProperty value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.properties_.Add(value);
        return this;
      }
      public Builder AddProperties(global::CarbonCore.Protocol.Resource.StageProperty.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.properties_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeProperties(scg::IEnumerable<global::CarbonCore.Protocol.Resource.StageProperty> values) {
        PrepareBuilder();
        result.properties_.Add(values);
        return this;
      }
      public Builder ClearProperties() {
        PrepareBuilder();
        result.properties_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> TranslationList {
        get { return PrepareBuilder().translation_; }
      }
      public int TranslationCount {
        get { return result.TranslationCount; }
      }
      public float GetTranslation(int index) {
        return result.GetTranslation(index);
      }
      public Builder SetTranslation(int index, float value) {
        PrepareBuilder();
        result.translation_[index] = value;
        return this;
      }
      public Builder AddTranslation(float value) {
        PrepareBuilder();
        result.translation_.Add(value);
        return this;
      }
      public Builder AddRangeTranslation(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.translation_.Add(values);
        return this;
      }
      public Builder ClearTranslation() {
        PrepareBuilder();
        result.translation_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> RotationList {
        get { return PrepareBuilder().rotation_; }
      }
      public int RotationCount {
        get { return result.RotationCount; }
      }
      public float GetRotation(int index) {
        return result.GetRotation(index);
      }
      public Builder SetRotation(int index, float value) {
        PrepareBuilder();
        result.rotation_[index] = value;
        return this;
      }
      public Builder AddRotation(float value) {
        PrepareBuilder();
        result.rotation_.Add(value);
        return this;
      }
      public Builder AddRangeRotation(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.rotation_.Add(values);
        return this;
      }
      public Builder ClearRotation() {
        PrepareBuilder();
        result.rotation_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> ScaleList {
        get { return PrepareBuilder().scale_; }
      }
      public int ScaleCount {
        get { return result.ScaleCount; }
      }
      public float GetScale(int index) {
        return result.GetScale(index);
      }
      public Builder SetScale(int index, float value) {
        PrepareBuilder();
        result.scale_[index] = value;
        return this;
      }
      public Builder AddScale(float value) {
        PrepareBuilder();
        result.scale_.Add(value);
        return this;
      }
      public Builder AddRangeScale(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.scale_.Add(values);
        return this;
      }
      public Builder ClearScale() {
        PrepareBuilder();
        result.scale_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.StageModel> ChildrenList {
        get { return PrepareBuilder().children_; }
      }
      public int ChildrenCount {
        get { return result.ChildrenCount; }
      }
      public global::CarbonCore.Protocol.Resource.StageModel GetChildren(int index) {
        return result.GetChildren(index);
      }
      public Builder SetChildren(int index, global::CarbonCore.Protocol.Resource.StageModel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.children_[index] = value;
        return this;
      }
      public Builder SetChildren(int index, global::CarbonCore.Protocol.Resource.StageModel.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.children_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChildren(global::CarbonCore.Protocol.Resource.StageModel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.children_.Add(value);
        return this;
      }
      public Builder AddChildren(global::CarbonCore.Protocol.Resource.StageModel.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.children_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChildren(scg::IEnumerable<global::CarbonCore.Protocol.Resource.StageModel> values) {
        PrepareBuilder();
        result.children_.Add(values);
        return this;
      }
      public Builder ClearChildren() {
        PrepareBuilder();
        result.children_.Clear();
        return this;
      }
    }
    static StageModel() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Stage : pb::GeneratedMessage<Stage, Stage.Builder> {
    private Stage() { }
    private static readonly Stage defaultInstance = new Stage().MakeReadOnly();
    private static readonly string[] _stageFieldNames = new string[] { "Cameras", "Lights", "Models", "References", "Version" };
    private static readonly uint[] _stageFieldTags = new uint[] { 82, 90, 98, 74, 8 };
    public static Stage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Stage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Stage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_Stage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Stage, Stage.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_Stage__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private int version_ = 1;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int ReferencesFieldNumber = 9;
    private pbc::PopsicleList<string> references_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ReferencesList {
      get { return pbc::Lists.AsReadOnly(references_); }
    }
    public int ReferencesCount {
      get { return references_.Count; }
    }
    public string GetReferences(int index) {
      return references_[index];
    }
    
    public const int CamerasFieldNumber = 10;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageCamera> cameras_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageCamera>();
    public scg::IList<global::CarbonCore.Protocol.Resource.StageCamera> CamerasList {
      get { return cameras_; }
    }
    public int CamerasCount {
      get { return cameras_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.StageCamera GetCameras(int index) {
      return cameras_[index];
    }
    
    public const int LightsFieldNumber = 11;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageLight> lights_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageLight>();
    public scg::IList<global::CarbonCore.Protocol.Resource.StageLight> LightsList {
      get { return lights_; }
    }
    public int LightsCount {
      get { return lights_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.StageLight GetLights(int index) {
      return lights_[index];
    }
    
    public const int ModelsFieldNumber = 12;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageModel> models_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.StageModel>();
    public scg::IList<global::CarbonCore.Protocol.Resource.StageModel> ModelsList {
      get { return models_; }
    }
    public int ModelsCount {
      get { return models_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.StageModel GetModels(int index) {
      return models_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        foreach (global::CarbonCore.Protocol.Resource.StageCamera element in CamerasList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::CarbonCore.Protocol.Resource.StageLight element in LightsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::CarbonCore.Protocol.Resource.StageModel element in ModelsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _stageFieldNames;
      if (hasVersion) {
        output.WriteInt32(1, field_names[4], Version);
      }
      if (references_.Count > 0) {
        output.WriteStringArray(9, field_names[3], references_);
      }
      if (cameras_.Count > 0) {
        output.WriteMessageArray(10, field_names[0], cameras_);
      }
      if (lights_.Count > 0) {
        output.WriteMessageArray(11, field_names[1], lights_);
      }
      if (models_.Count > 0) {
        output.WriteMessageArray(12, field_names[2], models_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
        }
        {
          int dataSize = 0;
          foreach (string element in ReferencesList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * references_.Count;
        }
        foreach (global::CarbonCore.Protocol.Resource.StageCamera element in CamerasList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        foreach (global::CarbonCore.Protocol.Resource.StageLight element in LightsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        foreach (global::CarbonCore.Protocol.Resource.StageModel element in ModelsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Stage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Stage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Stage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Stage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Stage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Stage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Stage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Stage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Stage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Stage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Stage MakeReadOnly() {
      references_.MakeReadOnly();
      cameras_.MakeReadOnly();
      lights_.MakeReadOnly();
      models_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Stage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Stage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Stage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Stage result;
      
      private Stage PrepareBuilder() {
        if (resultIsReadOnly) {
          Stage original = result;
          result = new Stage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Stage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.Stage.Descriptor; }
      }
      
      public override Stage DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.Stage.DefaultInstance; }
      }
      
      public override Stage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Stage) {
          return MergeFrom((Stage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Stage other) {
        if (other == global::CarbonCore.Protocol.Resource.Stage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.references_.Count != 0) {
          result.references_.Add(other.references_);
        }
        if (other.cameras_.Count != 0) {
          result.cameras_.Add(other.cameras_);
        }
        if (other.lights_.Count != 0) {
          result.lights_.Add(other.lights_);
        }
        if (other.models_.Count != 0) {
          result.models_.Add(other.models_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 74: {
              input.ReadStringArray(tag, field_name, result.references_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.cameras_, global::CarbonCore.Protocol.Resource.StageCamera.DefaultInstance, extensionRegistry);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.lights_, global::CarbonCore.Protocol.Resource.StageLight.DefaultInstance, extensionRegistry);
              break;
            }
            case 98: {
              input.ReadMessageArray(tag, field_name, result.models_, global::CarbonCore.Protocol.Resource.StageModel.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 1;
        return this;
      }
      
      public pbc::IPopsicleList<string> ReferencesList {
        get { return PrepareBuilder().references_; }
      }
      public int ReferencesCount {
        get { return result.ReferencesCount; }
      }
      public string GetReferences(int index) {
        return result.GetReferences(index);
      }
      public Builder SetReferences(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.references_[index] = value;
        return this;
      }
      public Builder AddReferences(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.references_.Add(value);
        return this;
      }
      public Builder AddRangeReferences(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.references_.Add(values);
        return this;
      }
      public Builder ClearReferences() {
        PrepareBuilder();
        result.references_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.StageCamera> CamerasList {
        get { return PrepareBuilder().cameras_; }
      }
      public int CamerasCount {
        get { return result.CamerasCount; }
      }
      public global::CarbonCore.Protocol.Resource.StageCamera GetCameras(int index) {
        return result.GetCameras(index);
      }
      public Builder SetCameras(int index, global::CarbonCore.Protocol.Resource.StageCamera value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cameras_[index] = value;
        return this;
      }
      public Builder SetCameras(int index, global::CarbonCore.Protocol.Resource.StageCamera.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cameras_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCameras(global::CarbonCore.Protocol.Resource.StageCamera value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cameras_.Add(value);
        return this;
      }
      public Builder AddCameras(global::CarbonCore.Protocol.Resource.StageCamera.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cameras_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCameras(scg::IEnumerable<global::CarbonCore.Protocol.Resource.StageCamera> values) {
        PrepareBuilder();
        result.cameras_.Add(values);
        return this;
      }
      public Builder ClearCameras() {
        PrepareBuilder();
        result.cameras_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.StageLight> LightsList {
        get { return PrepareBuilder().lights_; }
      }
      public int LightsCount {
        get { return result.LightsCount; }
      }
      public global::CarbonCore.Protocol.Resource.StageLight GetLights(int index) {
        return result.GetLights(index);
      }
      public Builder SetLights(int index, global::CarbonCore.Protocol.Resource.StageLight value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.lights_[index] = value;
        return this;
      }
      public Builder SetLights(int index, global::CarbonCore.Protocol.Resource.StageLight.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.lights_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLights(global::CarbonCore.Protocol.Resource.StageLight value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.lights_.Add(value);
        return this;
      }
      public Builder AddLights(global::CarbonCore.Protocol.Resource.StageLight.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.lights_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLights(scg::IEnumerable<global::CarbonCore.Protocol.Resource.StageLight> values) {
        PrepareBuilder();
        result.lights_.Add(values);
        return this;
      }
      public Builder ClearLights() {
        PrepareBuilder();
        result.lights_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.StageModel> ModelsList {
        get { return PrepareBuilder().models_; }
      }
      public int ModelsCount {
        get { return result.ModelsCount; }
      }
      public global::CarbonCore.Protocol.Resource.StageModel GetModels(int index) {
        return result.GetModels(index);
      }
      public Builder SetModels(int index, global::CarbonCore.Protocol.Resource.StageModel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.models_[index] = value;
        return this;
      }
      public Builder SetModels(int index, global::CarbonCore.Protocol.Resource.StageModel.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.models_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddModels(global::CarbonCore.Protocol.Resource.StageModel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.models_.Add(value);
        return this;
      }
      public Builder AddModels(global::CarbonCore.Protocol.Resource.StageModel.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.models_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeModels(scg::IEnumerable<global::CarbonCore.Protocol.Resource.StageModel> values) {
        PrepareBuilder();
        result.models_.Add(values);
        return this;
      }
      public Builder ClearModels() {
        PrepareBuilder();
        result.models_.Clear();
        return this;
      }
    }
    static Stage() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Script : pb::GeneratedMessage<Script, Script.Builder> {
    private Script() { }
    private static readonly Script defaultInstance = new Script().MakeReadOnly();
    private static readonly string[] _scriptFieldNames = new string[] { "ScriptData", "Version" };
    private static readonly uint[] _scriptFieldTags = new uint[] { 18, 8 };
    public static Script DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Script DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Script ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_Script__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Script, Script.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_Script__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private int version_ = 1;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int ScriptDataFieldNumber = 2;
    private bool hasScriptData;
    private pb::ByteString scriptData_ = pb::ByteString.Empty;
    public bool HasScriptData {
      get { return hasScriptData; }
    }
    public pb::ByteString ScriptData {
      get { return scriptData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasScriptData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _scriptFieldNames;
      if (hasVersion) {
        output.WriteInt32(1, field_names[1], Version);
      }
      if (hasScriptData) {
        output.WriteBytes(2, field_names[0], ScriptData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
        }
        if (hasScriptData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, ScriptData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Script ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Script ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Script ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Script ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Script ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Script ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Script ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Script ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Script ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Script ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Script MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Script prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Script, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Script cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Script result;
      
      private Script PrepareBuilder() {
        if (resultIsReadOnly) {
          Script original = result;
          result = new Script();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Script MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.Script.Descriptor; }
      }
      
      public override Script DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.Script.DefaultInstance; }
      }
      
      public override Script BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Script) {
          return MergeFrom((Script) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Script other) {
        if (other == global::CarbonCore.Protocol.Resource.Script.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasScriptData) {
          ScriptData = other.ScriptData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_scriptFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _scriptFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 18: {
              result.hasScriptData = input.ReadBytes(ref result.scriptData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 1;
        return this;
      }
      
      public bool HasScriptData {
        get { return result.hasScriptData; }
      }
      public pb::ByteString ScriptData {
        get { return result.ScriptData; }
        set { SetScriptData(value); }
      }
      public Builder SetScriptData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasScriptData = true;
        result.scriptData_ = value;
        return this;
      }
      public Builder ClearScriptData() {
        PrepareBuilder();
        result.hasScriptData = false;
        result.scriptData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Script() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CsamlAttribute : pb::GeneratedMessage<CsamlAttribute, CsamlAttribute.Builder> {
    private CsamlAttribute() { }
    private static readonly CsamlAttribute defaultInstance = new CsamlAttribute().MakeReadOnly();
    private static readonly string[] _csamlAttributeFieldNames = new string[] { "Type", "ValueFloat", "ValueInt", "ValueString", "ValueType" };
    private static readonly uint[] _csamlAttributeFieldTags = new uint[] { 8, 45, 32, 26, 16 };
    public static CsamlAttribute DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CsamlAttribute DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CsamlAttribute ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_CsamlAttribute__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CsamlAttribute, CsamlAttribute.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_CsamlAttribute__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CsamlAttributeType {
        Unknown = 0,
        ControlName = 1,
        Width = 2,
        Height = 3,
        LayoutMode = 4,
        Mode = 5,
        Text = 6,
        Source = 7,
        TypeAttribute = 8,
        Left = 9,
        Top = 10,
        Right = 11,
        Bottom = 12,
        HorizontalAlignment = 13,
        VerticalAlignment = 14,
      }
      
      public enum CsamlAttributeValueType {
        String = 0,
        Int = 1,
        Float = 2,
      }
      
      public enum CsamlLayoutMode {
        LayoutAbsolute = 0,
        LayoutRelative = 1,
      }
      
      public enum CsamlControlSizingMode {
        SizeNormal = 0,
        SizeStretch = 1,
      }
      
      public enum CsamlHorizontalAlignmentEnum {
        AlignLeft = 0,
        AlignCenterH = 1,
        AlignRight = 2,
      }
      
      public enum CsamlVerticalAlignmentEnum {
        AlignTop = 0,
        AlignCenterV = 1,
        AlignBottom = 2,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeType type_ = global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeType.Unknown;
    public bool HasType {
      get { return hasType; }
    }
    public global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeType Type {
      get { return type_; }
    }
    
    public const int ValueTypeFieldNumber = 2;
    private bool hasValueType;
    private global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeValueType valueType_ = global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeValueType.String;
    public bool HasValueType {
      get { return hasValueType; }
    }
    public global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeValueType ValueType {
      get { return valueType_; }
    }
    
    public const int ValueStringFieldNumber = 3;
    private bool hasValueString;
    private string valueString_ = "";
    public bool HasValueString {
      get { return hasValueString; }
    }
    public string ValueString {
      get { return valueString_; }
    }
    
    public const int ValueIntFieldNumber = 4;
    private bool hasValueInt;
    private int valueInt_;
    public bool HasValueInt {
      get { return hasValueInt; }
    }
    public int ValueInt {
      get { return valueInt_; }
    }
    
    public const int ValueFloatFieldNumber = 5;
    private bool hasValueFloat;
    private float valueFloat_;
    public bool HasValueFloat {
      get { return hasValueFloat; }
    }
    public float ValueFloat {
      get { return valueFloat_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasValueType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _csamlAttributeFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[0], (int) Type, Type);
      }
      if (hasValueType) {
        output.WriteEnum(2, field_names[4], (int) ValueType, ValueType);
      }
      if (hasValueString) {
        output.WriteString(3, field_names[3], ValueString);
      }
      if (hasValueInt) {
        output.WriteInt32(4, field_names[2], ValueInt);
      }
      if (hasValueFloat) {
        output.WriteFloat(5, field_names[1], ValueFloat);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasValueType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) ValueType);
        }
        if (hasValueString) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ValueString);
        }
        if (hasValueInt) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ValueInt);
        }
        if (hasValueFloat) {
          size += pb::CodedOutputStream.ComputeFloatSize(5, ValueFloat);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CsamlAttribute ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CsamlAttribute ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CsamlAttribute ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CsamlAttribute ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CsamlAttribute ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CsamlAttribute ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CsamlAttribute ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CsamlAttribute ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CsamlAttribute ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CsamlAttribute ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CsamlAttribute MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CsamlAttribute prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CsamlAttribute, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CsamlAttribute cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CsamlAttribute result;
      
      private CsamlAttribute PrepareBuilder() {
        if (resultIsReadOnly) {
          CsamlAttribute original = result;
          result = new CsamlAttribute();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CsamlAttribute MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.CsamlAttribute.Descriptor; }
      }
      
      public override CsamlAttribute DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.CsamlAttribute.DefaultInstance; }
      }
      
      public override CsamlAttribute BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CsamlAttribute) {
          return MergeFrom((CsamlAttribute) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CsamlAttribute other) {
        if (other == global::CarbonCore.Protocol.Resource.CsamlAttribute.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasValueType) {
          ValueType = other.ValueType;
        }
        if (other.HasValueString) {
          ValueString = other.ValueString;
        }
        if (other.HasValueInt) {
          ValueInt = other.ValueInt;
        }
        if (other.HasValueFloat) {
          ValueFloat = other.ValueFloat;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_csamlAttributeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _csamlAttributeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.valueType_, out unknown)) {
                result.hasValueType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasValueString = input.ReadString(ref result.valueString_);
              break;
            }
            case 32: {
              result.hasValueInt = input.ReadInt32(ref result.valueInt_);
              break;
            }
            case 45: {
              result.hasValueFloat = input.ReadFloat(ref result.valueFloat_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeType.Unknown;
        return this;
      }
      
      public bool HasValueType {
       get { return result.hasValueType; }
      }
      public global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeValueType ValueType {
        get { return result.ValueType; }
        set { SetValueType(value); }
      }
      public Builder SetValueType(global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeValueType value) {
        PrepareBuilder();
        result.hasValueType = true;
        result.valueType_ = value;
        return this;
      }
      public Builder ClearValueType() {
        PrepareBuilder();
        result.hasValueType = false;
        result.valueType_ = global::CarbonCore.Protocol.Resource.CsamlAttribute.Types.CsamlAttributeValueType.String;
        return this;
      }
      
      public bool HasValueString {
        get { return result.hasValueString; }
      }
      public string ValueString {
        get { return result.ValueString; }
        set { SetValueString(value); }
      }
      public Builder SetValueString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValueString = true;
        result.valueString_ = value;
        return this;
      }
      public Builder ClearValueString() {
        PrepareBuilder();
        result.hasValueString = false;
        result.valueString_ = "";
        return this;
      }
      
      public bool HasValueInt {
        get { return result.hasValueInt; }
      }
      public int ValueInt {
        get { return result.ValueInt; }
        set { SetValueInt(value); }
      }
      public Builder SetValueInt(int value) {
        PrepareBuilder();
        result.hasValueInt = true;
        result.valueInt_ = value;
        return this;
      }
      public Builder ClearValueInt() {
        PrepareBuilder();
        result.hasValueInt = false;
        result.valueInt_ = 0;
        return this;
      }
      
      public bool HasValueFloat {
        get { return result.hasValueFloat; }
      }
      public float ValueFloat {
        get { return result.ValueFloat; }
        set { SetValueFloat(value); }
      }
      public Builder SetValueFloat(float value) {
        PrepareBuilder();
        result.hasValueFloat = true;
        result.valueFloat_ = value;
        return this;
      }
      public Builder ClearValueFloat() {
        PrepareBuilder();
        result.hasValueFloat = false;
        result.valueFloat_ = 0F;
        return this;
      }
    }
    static CsamlAttribute() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CsamlNode : pb::GeneratedMessage<CsamlNode, CsamlNode.Builder> {
    private CsamlNode() { }
    private static readonly CsamlNode defaultInstance = new CsamlNode().MakeReadOnly();
    private static readonly string[] _csamlNodeFieldNames = new string[] { "Attributes", "Children", "Type" };
    private static readonly uint[] _csamlNodeFieldTags = new uint[] { 18, 26, 8 };
    public static CsamlNode DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CsamlNode DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CsamlNode ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_CsamlNode__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CsamlNode, CsamlNode.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_CsamlNode__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CsamlNodeType {
        Unknown = 0,
        Frame = 1,
        Image = 2,
        SolidText = 3,
        DynamicText = 4,
        Console = 5,
        Page = 6,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::CarbonCore.Protocol.Resource.CsamlNode.Types.CsamlNodeType type_ = global::CarbonCore.Protocol.Resource.CsamlNode.Types.CsamlNodeType.Unknown;
    public bool HasType {
      get { return hasType; }
    }
    public global::CarbonCore.Protocol.Resource.CsamlNode.Types.CsamlNodeType Type {
      get { return type_; }
    }
    
    public const int AttributesFieldNumber = 2;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.CsamlAttribute> attributes_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.CsamlAttribute>();
    public scg::IList<global::CarbonCore.Protocol.Resource.CsamlAttribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.CsamlAttribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public const int ChildrenFieldNumber = 3;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.CsamlNode> children_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.CsamlNode>();
    public scg::IList<global::CarbonCore.Protocol.Resource.CsamlNode> ChildrenList {
      get { return children_; }
    }
    public int ChildrenCount {
      get { return children_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.CsamlNode GetChildren(int index) {
      return children_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        foreach (global::CarbonCore.Protocol.Resource.CsamlAttribute element in AttributesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::CarbonCore.Protocol.Resource.CsamlNode element in ChildrenList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _csamlNodeFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[2], (int) Type, Type);
      }
      if (attributes_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], attributes_);
      }
      if (children_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], children_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        foreach (global::CarbonCore.Protocol.Resource.CsamlAttribute element in AttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::CarbonCore.Protocol.Resource.CsamlNode element in ChildrenList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CsamlNode ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CsamlNode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CsamlNode ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CsamlNode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CsamlNode ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CsamlNode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CsamlNode ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CsamlNode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CsamlNode ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CsamlNode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CsamlNode MakeReadOnly() {
      attributes_.MakeReadOnly();
      children_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CsamlNode prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CsamlNode, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CsamlNode cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CsamlNode result;
      
      private CsamlNode PrepareBuilder() {
        if (resultIsReadOnly) {
          CsamlNode original = result;
          result = new CsamlNode();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CsamlNode MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.CsamlNode.Descriptor; }
      }
      
      public override CsamlNode DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.CsamlNode.DefaultInstance; }
      }
      
      public override CsamlNode BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CsamlNode) {
          return MergeFrom((CsamlNode) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CsamlNode other) {
        if (other == global::CarbonCore.Protocol.Resource.CsamlNode.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.attributes_.Count != 0) {
          result.attributes_.Add(other.attributes_);
        }
        if (other.children_.Count != 0) {
          result.children_.Add(other.children_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_csamlNodeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _csamlNodeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.attributes_, global::CarbonCore.Protocol.Resource.CsamlAttribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.children_, global::CarbonCore.Protocol.Resource.CsamlNode.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::CarbonCore.Protocol.Resource.CsamlNode.Types.CsamlNodeType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::CarbonCore.Protocol.Resource.CsamlNode.Types.CsamlNodeType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::CarbonCore.Protocol.Resource.CsamlNode.Types.CsamlNodeType.Unknown;
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.CsamlAttribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::CarbonCore.Protocol.Resource.CsamlAttribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::CarbonCore.Protocol.Resource.CsamlAttribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::CarbonCore.Protocol.Resource.CsamlAttribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::CarbonCore.Protocol.Resource.CsamlAttribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::CarbonCore.Protocol.Resource.CsamlAttribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::CarbonCore.Protocol.Resource.CsamlAttribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.CsamlNode> ChildrenList {
        get { return PrepareBuilder().children_; }
      }
      public int ChildrenCount {
        get { return result.ChildrenCount; }
      }
      public global::CarbonCore.Protocol.Resource.CsamlNode GetChildren(int index) {
        return result.GetChildren(index);
      }
      public Builder SetChildren(int index, global::CarbonCore.Protocol.Resource.CsamlNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.children_[index] = value;
        return this;
      }
      public Builder SetChildren(int index, global::CarbonCore.Protocol.Resource.CsamlNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.children_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChildren(global::CarbonCore.Protocol.Resource.CsamlNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.children_.Add(value);
        return this;
      }
      public Builder AddChildren(global::CarbonCore.Protocol.Resource.CsamlNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.children_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChildren(scg::IEnumerable<global::CarbonCore.Protocol.Resource.CsamlNode> values) {
        PrepareBuilder();
        result.children_.Add(values);
        return this;
      }
      public Builder ClearChildren() {
        PrepareBuilder();
        result.children_.Clear();
        return this;
      }
    }
    static CsamlNode() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Csaml : pb::GeneratedMessage<Csaml, Csaml.Builder> {
    private Csaml() { }
    private static readonly Csaml defaultInstance = new Csaml().MakeReadOnly();
    private static readonly string[] _csamlFieldNames = new string[] { "Nodes" };
    private static readonly uint[] _csamlFieldTags = new uint[] { 10 };
    public static Csaml DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Csaml DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Csaml ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_Csaml__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Csaml, Csaml.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_Csaml__FieldAccessorTable; }
    }
    
    public const int NodesFieldNumber = 1;
    private pbc::PopsicleList<global::CarbonCore.Protocol.Resource.CsamlNode> nodes_ = new pbc::PopsicleList<global::CarbonCore.Protocol.Resource.CsamlNode>();
    public scg::IList<global::CarbonCore.Protocol.Resource.CsamlNode> NodesList {
      get { return nodes_; }
    }
    public int NodesCount {
      get { return nodes_.Count; }
    }
    public global::CarbonCore.Protocol.Resource.CsamlNode GetNodes(int index) {
      return nodes_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::CarbonCore.Protocol.Resource.CsamlNode element in NodesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _csamlFieldNames;
      if (nodes_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], nodes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::CarbonCore.Protocol.Resource.CsamlNode element in NodesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Csaml ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Csaml ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Csaml ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Csaml ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Csaml ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Csaml ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Csaml ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Csaml ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Csaml ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Csaml ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Csaml MakeReadOnly() {
      nodes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Csaml prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Csaml, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Csaml cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Csaml result;
      
      private Csaml PrepareBuilder() {
        if (resultIsReadOnly) {
          Csaml original = result;
          result = new Csaml();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Csaml MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.Csaml.Descriptor; }
      }
      
      public override Csaml DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.Csaml.DefaultInstance; }
      }
      
      public override Csaml BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Csaml) {
          return MergeFrom((Csaml) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Csaml other) {
        if (other == global::CarbonCore.Protocol.Resource.Csaml.DefaultInstance) return this;
        PrepareBuilder();
        if (other.nodes_.Count != 0) {
          result.nodes_.Add(other.nodes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_csamlFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _csamlFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.nodes_, global::CarbonCore.Protocol.Resource.CsamlNode.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::CarbonCore.Protocol.Resource.CsamlNode> NodesList {
        get { return PrepareBuilder().nodes_; }
      }
      public int NodesCount {
        get { return result.NodesCount; }
      }
      public global::CarbonCore.Protocol.Resource.CsamlNode GetNodes(int index) {
        return result.GetNodes(index);
      }
      public Builder SetNodes(int index, global::CarbonCore.Protocol.Resource.CsamlNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nodes_[index] = value;
        return this;
      }
      public Builder SetNodes(int index, global::CarbonCore.Protocol.Resource.CsamlNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.nodes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNodes(global::CarbonCore.Protocol.Resource.CsamlNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nodes_.Add(value);
        return this;
      }
      public Builder AddNodes(global::CarbonCore.Protocol.Resource.CsamlNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.nodes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNodes(scg::IEnumerable<global::CarbonCore.Protocol.Resource.CsamlNode> values) {
        PrepareBuilder();
        result.nodes_.Add(values);
        return this;
      }
      public Builder ClearNodes() {
        PrepareBuilder();
        result.nodes_.Clear();
        return this;
      }
    }
    static Csaml() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserInterface : pb::GeneratedMessage<UserInterface, UserInterface.Builder> {
    private UserInterface() { }
    private static readonly UserInterface defaultInstance = new UserInterface().MakeReadOnly();
    private static readonly string[] _userInterfaceFieldNames = new string[] { "Csaml", "Script", "Version" };
    private static readonly uint[] _userInterfaceFieldTags = new uint[] { 18, 26, 8 };
    public static UserInterface DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UserInterface DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UserInterface ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_UserInterface__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UserInterface, UserInterface.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Resource.ResourceProtocol.internal__static_resource_UserInterface__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private int version_ = 1;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int CsamlFieldNumber = 2;
    private bool hasCsaml;
    private global::CarbonCore.Protocol.Resource.Csaml csaml_;
    public bool HasCsaml {
      get { return hasCsaml; }
    }
    public global::CarbonCore.Protocol.Resource.Csaml Csaml {
      get { return csaml_ ?? global::CarbonCore.Protocol.Resource.Csaml.DefaultInstance; }
    }
    
    public const int ScriptFieldNumber = 3;
    private bool hasScript;
    private global::CarbonCore.Protocol.Resource.Script script_;
    public bool HasScript {
      get { return hasScript; }
    }
    public global::CarbonCore.Protocol.Resource.Script Script {
      get { return script_ ?? global::CarbonCore.Protocol.Resource.Script.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasCsaml) return false;
        if (!hasScript) return false;
        if (!Csaml.IsInitialized) return false;
        if (!Script.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _userInterfaceFieldNames;
      if (hasVersion) {
        output.WriteInt32(1, field_names[2], Version);
      }
      if (hasCsaml) {
        output.WriteMessage(2, field_names[0], Csaml);
      }
      if (hasScript) {
        output.WriteMessage(3, field_names[1], Script);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
        }
        if (hasCsaml) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Csaml);
        }
        if (hasScript) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Script);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UserInterface ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserInterface ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserInterface ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserInterface ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserInterface ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserInterface ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UserInterface ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UserInterface ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UserInterface ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserInterface ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UserInterface MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UserInterface prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UserInterface, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UserInterface cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UserInterface result;
      
      private UserInterface PrepareBuilder() {
        if (resultIsReadOnly) {
          UserInterface original = result;
          result = new UserInterface();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UserInterface MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Resource.UserInterface.Descriptor; }
      }
      
      public override UserInterface DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Resource.UserInterface.DefaultInstance; }
      }
      
      public override UserInterface BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UserInterface) {
          return MergeFrom((UserInterface) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UserInterface other) {
        if (other == global::CarbonCore.Protocol.Resource.UserInterface.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasCsaml) {
          MergeCsaml(other.Csaml);
        }
        if (other.HasScript) {
          MergeScript(other.Script);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userInterfaceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userInterfaceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 18: {
              global::CarbonCore.Protocol.Resource.Csaml.Builder subBuilder = global::CarbonCore.Protocol.Resource.Csaml.CreateBuilder();
              if (result.hasCsaml) {
                subBuilder.MergeFrom(Csaml);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Csaml = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::CarbonCore.Protocol.Resource.Script.Builder subBuilder = global::CarbonCore.Protocol.Resource.Script.CreateBuilder();
              if (result.hasScript) {
                subBuilder.MergeFrom(Script);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Script = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 1;
        return this;
      }
      
      public bool HasCsaml {
       get { return result.hasCsaml; }
      }
      public global::CarbonCore.Protocol.Resource.Csaml Csaml {
        get { return result.Csaml; }
        set { SetCsaml(value); }
      }
      public Builder SetCsaml(global::CarbonCore.Protocol.Resource.Csaml value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCsaml = true;
        result.csaml_ = value;
        return this;
      }
      public Builder SetCsaml(global::CarbonCore.Protocol.Resource.Csaml.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCsaml = true;
        result.csaml_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCsaml(global::CarbonCore.Protocol.Resource.Csaml value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCsaml &&
            result.csaml_ != global::CarbonCore.Protocol.Resource.Csaml.DefaultInstance) {
            result.csaml_ = global::CarbonCore.Protocol.Resource.Csaml.CreateBuilder(result.csaml_).MergeFrom(value).BuildPartial();
        } else {
          result.csaml_ = value;
        }
        result.hasCsaml = true;
        return this;
      }
      public Builder ClearCsaml() {
        PrepareBuilder();
        result.hasCsaml = false;
        result.csaml_ = null;
        return this;
      }
      
      public bool HasScript {
       get { return result.hasScript; }
      }
      public global::CarbonCore.Protocol.Resource.Script Script {
        get { return result.Script; }
        set { SetScript(value); }
      }
      public Builder SetScript(global::CarbonCore.Protocol.Resource.Script value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasScript = true;
        result.script_ = value;
        return this;
      }
      public Builder SetScript(global::CarbonCore.Protocol.Resource.Script.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasScript = true;
        result.script_ = builderForValue.Build();
        return this;
      }
      public Builder MergeScript(global::CarbonCore.Protocol.Resource.Script value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasScript &&
            result.script_ != global::CarbonCore.Protocol.Resource.Script.DefaultInstance) {
            result.script_ = global::CarbonCore.Protocol.Resource.Script.CreateBuilder(result.script_).MergeFrom(value).BuildPartial();
        } else {
          result.script_ = value;
        }
        result.hasScript = true;
        return this;
      }
      public Builder ClearScript() {
        PrepareBuilder();
        result.hasScript = false;
        result.script_ = null;
        return this;
      }
    }
    static UserInterface() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Resource.ResourceProtocol.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
