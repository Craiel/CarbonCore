// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CarbonCore.Protocol.Network {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class NetworkProtocol {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_network_Header__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Network.Header, global::CarbonCore.Protocol.Network.Header.Builder> internal__static_network_Header__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_network_Client__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Network.Client, global::CarbonCore.Protocol.Network.Client.Builder> internal__static_network_Client__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_network_Alive__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Network.Alive, global::CarbonCore.Protocol.Network.Alive.Builder> internal__static_network_Alive__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_network_Connect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Network.Connect, global::CarbonCore.Protocol.Network.Connect.Builder> internal__static_network_Connect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_network_Disconnect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Network.Disconnect, global::CarbonCore.Protocol.Network.Disconnect.Builder> internal__static_network_Disconnect__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static NetworkProtocol() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChZQcm90b2J1Zi9uZXR3b3JrLnByb3RvEgduZXR3b3JrGiRnb29nbGUvcHJv" + 
          "dG9idWYvY3NoYXJwX29wdGlvbnMucHJvdG8iqAEKBkhlYWRlchISCgJJZBgB" + 
          "IAIoBToGNjU2NTY1EhIKB1ZlcnNpb24YAiACKAU6ATESMgoEVHlwZRgDIAIo" + 
          "DjIbLm5ldHdvcmsuSGVhZGVyLk1lc3NhZ2VUeXBlOgdVbmtub3duIkIKC01l" + 
          "c3NhZ2VUeXBlEgsKB1Vua25vd24QABIJCgVBbGl2ZRABEgsKB0Nvbm5lY3QQ" + 
          "AhIOCgpEaXNjb25uZWN0EAMiJQoGQ2xpZW50EgoKAmlkGAEgAigMEg8KB3Zl" + 
          "cnNpb24YAiACKAUiKAoFQWxpdmUSHwoGY2xpZW50GAEgAigLMg8ubmV0d29y" + 
          "ay5DbGllbnQiKgoHQ29ubmVjdBIfCgZjbGllbnQYASACKAsyDy5uZXR3b3Jr" + 
          "LkNsaWVudCItCgpEaXNjb25uZWN0Eh8KBmNsaWVudBgBIAIoCzIPLm5ldHdv" + 
          "cmsuQ2xpZW50QjxIAcI+NwobQ2FyYm9uQ29yZS5Qcm90b2NvbC5OZXR3b3Jr" + 
          "Eg9OZXR3b3JrUHJvdG9jb2zqDQYucGIuY3M=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_network_Header__Descriptor = Descriptor.MessageTypes[0];
        internal__static_network_Header__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Network.Header, global::CarbonCore.Protocol.Network.Header.Builder>(internal__static_network_Header__Descriptor,
                new string[] { "Id", "Version", "Type", });
        internal__static_network_Client__Descriptor = Descriptor.MessageTypes[1];
        internal__static_network_Client__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Network.Client, global::CarbonCore.Protocol.Network.Client.Builder>(internal__static_network_Client__Descriptor,
                new string[] { "Id", "Version", });
        internal__static_network_Alive__Descriptor = Descriptor.MessageTypes[2];
        internal__static_network_Alive__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Network.Alive, global::CarbonCore.Protocol.Network.Alive.Builder>(internal__static_network_Alive__Descriptor,
                new string[] { "Client", });
        internal__static_network_Connect__Descriptor = Descriptor.MessageTypes[3];
        internal__static_network_Connect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Network.Connect, global::CarbonCore.Protocol.Network.Connect.Builder>(internal__static_network_Connect__Descriptor,
                new string[] { "Client", });
        internal__static_network_Disconnect__Descriptor = Descriptor.MessageTypes[4];
        internal__static_network_Disconnect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CarbonCore.Protocol.Network.Disconnect, global::CarbonCore.Protocol.Network.Disconnect.Builder>(internal__static_network_Disconnect__Descriptor,
                new string[] { "Client", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Header : pb::GeneratedMessage<Header, Header.Builder> {
    private Header() { }
    private static readonly Header defaultInstance = new Header().MakeReadOnly();
    private static readonly string[] _headerFieldNames = new string[] { "Id", "Type", "Version" };
    private static readonly uint[] _headerFieldTags = new uint[] { 8, 24, 16 };
    public static Header DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Header DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Header ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Network.NetworkProtocol.internal__static_network_Header__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Header, Header.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Network.NetworkProtocol.internal__static_network_Header__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MessageType {
        Unknown = 0,
        Alive = 1,
        Connect = 2,
        Disconnect = 3,
      }
      
    }
    #endregion
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_ = 656565;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private int version_ = 1;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::CarbonCore.Protocol.Network.Header.Types.MessageType type_ = global::CarbonCore.Protocol.Network.Header.Types.MessageType.Unknown;
    public bool HasType {
      get { return hasType; }
    }
    public global::CarbonCore.Protocol.Network.Header.Types.MessageType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasVersion) return false;
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _headerFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasVersion) {
        output.WriteInt32(2, field_names[2], Version);
      }
      if (hasType) {
        output.WriteEnum(3, field_names[1], (int) Type, Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Header ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Header MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Header prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Header, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Header cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Header result;
      
      private Header PrepareBuilder() {
        if (resultIsReadOnly) {
          Header original = result;
          result = new Header();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Header MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Network.Header.Descriptor; }
      }
      
      public override Header DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Network.Header.DefaultInstance; }
      }
      
      public override Header BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Header) {
          return MergeFrom((Header) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Header other) {
        if (other == global::CarbonCore.Protocol.Network.Header.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_headerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _headerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 656565;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 1;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::CarbonCore.Protocol.Network.Header.Types.MessageType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::CarbonCore.Protocol.Network.Header.Types.MessageType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::CarbonCore.Protocol.Network.Header.Types.MessageType.Unknown;
        return this;
      }
    }
    static Header() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Network.NetworkProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Client : pb::GeneratedMessage<Client, Client.Builder> {
    private Client() { }
    private static readonly Client defaultInstance = new Client().MakeReadOnly();
    private static readonly string[] _clientFieldNames = new string[] { "id", "version" };
    private static readonly uint[] _clientFieldTags = new uint[] { 10, 16 };
    public static Client DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Client DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Client ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Network.NetworkProtocol.internal__static_network_Client__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Client, Client.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Network.NetworkProtocol.internal__static_network_Client__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private pb::ByteString id_ = pb::ByteString.Empty;
    public bool HasId {
      get { return hasId; }
    }
    public pb::ByteString Id {
      get { return id_; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private int version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasVersion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clientFieldNames;
      if (hasId) {
        output.WriteBytes(1, field_names[0], Id);
      }
      if (hasVersion) {
        output.WriteInt32(2, field_names[1], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Id);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Client ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Client ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Client ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Client ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Client ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Client ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Client ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Client ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Client ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Client ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Client MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Client prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Client, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Client cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Client result;
      
      private Client PrepareBuilder() {
        if (resultIsReadOnly) {
          Client original = result;
          result = new Client();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Client MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Network.Client.Descriptor; }
      }
      
      public override Client DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Network.Client.DefaultInstance; }
      }
      
      public override Client BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Client) {
          return MergeFrom((Client) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Client other) {
        if (other == global::CarbonCore.Protocol.Network.Client.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadBytes(ref result.id_);
              break;
            }
            case 16: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public pb::ByteString Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
    }
    static Client() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Network.NetworkProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Alive : pb::GeneratedMessage<Alive, Alive.Builder> {
    private Alive() { }
    private static readonly Alive defaultInstance = new Alive().MakeReadOnly();
    private static readonly string[] _aliveFieldNames = new string[] { "client" };
    private static readonly uint[] _aliveFieldTags = new uint[] { 10 };
    public static Alive DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Alive DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Alive ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Network.NetworkProtocol.internal__static_network_Alive__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Alive, Alive.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Network.NetworkProtocol.internal__static_network_Alive__FieldAccessorTable; }
    }
    
    public const int ClientFieldNumber = 1;
    private bool hasClient;
    private global::CarbonCore.Protocol.Network.Client client_;
    public bool HasClient {
      get { return hasClient; }
    }
    public global::CarbonCore.Protocol.Network.Client Client {
      get { return client_ ?? global::CarbonCore.Protocol.Network.Client.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClient) return false;
        if (!Client.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _aliveFieldNames;
      if (hasClient) {
        output.WriteMessage(1, field_names[0], Client);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClient) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Client);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Alive ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Alive ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Alive ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Alive ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Alive ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Alive ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Alive ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Alive ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Alive ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Alive ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Alive MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Alive prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Alive, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Alive cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Alive result;
      
      private Alive PrepareBuilder() {
        if (resultIsReadOnly) {
          Alive original = result;
          result = new Alive();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Alive MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Network.Alive.Descriptor; }
      }
      
      public override Alive DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Network.Alive.DefaultInstance; }
      }
      
      public override Alive BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Alive) {
          return MergeFrom((Alive) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Alive other) {
        if (other == global::CarbonCore.Protocol.Network.Alive.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClient) {
          MergeClient(other.Client);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_aliveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _aliveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::CarbonCore.Protocol.Network.Client.Builder subBuilder = global::CarbonCore.Protocol.Network.Client.CreateBuilder();
              if (result.hasClient) {
                subBuilder.MergeFrom(Client);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Client = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClient {
       get { return result.hasClient; }
      }
      public global::CarbonCore.Protocol.Network.Client Client {
        get { return result.Client; }
        set { SetClient(value); }
      }
      public Builder SetClient(global::CarbonCore.Protocol.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClient = true;
        result.client_ = value;
        return this;
      }
      public Builder SetClient(global::CarbonCore.Protocol.Network.Client.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClient = true;
        result.client_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClient(global::CarbonCore.Protocol.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClient &&
            result.client_ != global::CarbonCore.Protocol.Network.Client.DefaultInstance) {
            result.client_ = global::CarbonCore.Protocol.Network.Client.CreateBuilder(result.client_).MergeFrom(value).BuildPartial();
        } else {
          result.client_ = value;
        }
        result.hasClient = true;
        return this;
      }
      public Builder ClearClient() {
        PrepareBuilder();
        result.hasClient = false;
        result.client_ = null;
        return this;
      }
    }
    static Alive() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Network.NetworkProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Connect : pb::GeneratedMessage<Connect, Connect.Builder> {
    private Connect() { }
    private static readonly Connect defaultInstance = new Connect().MakeReadOnly();
    private static readonly string[] _connectFieldNames = new string[] { "client" };
    private static readonly uint[] _connectFieldTags = new uint[] { 10 };
    public static Connect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Connect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Connect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Network.NetworkProtocol.internal__static_network_Connect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Connect, Connect.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Network.NetworkProtocol.internal__static_network_Connect__FieldAccessorTable; }
    }
    
    public const int ClientFieldNumber = 1;
    private bool hasClient;
    private global::CarbonCore.Protocol.Network.Client client_;
    public bool HasClient {
      get { return hasClient; }
    }
    public global::CarbonCore.Protocol.Network.Client Client {
      get { return client_ ?? global::CarbonCore.Protocol.Network.Client.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClient) return false;
        if (!Client.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _connectFieldNames;
      if (hasClient) {
        output.WriteMessage(1, field_names[0], Client);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClient) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Client);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Connect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Connect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Connect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Connect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Connect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Connect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Connect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Connect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Connect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Connect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Connect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Connect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Connect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Connect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Connect result;
      
      private Connect PrepareBuilder() {
        if (resultIsReadOnly) {
          Connect original = result;
          result = new Connect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Connect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Network.Connect.Descriptor; }
      }
      
      public override Connect DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Network.Connect.DefaultInstance; }
      }
      
      public override Connect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Connect) {
          return MergeFrom((Connect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Connect other) {
        if (other == global::CarbonCore.Protocol.Network.Connect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClient) {
          MergeClient(other.Client);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_connectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _connectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::CarbonCore.Protocol.Network.Client.Builder subBuilder = global::CarbonCore.Protocol.Network.Client.CreateBuilder();
              if (result.hasClient) {
                subBuilder.MergeFrom(Client);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Client = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClient {
       get { return result.hasClient; }
      }
      public global::CarbonCore.Protocol.Network.Client Client {
        get { return result.Client; }
        set { SetClient(value); }
      }
      public Builder SetClient(global::CarbonCore.Protocol.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClient = true;
        result.client_ = value;
        return this;
      }
      public Builder SetClient(global::CarbonCore.Protocol.Network.Client.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClient = true;
        result.client_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClient(global::CarbonCore.Protocol.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClient &&
            result.client_ != global::CarbonCore.Protocol.Network.Client.DefaultInstance) {
            result.client_ = global::CarbonCore.Protocol.Network.Client.CreateBuilder(result.client_).MergeFrom(value).BuildPartial();
        } else {
          result.client_ = value;
        }
        result.hasClient = true;
        return this;
      }
      public Builder ClearClient() {
        PrepareBuilder();
        result.hasClient = false;
        result.client_ = null;
        return this;
      }
    }
    static Connect() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Network.NetworkProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Disconnect : pb::GeneratedMessage<Disconnect, Disconnect.Builder> {
    private Disconnect() { }
    private static readonly Disconnect defaultInstance = new Disconnect().MakeReadOnly();
    private static readonly string[] _disconnectFieldNames = new string[] { "client" };
    private static readonly uint[] _disconnectFieldTags = new uint[] { 10 };
    public static Disconnect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Disconnect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Disconnect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CarbonCore.Protocol.Network.NetworkProtocol.internal__static_network_Disconnect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Disconnect, Disconnect.Builder> InternalFieldAccessors {
      get { return global::CarbonCore.Protocol.Network.NetworkProtocol.internal__static_network_Disconnect__FieldAccessorTable; }
    }
    
    public const int ClientFieldNumber = 1;
    private bool hasClient;
    private global::CarbonCore.Protocol.Network.Client client_;
    public bool HasClient {
      get { return hasClient; }
    }
    public global::CarbonCore.Protocol.Network.Client Client {
      get { return client_ ?? global::CarbonCore.Protocol.Network.Client.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClient) return false;
        if (!Client.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _disconnectFieldNames;
      if (hasClient) {
        output.WriteMessage(1, field_names[0], Client);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClient) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Client);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Disconnect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Disconnect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Disconnect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Disconnect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Disconnect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Disconnect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Disconnect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Disconnect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Disconnect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Disconnect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Disconnect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Disconnect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Disconnect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Disconnect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Disconnect result;
      
      private Disconnect PrepareBuilder() {
        if (resultIsReadOnly) {
          Disconnect original = result;
          result = new Disconnect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Disconnect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CarbonCore.Protocol.Network.Disconnect.Descriptor; }
      }
      
      public override Disconnect DefaultInstanceForType {
        get { return global::CarbonCore.Protocol.Network.Disconnect.DefaultInstance; }
      }
      
      public override Disconnect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Disconnect) {
          return MergeFrom((Disconnect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Disconnect other) {
        if (other == global::CarbonCore.Protocol.Network.Disconnect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClient) {
          MergeClient(other.Client);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_disconnectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _disconnectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::CarbonCore.Protocol.Network.Client.Builder subBuilder = global::CarbonCore.Protocol.Network.Client.CreateBuilder();
              if (result.hasClient) {
                subBuilder.MergeFrom(Client);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Client = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClient {
       get { return result.hasClient; }
      }
      public global::CarbonCore.Protocol.Network.Client Client {
        get { return result.Client; }
        set { SetClient(value); }
      }
      public Builder SetClient(global::CarbonCore.Protocol.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClient = true;
        result.client_ = value;
        return this;
      }
      public Builder SetClient(global::CarbonCore.Protocol.Network.Client.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClient = true;
        result.client_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClient(global::CarbonCore.Protocol.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClient &&
            result.client_ != global::CarbonCore.Protocol.Network.Client.DefaultInstance) {
            result.client_ = global::CarbonCore.Protocol.Network.Client.CreateBuilder(result.client_).MergeFrom(value).BuildPartial();
        } else {
          result.client_ = value;
        }
        result.hasClient = true;
        return this;
      }
      public Builder ClearClient() {
        PrepareBuilder();
        result.hasClient = false;
        result.client_ = null;
        return this;
      }
    }
    static Disconnect() {
      object.ReferenceEquals(global::CarbonCore.Protocol.Network.NetworkProtocol.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
