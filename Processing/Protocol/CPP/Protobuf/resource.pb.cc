// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protobuf/resource.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace resource {

namespace {

const ::google::protobuf::Descriptor* StoredMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoredMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* Raw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Raw_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompiledShader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompiledShader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelMaterial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelMaterial_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModelMaterial_ModelMaterialType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Model_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageProperty_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StageProperty_StagePropertyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StageCamera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageCamera_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageLight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageLight_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StageLight_StageLightType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StageModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Script_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Script_reflection_ = NULL;
const ::google::protobuf::Descriptor* CsamlAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CsamlAttribute_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlAttributeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlAttributeValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlLayoutMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlControlSizingMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlHorizontalAlignmentEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlVerticalAlignmentEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CsamlNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CsamlNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CsamlNode_CsamlNodeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Csaml_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Csaml_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInterface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInterface_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protobuf_2fresource_2eproto() {
  protobuf_AddDesc_Protobuf_2fresource_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protobuf/resource.proto");
  GOOGLE_CHECK(file != NULL);
  StoredMatrix_descriptor_ = file->message_type(0);
  static const int StoredMatrix_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredMatrix, data_),
  };
  StoredMatrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoredMatrix_descriptor_,
      StoredMatrix::default_instance_,
      StoredMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredMatrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredMatrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoredMatrix));
  Raw_descriptor_ = file->message_type(1);
  static const int Raw_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Raw, data_),
  };
  Raw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Raw_descriptor_,
      Raw::default_instance_,
      Raw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Raw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Raw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Raw));
  CompiledShader_descriptor_ = file->message_type(2);
  static const int CompiledShader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompiledShader, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompiledShader, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompiledShader, data_),
  };
  CompiledShader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompiledShader_descriptor_,
      CompiledShader::default_instance_,
      CompiledShader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompiledShader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompiledShader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompiledShader));
  ModelElement_descriptor_ = file->message_type(3);
  static const int ModelElement_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelElement, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelElement, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelElement, texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelElement, tangent_),
  };
  ModelElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelElement_descriptor_,
      ModelElement::default_instance_,
      ModelElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelElement));
  ModelMaterial_descriptor_ = file->message_type(4);
  static const int ModelMaterial_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, diffusetexture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, normaltexture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, alphatexture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, speculartexture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, shinyness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, refraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, transparancy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, colordiffuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, colorspecular_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, coloremission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, colorambient_),
  };
  ModelMaterial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelMaterial_descriptor_,
      ModelMaterial::default_instance_,
      ModelMaterial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMaterial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelMaterial));
  ModelMaterial_ModelMaterialType_descriptor_ = ModelMaterial_descriptor_->enum_type(0);
  Model_descriptor_ = file->message_type(5);
  static const int Model_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, tangentscalculated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, elements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, materials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, indices_),
  };
  Model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Model_descriptor_,
      Model::default_instance_,
      Model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Model));
  ModelGroup_descriptor_ = file->message_type(6);
  static const int ModelGroup_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, models_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, transformations_),
  };
  ModelGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelGroup_descriptor_,
      ModelGroup::default_instance_,
      ModelGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelGroup));
  StageProperty_descriptor_ = file->message_type(7);
  static const int StageProperty_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageProperty, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageProperty, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageProperty, data_),
  };
  StageProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageProperty_descriptor_,
      StageProperty::default_instance_,
      StageProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageProperty));
  StageProperty_StagePropertyType_descriptor_ = StageProperty_descriptor_->enum_type(0);
  StageCamera_descriptor_ = file->message_type(8);
  static const int StageCamera_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCamera, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCamera, fieldofview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCamera, layerflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCamera, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCamera, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCamera, rotation_),
  };
  StageCamera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageCamera_descriptor_,
      StageCamera::default_instance_,
      StageCamera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCamera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCamera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageCamera));
  StageLight_descriptor_ = file->message_type(9);
  static const int StageLight_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, ambientintensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, spotsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, layerflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, color_),
  };
  StageLight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageLight_descriptor_,
      StageLight::default_instance_,
      StageLight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageLight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageLight));
  StageLight_StageLightType_descriptor_ = StageLight_descriptor_->enum_type(0);
  StageModel_descriptor_ = file->message_type(10);
  static const int StageModel_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageModel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageModel, referenceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageModel, layerflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageModel, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageModel, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageModel, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageModel, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageModel, children_),
  };
  StageModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageModel_descriptor_,
      StageModel::default_instance_,
      StageModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageModel));
  Stage_descriptor_ = file->message_type(11);
  static const int Stage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage, references_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage, cameras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage, lights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage, models_),
  };
  Stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stage_descriptor_,
      Stage::default_instance_,
      Stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stage));
  Script_descriptor_ = file->message_type(12);
  static const int Script_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Script, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Script, scriptdata_),
  };
  Script_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Script_descriptor_,
      Script::default_instance_,
      Script_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Script, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Script, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Script));
  CsamlAttribute_descriptor_ = file->message_type(13);
  static const int CsamlAttribute_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlAttribute, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlAttribute, valuetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlAttribute, valuestring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlAttribute, valueint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlAttribute, valuefloat_),
  };
  CsamlAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CsamlAttribute_descriptor_,
      CsamlAttribute::default_instance_,
      CsamlAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CsamlAttribute));
  CsamlAttribute_CsamlAttributeType_descriptor_ = CsamlAttribute_descriptor_->enum_type(0);
  CsamlAttribute_CsamlAttributeValueType_descriptor_ = CsamlAttribute_descriptor_->enum_type(1);
  CsamlAttribute_CsamlLayoutMode_descriptor_ = CsamlAttribute_descriptor_->enum_type(2);
  CsamlAttribute_CsamlControlSizingMode_descriptor_ = CsamlAttribute_descriptor_->enum_type(3);
  CsamlAttribute_CsamlHorizontalAlignmentEnum_descriptor_ = CsamlAttribute_descriptor_->enum_type(4);
  CsamlAttribute_CsamlVerticalAlignmentEnum_descriptor_ = CsamlAttribute_descriptor_->enum_type(5);
  CsamlNode_descriptor_ = file->message_type(14);
  static const int CsamlNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlNode, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlNode, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlNode, children_),
  };
  CsamlNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CsamlNode_descriptor_,
      CsamlNode::default_instance_,
      CsamlNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CsamlNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CsamlNode));
  CsamlNode_CsamlNodeType_descriptor_ = CsamlNode_descriptor_->enum_type(0);
  Csaml_descriptor_ = file->message_type(15);
  static const int Csaml_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Csaml, nodes_),
  };
  Csaml_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Csaml_descriptor_,
      Csaml::default_instance_,
      Csaml_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Csaml, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Csaml, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Csaml));
  UserInterface_descriptor_ = file->message_type(16);
  static const int UserInterface_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInterface, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInterface, csaml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInterface, script_),
  };
  UserInterface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInterface_descriptor_,
      UserInterface::default_instance_,
      UserInterface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInterface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInterface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInterface));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protobuf_2fresource_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoredMatrix_descriptor_, &StoredMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Raw_descriptor_, &Raw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompiledShader_descriptor_, &CompiledShader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelElement_descriptor_, &ModelElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelMaterial_descriptor_, &ModelMaterial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Model_descriptor_, &Model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelGroup_descriptor_, &ModelGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageProperty_descriptor_, &StageProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageCamera_descriptor_, &StageCamera::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageLight_descriptor_, &StageLight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageModel_descriptor_, &StageModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stage_descriptor_, &Stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Script_descriptor_, &Script::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CsamlAttribute_descriptor_, &CsamlAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CsamlNode_descriptor_, &CsamlNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Csaml_descriptor_, &Csaml::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInterface_descriptor_, &UserInterface::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protobuf_2fresource_2eproto() {
  delete StoredMatrix::default_instance_;
  delete StoredMatrix_reflection_;
  delete Raw::default_instance_;
  delete Raw_reflection_;
  delete CompiledShader::default_instance_;
  delete CompiledShader_reflection_;
  delete ModelElement::default_instance_;
  delete ModelElement_reflection_;
  delete ModelMaterial::default_instance_;
  delete ModelMaterial_reflection_;
  delete Model::default_instance_;
  delete Model_reflection_;
  delete ModelGroup::default_instance_;
  delete ModelGroup_reflection_;
  delete StageProperty::default_instance_;
  delete StageProperty_reflection_;
  delete StageCamera::default_instance_;
  delete StageCamera_reflection_;
  delete StageLight::default_instance_;
  delete StageLight_reflection_;
  delete StageModel::default_instance_;
  delete StageModel_reflection_;
  delete Stage::default_instance_;
  delete Stage_reflection_;
  delete Script::default_instance_;
  delete Script_reflection_;
  delete CsamlAttribute::default_instance_;
  delete CsamlAttribute_reflection_;
  delete CsamlNode::default_instance_;
  delete CsamlNode_reflection_;
  delete Csaml::default_instance_;
  delete Csaml_reflection_;
  delete UserInterface::default_instance_;
  delete UserInterface_reflection_;
}

void protobuf_AddDesc_Protobuf_2fresource_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fcsharp_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027Protobuf/resource.proto\022\010resource\032$goo"
    "gle/protobuf/csharp_options.proto\"\034\n\014Sto"
    "redMatrix\022\014\n\004Data\030\001 \003(\002\"\023\n\003Raw\022\014\n\004Data\030\001"
    " \002(\014\"\?\n\016CompiledShader\022\022\n\007Version\030\001 \002(\005:"
    "\0011\022\013\n\003MD5\030\002 \002(\014\022\014\n\004Data\030\003 \002(\014\"b\n\014ModelEl"
    "ement\022\024\n\010Position\030\001 \003(\002B\002\020\001\022\022\n\006Normal\030\002 "
    "\003(\002B\002\020\001\022\023\n\007Texture\030\003 \003(\002B\002\020\001\022\023\n\007Tangent\030"
    "\004 \003(\002B\002\020\001\"\373\002\n\rModelMaterial\0227\n\004Type\030\001 \002("
    "\0162).resource.ModelMaterial.ModelMaterial"
    "Type\022\014\n\004Name\030\002 \002(\t\022\026\n\016DiffuseTexture\030\003 \001"
    "(\t\022\025\n\rNormalTexture\030\004 \001(\t\022\024\n\014AlphaTextur"
    "e\030\005 \001(\t\022\027\n\017SpecularTexture\030\006 \001(\t\022\021\n\tShin"
    "yness\030\n \002(\002\022\022\n\nRefraction\030\013 \002(\002\022\024\n\014Trans"
    "parancy\030\014 \001(\002\022\030\n\014ColorDiffuse\030\024 \003(\002B\002\020\001\022"
    "\031\n\rColorSpecular\030\025 \003(\002B\002\020\001\022\031\n\rColorEmiss"
    "ion\030\026 \003(\002B\002\020\001\022\030\n\014ColorAmbient\030\027 \003(\002B\002\020\001\""
    "\036\n\021ModelMaterialType\022\t\n\005Blinn\020\000\"\263\001\n\005Mode"
    "l\022\022\n\007Version\030\001 \002(\005:\0011\022\014\n\004Name\030\002 \002(\t\022!\n\022T"
    "angentsCalculated\030\003 \002(\010:\005false\022(\n\010Elemen"
    "ts\030\024 \003(\0132\026.resource.ModelElement\022*\n\tMate"
    "rials\030\025 \003(\0132\027.resource.ModelMaterial\022\017\n\007"
    "Indices\030\026 \003(\r\"\343\001\n\nModelGroup\022\022\n\007Version\030"
    "\001 \002(\005:\0011\022\014\n\004Name\030\002 \002(\t\022\022\n\006Offset\030\n \003(\002B\002"
    "\020\001\022\024\n\010Rotation\030\013 \003(\002B\002\020\001\022\021\n\005Scale\030\014 \003(\002B"
    "\002\020\001\022\037\n\006Models\030\024 \003(\0132\017.resource.Model\022$\n\006"
    "Groups\030\025 \003(\0132\024.resource.ModelGroup\022/\n\017Tr"
    "ansformations\030\026 \003(\0132\026.resource.StoredMat"
    "rix\"\244\001\n\rStageProperty\022\n\n\002Id\030\001 \002(\t\0227\n\004Typ"
    "e\030\002 \002(\0162).resource.StageProperty.StagePr"
    "opertyType\022\014\n\004Data\030\003 \002(\014\"@\n\021StagePropert"
    "yType\022\013\n\007Unknown\020\000\022\n\n\006String\020\001\022\t\n\005Float\020"
    "\002\022\007\n\003Int\020\003\"\233\001\n\013StageCamera\022\n\n\002Id\030\001 \002(\t\022\023"
    "\n\013FieldOfView\030\002 \002(\002\022\022\n\nLayerFlags\030\n \001(\005\022"
    "+\n\nProperties\030\013 \003(\0132\027.resource.StageProp"
    "erty\022\024\n\010Position\030\024 \003(\002B\002\020\001\022\024\n\010Rotation\030\025"
    " \003(\002B\002\020\001\"\357\002\n\nStageLight\022\n\n\002Id\030\001 \002(\t\0221\n\004T"
    "ype\030\002 \002(\0162#.resource.StageLight.StageLig"
    "htType\022\016\n\006Radius\030\003 \001(\002\022\021\n\tIntensity\030\004 \001("
    "\002\022\030\n\020AmbientIntensity\030\005 \001(\002\022\020\n\010SpotSize\030"
    "\006 \001(\002\022\r\n\005Angle\030\007 \001(\002\022\022\n\nLayerFlags\030\n \001(\005"
    "\022+\n\nProperties\030\013 \003(\0132\027.resource.StagePro"
    "perty\022\024\n\010Location\030\024 \003(\002B\002\020\001\022\025\n\tDirection"
    "\030\025 \003(\002B\002\020\001\022\021\n\005Color\030\026 \003(\002B\002\020\001\"C\n\016StageLi"
    "ghtType\022\013\n\007Unknown\020\000\022\010\n\004Spot\020\001\022\017\n\013Direct"
    "ional\020\002\022\t\n\005Point\020\003\"\330\001\n\nStageModel\022\n\n\002Id\030"
    "\001 \002(\t\022\023\n\013ReferenceId\030\002 \001(\005\022\022\n\nLayerFlags"
    "\030\n \001(\005\022+\n\nProperties\030\013 \003(\0132\027.resource.St"
    "ageProperty\022\027\n\013Translation\030\024 \003(\002B\002\020\001\022\024\n\010"
    "Rotation\030\025 \003(\002B\002\020\001\022\021\n\005Scale\030\026 \003(\002B\002\020\001\022&\n"
    "\010Children\030\036 \003(\0132\024.resource.StageModel\"\243\001"
    "\n\005Stage\022\022\n\007Version\030\001 \002(\005:\0011\022\022\n\nReference"
    "s\030\t \003(\t\022&\n\007Cameras\030\n \003(\0132\025.resource.Stag"
    "eCamera\022$\n\006Lights\030\013 \003(\0132\024.resource.Stage"
    "Light\022$\n\006Models\030\014 \003(\0132\024.resource.StageMo"
    "del\"0\n\006Script\022\022\n\007Version\030\001 \002(\005:\0011\022\022\n\nScr"
    "iptData\030\002 \002(\014\"\215\006\n\016CsamlAttribute\0229\n\004Type"
    "\030\001 \002(\0162+.resource.CsamlAttribute.CsamlAt"
    "tributeType\022K\n\tValueType\030\002 \002(\01620.resourc"
    "e.CsamlAttribute.CsamlAttributeValueType"
    ":\006String\022\023\n\013ValueString\030\003 \001(\t\022\020\n\010ValueIn"
    "t\030\004 \001(\005\022\022\n\nValueFloat\030\005 \001(\002\"\346\001\n\022CsamlAtt"
    "ributeType\022\013\n\007Unknown\020\000\022\017\n\013ControlName\020\001"
    "\022\t\n\005Width\020\002\022\n\n\006Height\020\003\022\016\n\nLayoutMode\020\004\022"
    "\010\n\004Mode\020\005\022\010\n\004Text\020\006\022\n\n\006Source\020\007\022\021\n\rTypeA"
    "ttribute\020\010\022\010\n\004Left\020\t\022\007\n\003Top\020\n\022\t\n\005Right\020\013"
    "\022\n\n\006Bottom\020\014\022\027\n\023HorizontalAlignment\020\r\022\025\n"
    "\021VerticalAlignment\020\016\"9\n\027CsamlAttributeVa"
    "lueType\022\n\n\006String\020\000\022\007\n\003Int\020\001\022\t\n\005Float\020\002\""
    "9\n\017CsamlLayoutMode\022\022\n\016LayoutAbsolute\020\000\022\022"
    "\n\016LayoutRelative\020\001\"9\n\026CsamlControlSizing"
    "Mode\022\016\n\nSizeNormal\020\000\022\017\n\013SizeStretch\020\001\"O\n"
    "\034CsamlHorizontalAlignmentEnum\022\r\n\tAlignLe"
    "ft\020\000\022\020\n\014AlignCenterH\020\001\022\016\n\nAlignRight\020\002\"M"
    "\n\032CsamlVerticalAlignmentEnum\022\014\n\010AlignTop"
    "\020\000\022\020\n\014AlignCenterV\020\001\022\017\n\013AlignBottom\020\002\"\374\001"
    "\n\tCsamlNode\022/\n\004Type\030\001 \002(\0162!.resource.Csa"
    "mlNode.CsamlNodeType\022,\n\nAttributes\030\002 \003(\013"
    "2\030.resource.CsamlAttribute\022%\n\010Children\030\003"
    " \003(\0132\023.resource.CsamlNode\"i\n\rCsamlNodeTy"
    "pe\022\013\n\007Unknown\020\000\022\t\n\005Frame\020\001\022\t\n\005Image\020\002\022\r\n"
    "\tSolidText\020\003\022\017\n\013DynamicText\020\004\022\013\n\007Console"
    "\020\005\022\010\n\004Page\020\006\"+\n\005Csaml\022\"\n\005Nodes\030\001 \003(\0132\023.r"
    "esource.CsamlNode\"e\n\rUserInterface\022\022\n\007Ve"
    "rsion\030\001 \002(\005:\0011\022\036\n\005Csaml\030\002 \002(\0132\017.resource"
    ".Csaml\022 \n\006Script\030\003 \002(\0132\020.resource.Script"
    "BDH\001\302>\036\n\034CarbonCore.Protocol.Resource\302>\022"
    "\022\020ResourceProtocol\302>\t\352\r\006.pb.cs", 3470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protobuf/resource.proto", &protobuf_RegisterTypes);
  StoredMatrix::default_instance_ = new StoredMatrix();
  Raw::default_instance_ = new Raw();
  CompiledShader::default_instance_ = new CompiledShader();
  ModelElement::default_instance_ = new ModelElement();
  ModelMaterial::default_instance_ = new ModelMaterial();
  Model::default_instance_ = new Model();
  ModelGroup::default_instance_ = new ModelGroup();
  StageProperty::default_instance_ = new StageProperty();
  StageCamera::default_instance_ = new StageCamera();
  StageLight::default_instance_ = new StageLight();
  StageModel::default_instance_ = new StageModel();
  Stage::default_instance_ = new Stage();
  Script::default_instance_ = new Script();
  CsamlAttribute::default_instance_ = new CsamlAttribute();
  CsamlNode::default_instance_ = new CsamlNode();
  Csaml::default_instance_ = new Csaml();
  UserInterface::default_instance_ = new UserInterface();
  StoredMatrix::default_instance_->InitAsDefaultInstance();
  Raw::default_instance_->InitAsDefaultInstance();
  CompiledShader::default_instance_->InitAsDefaultInstance();
  ModelElement::default_instance_->InitAsDefaultInstance();
  ModelMaterial::default_instance_->InitAsDefaultInstance();
  Model::default_instance_->InitAsDefaultInstance();
  ModelGroup::default_instance_->InitAsDefaultInstance();
  StageProperty::default_instance_->InitAsDefaultInstance();
  StageCamera::default_instance_->InitAsDefaultInstance();
  StageLight::default_instance_->InitAsDefaultInstance();
  StageModel::default_instance_->InitAsDefaultInstance();
  Stage::default_instance_->InitAsDefaultInstance();
  Script::default_instance_->InitAsDefaultInstance();
  CsamlAttribute::default_instance_->InitAsDefaultInstance();
  CsamlNode::default_instance_->InitAsDefaultInstance();
  Csaml::default_instance_->InitAsDefaultInstance();
  UserInterface::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protobuf_2fresource_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protobuf_2fresource_2eproto {
  StaticDescriptorInitializer_Protobuf_2fresource_2eproto() {
    protobuf_AddDesc_Protobuf_2fresource_2eproto();
  }
} static_descriptor_initializer_Protobuf_2fresource_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int StoredMatrix::kDataFieldNumber;
#endif  // !_MSC_VER

StoredMatrix::StoredMatrix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoredMatrix::InitAsDefaultInstance() {
}

StoredMatrix::StoredMatrix(const StoredMatrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoredMatrix::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoredMatrix::~StoredMatrix() {
  SharedDtor();
}

void StoredMatrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoredMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoredMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoredMatrix_descriptor_;
}

const StoredMatrix& StoredMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

StoredMatrix* StoredMatrix::default_instance_ = NULL;

StoredMatrix* StoredMatrix::New() const {
  return new StoredMatrix;
}

void StoredMatrix::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoredMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float Data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_Data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoredMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float Data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoredMatrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float Data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoredMatrix::ByteSize() const {
  int total_size = 0;
  
  // repeated float Data = 1;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoredMatrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoredMatrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoredMatrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoredMatrix::MergeFrom(const StoredMatrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoredMatrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredMatrix::CopyFrom(const StoredMatrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredMatrix::IsInitialized() const {
  
  return true;
}

void StoredMatrix::Swap(StoredMatrix* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoredMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoredMatrix_descriptor_;
  metadata.reflection = StoredMatrix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Raw::kDataFieldNumber;
#endif  // !_MSC_VER

Raw::Raw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Raw::InitAsDefaultInstance() {
}

Raw::Raw(const Raw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Raw::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Raw::~Raw() {
  SharedDtor();
}

void Raw::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Raw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Raw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Raw_descriptor_;
}

const Raw& Raw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

Raw* Raw::default_instance_ = NULL;

Raw* Raw::New() const {
  return new Raw;
}

void Raw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Raw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Raw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes Data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Raw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes Data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Raw::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Raw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Raw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Raw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Raw::MergeFrom(const Raw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Raw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Raw::CopyFrom(const Raw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Raw::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Raw::Swap(Raw* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Raw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Raw_descriptor_;
  metadata.reflection = Raw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompiledShader::kVersionFieldNumber;
const int CompiledShader::kMD5FieldNumber;
const int CompiledShader::kDataFieldNumber;
#endif  // !_MSC_VER

CompiledShader::CompiledShader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompiledShader::InitAsDefaultInstance() {
}

CompiledShader::CompiledShader(const CompiledShader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompiledShader::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1;
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompiledShader::~CompiledShader() {
  SharedDtor();
}

void CompiledShader::SharedDtor() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CompiledShader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompiledShader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompiledShader_descriptor_;
}

const CompiledShader& CompiledShader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

CompiledShader* CompiledShader::default_instance_ = NULL;

CompiledShader* CompiledShader::New() const {
  return new CompiledShader;
}

void CompiledShader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1;
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompiledShader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Version = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MD5;
        break;
      }
      
      // required bytes MD5 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MD5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_md5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Data;
        break;
      }
      
      // required bytes Data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompiledShader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // required bytes MD5 = 2;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->md5(), output);
  }
  
  // required bytes Data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompiledShader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // required bytes MD5 = 2;
  if (has_md5()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->md5(), target);
  }
  
  // required bytes Data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompiledShader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Version = 1 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required bytes MD5 = 2;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->md5());
    }
    
    // required bytes Data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompiledShader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompiledShader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompiledShader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompiledShader::MergeFrom(const CompiledShader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompiledShader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompiledShader::CopyFrom(const CompiledShader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompiledShader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CompiledShader::Swap(CompiledShader* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(md5_, other->md5_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompiledShader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompiledShader_descriptor_;
  metadata.reflection = CompiledShader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelElement::kPositionFieldNumber;
const int ModelElement::kNormalFieldNumber;
const int ModelElement::kTextureFieldNumber;
const int ModelElement::kTangentFieldNumber;
#endif  // !_MSC_VER

ModelElement::ModelElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelElement::InitAsDefaultInstance() {
}

ModelElement::ModelElement(const ModelElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelElement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelElement::~ModelElement() {
  SharedDtor();
}

void ModelElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModelElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelElement_descriptor_;
}

const ModelElement& ModelElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

ModelElement* ModelElement::default_instance_ = NULL;

ModelElement* ModelElement::New() const {
  return new ModelElement;
}

void ModelElement::Clear() {
  position_.Clear();
  normal_.Clear();
  texture_.Clear();
  tangent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float Position = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Normal;
        break;
      }
      
      // repeated float Normal = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_normal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_normal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Texture;
        break;
      }
      
      // repeated float Texture = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Texture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_texture())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_texture())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Tangent;
        break;
      }
      
      // repeated float Tangent = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Tangent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tangent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_tangent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float Position = 1 [packed = true];
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
  }
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->position(i), output);
  }
  
  // repeated float Normal = 2 [packed = true];
  if (this->normal_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_normal_cached_byte_size_);
  }
  for (int i = 0; i < this->normal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->normal(i), output);
  }
  
  // repeated float Texture = 3 [packed = true];
  if (this->texture_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_texture_cached_byte_size_);
  }
  for (int i = 0; i < this->texture_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->texture(i), output);
  }
  
  // repeated float Tangent = 4 [packed = true];
  if (this->tangent_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tangent_cached_byte_size_);
  }
  for (int i = 0; i < this->tangent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->tangent(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float Position = 1 [packed = true];
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->position(i), target);
  }
  
  // repeated float Normal = 2 [packed = true];
  if (this->normal_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _normal_cached_byte_size_, target);
  }
  for (int i = 0; i < this->normal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->normal(i), target);
  }
  
  // repeated float Texture = 3 [packed = true];
  if (this->texture_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _texture_cached_byte_size_, target);
  }
  for (int i = 0; i < this->texture_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->texture(i), target);
  }
  
  // repeated float Tangent = 4 [packed = true];
  if (this->tangent_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _tangent_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tangent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tangent(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelElement::ByteSize() const {
  int total_size = 0;
  
  // repeated float Position = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->position_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _position_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float Normal = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->normal_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _normal_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float Texture = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->texture_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _texture_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float Tangent = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->tangent_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _tangent_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelElement::MergeFrom(const ModelElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  normal_.MergeFrom(from.normal_);
  texture_.MergeFrom(from.texture_);
  tangent_.MergeFrom(from.tangent_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelElement::CopyFrom(const ModelElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelElement::IsInitialized() const {
  
  return true;
}

void ModelElement::Swap(ModelElement* other) {
  if (other != this) {
    position_.Swap(&other->position_);
    normal_.Swap(&other->normal_);
    texture_.Swap(&other->texture_);
    tangent_.Swap(&other->tangent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelElement_descriptor_;
  metadata.reflection = ModelElement_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ModelMaterial_ModelMaterialType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelMaterial_ModelMaterialType_descriptor_;
}
bool ModelMaterial_ModelMaterialType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ModelMaterial_ModelMaterialType ModelMaterial::Blinn;
const ModelMaterial_ModelMaterialType ModelMaterial::ModelMaterialType_MIN;
const ModelMaterial_ModelMaterialType ModelMaterial::ModelMaterialType_MAX;
const int ModelMaterial::ModelMaterialType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ModelMaterial::kTypeFieldNumber;
const int ModelMaterial::kNameFieldNumber;
const int ModelMaterial::kDiffuseTextureFieldNumber;
const int ModelMaterial::kNormalTextureFieldNumber;
const int ModelMaterial::kAlphaTextureFieldNumber;
const int ModelMaterial::kSpecularTextureFieldNumber;
const int ModelMaterial::kShinynessFieldNumber;
const int ModelMaterial::kRefractionFieldNumber;
const int ModelMaterial::kTransparancyFieldNumber;
const int ModelMaterial::kColorDiffuseFieldNumber;
const int ModelMaterial::kColorSpecularFieldNumber;
const int ModelMaterial::kColorEmissionFieldNumber;
const int ModelMaterial::kColorAmbientFieldNumber;
#endif  // !_MSC_VER

ModelMaterial::ModelMaterial()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelMaterial::InitAsDefaultInstance() {
}

ModelMaterial::ModelMaterial(const ModelMaterial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelMaterial::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diffusetexture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normaltexture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alphatexture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speculartexture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shinyness_ = 0;
  refraction_ = 0;
  transparancy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelMaterial::~ModelMaterial() {
  SharedDtor();
}

void ModelMaterial::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (diffusetexture_ != &::google::protobuf::internal::kEmptyString) {
    delete diffusetexture_;
  }
  if (normaltexture_ != &::google::protobuf::internal::kEmptyString) {
    delete normaltexture_;
  }
  if (alphatexture_ != &::google::protobuf::internal::kEmptyString) {
    delete alphatexture_;
  }
  if (speculartexture_ != &::google::protobuf::internal::kEmptyString) {
    delete speculartexture_;
  }
  if (this != default_instance_) {
  }
}

void ModelMaterial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelMaterial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelMaterial_descriptor_;
}

const ModelMaterial& ModelMaterial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

ModelMaterial* ModelMaterial::default_instance_ = NULL;

ModelMaterial* ModelMaterial::New() const {
  return new ModelMaterial;
}

void ModelMaterial::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_diffusetexture()) {
      if (diffusetexture_ != &::google::protobuf::internal::kEmptyString) {
        diffusetexture_->clear();
      }
    }
    if (has_normaltexture()) {
      if (normaltexture_ != &::google::protobuf::internal::kEmptyString) {
        normaltexture_->clear();
      }
    }
    if (has_alphatexture()) {
      if (alphatexture_ != &::google::protobuf::internal::kEmptyString) {
        alphatexture_->clear();
      }
    }
    if (has_speculartexture()) {
      if (speculartexture_ != &::google::protobuf::internal::kEmptyString) {
        speculartexture_->clear();
      }
    }
    shinyness_ = 0;
    refraction_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    transparancy_ = 0;
  }
  colordiffuse_.Clear();
  colorspecular_.Clear();
  coloremission_.Clear();
  colorambient_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelMaterial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .resource.ModelMaterial.ModelMaterialType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::resource::ModelMaterial_ModelMaterialType_IsValid(value)) {
            set_type(static_cast< ::resource::ModelMaterial_ModelMaterialType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DiffuseTexture;
        break;
      }
      
      // optional string DiffuseTexture = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DiffuseTexture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diffusetexture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diffusetexture().data(), this->diffusetexture().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NormalTexture;
        break;
      }
      
      // optional string NormalTexture = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NormalTexture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normaltexture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normaltexture().data(), this->normaltexture().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AlphaTexture;
        break;
      }
      
      // optional string AlphaTexture = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AlphaTexture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alphatexture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alphatexture().data(), this->alphatexture().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SpecularTexture;
        break;
      }
      
      // optional string SpecularTexture = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SpecularTexture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speculartexture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->speculartexture().data(), this->speculartexture().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_Shinyness;
        break;
      }
      
      // required float Shinyness = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Shinyness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shinyness_)));
          set_has_shinyness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_Refraction;
        break;
      }
      
      // required float Refraction = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Refraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &refraction_)));
          set_has_refraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_Transparancy;
        break;
      }
      
      // optional float Transparancy = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Transparancy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparancy_)));
          set_has_transparancy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ColorDiffuse;
        break;
      }
      
      // repeated float ColorDiffuse = 20 [packed = true];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ColorDiffuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_colordiffuse())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 162, input, this->mutable_colordiffuse())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ColorSpecular;
        break;
      }
      
      // repeated float ColorSpecular = 21 [packed = true];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ColorSpecular:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_colorspecular())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 170, input, this->mutable_colorspecular())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ColorEmission;
        break;
      }
      
      // repeated float ColorEmission = 22 [packed = true];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ColorEmission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coloremission())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 178, input, this->mutable_coloremission())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_ColorAmbient;
        break;
      }
      
      // repeated float ColorAmbient = 23 [packed = true];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ColorAmbient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_colorambient())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 186, input, this->mutable_colorambient())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelMaterial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .resource.ModelMaterial.ModelMaterialType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string DiffuseTexture = 3;
  if (has_diffusetexture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diffusetexture().data(), this->diffusetexture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->diffusetexture(), output);
  }
  
  // optional string NormalTexture = 4;
  if (has_normaltexture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normaltexture().data(), this->normaltexture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->normaltexture(), output);
  }
  
  // optional string AlphaTexture = 5;
  if (has_alphatexture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alphatexture().data(), this->alphatexture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->alphatexture(), output);
  }
  
  // optional string SpecularTexture = 6;
  if (has_speculartexture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speculartexture().data(), this->speculartexture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->speculartexture(), output);
  }
  
  // required float Shinyness = 10;
  if (has_shinyness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->shinyness(), output);
  }
  
  // required float Refraction = 11;
  if (has_refraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->refraction(), output);
  }
  
  // optional float Transparancy = 12;
  if (has_transparancy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->transparancy(), output);
  }
  
  // repeated float ColorDiffuse = 20 [packed = true];
  if (this->colordiffuse_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_colordiffuse_cached_byte_size_);
  }
  for (int i = 0; i < this->colordiffuse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->colordiffuse(i), output);
  }
  
  // repeated float ColorSpecular = 21 [packed = true];
  if (this->colorspecular_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(21, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_colorspecular_cached_byte_size_);
  }
  for (int i = 0; i < this->colorspecular_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->colorspecular(i), output);
  }
  
  // repeated float ColorEmission = 22 [packed = true];
  if (this->coloremission_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(22, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_coloremission_cached_byte_size_);
  }
  for (int i = 0; i < this->coloremission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->coloremission(i), output);
  }
  
  // repeated float ColorAmbient = 23 [packed = true];
  if (this->colorambient_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_colorambient_cached_byte_size_);
  }
  for (int i = 0; i < this->colorambient_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->colorambient(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelMaterial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .resource.ModelMaterial.ModelMaterialType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string DiffuseTexture = 3;
  if (has_diffusetexture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diffusetexture().data(), this->diffusetexture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->diffusetexture(), target);
  }
  
  // optional string NormalTexture = 4;
  if (has_normaltexture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normaltexture().data(), this->normaltexture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->normaltexture(), target);
  }
  
  // optional string AlphaTexture = 5;
  if (has_alphatexture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alphatexture().data(), this->alphatexture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->alphatexture(), target);
  }
  
  // optional string SpecularTexture = 6;
  if (has_speculartexture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->speculartexture().data(), this->speculartexture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->speculartexture(), target);
  }
  
  // required float Shinyness = 10;
  if (has_shinyness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->shinyness(), target);
  }
  
  // required float Refraction = 11;
  if (has_refraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->refraction(), target);
  }
  
  // optional float Transparancy = 12;
  if (has_transparancy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->transparancy(), target);
  }
  
  // repeated float ColorDiffuse = 20 [packed = true];
  if (this->colordiffuse_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _colordiffuse_cached_byte_size_, target);
  }
  for (int i = 0; i < this->colordiffuse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->colordiffuse(i), target);
  }
  
  // repeated float ColorSpecular = 21 [packed = true];
  if (this->colorspecular_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _colorspecular_cached_byte_size_, target);
  }
  for (int i = 0; i < this->colorspecular_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->colorspecular(i), target);
  }
  
  // repeated float ColorEmission = 22 [packed = true];
  if (this->coloremission_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _coloremission_cached_byte_size_, target);
  }
  for (int i = 0; i < this->coloremission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->coloremission(i), target);
  }
  
  // repeated float ColorAmbient = 23 [packed = true];
  if (this->colorambient_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      23,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _colorambient_cached_byte_size_, target);
  }
  for (int i = 0; i < this->colorambient_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->colorambient(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelMaterial::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .resource.ModelMaterial.ModelMaterialType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string DiffuseTexture = 3;
    if (has_diffusetexture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diffusetexture());
    }
    
    // optional string NormalTexture = 4;
    if (has_normaltexture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normaltexture());
    }
    
    // optional string AlphaTexture = 5;
    if (has_alphatexture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alphatexture());
    }
    
    // optional string SpecularTexture = 6;
    if (has_speculartexture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speculartexture());
    }
    
    // required float Shinyness = 10;
    if (has_shinyness()) {
      total_size += 1 + 4;
    }
    
    // required float Refraction = 11;
    if (has_refraction()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float Transparancy = 12;
    if (has_transparancy()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float ColorDiffuse = 20 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->colordiffuse_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _colordiffuse_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float ColorSpecular = 21 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->colorspecular_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _colorspecular_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float ColorEmission = 22 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->coloremission_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _coloremission_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float ColorAmbient = 23 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->colorambient_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _colorambient_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelMaterial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelMaterial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelMaterial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelMaterial::MergeFrom(const ModelMaterial& from) {
  GOOGLE_CHECK_NE(&from, this);
  colordiffuse_.MergeFrom(from.colordiffuse_);
  colorspecular_.MergeFrom(from.colorspecular_);
  coloremission_.MergeFrom(from.coloremission_);
  colorambient_.MergeFrom(from.colorambient_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_diffusetexture()) {
      set_diffusetexture(from.diffusetexture());
    }
    if (from.has_normaltexture()) {
      set_normaltexture(from.normaltexture());
    }
    if (from.has_alphatexture()) {
      set_alphatexture(from.alphatexture());
    }
    if (from.has_speculartexture()) {
      set_speculartexture(from.speculartexture());
    }
    if (from.has_shinyness()) {
      set_shinyness(from.shinyness());
    }
    if (from.has_refraction()) {
      set_refraction(from.refraction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transparancy()) {
      set_transparancy(from.transparancy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelMaterial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelMaterial::CopyFrom(const ModelMaterial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelMaterial::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c3) != 0x000000c3) return false;
  
  return true;
}

void ModelMaterial::Swap(ModelMaterial* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(diffusetexture_, other->diffusetexture_);
    std::swap(normaltexture_, other->normaltexture_);
    std::swap(alphatexture_, other->alphatexture_);
    std::swap(speculartexture_, other->speculartexture_);
    std::swap(shinyness_, other->shinyness_);
    std::swap(refraction_, other->refraction_);
    std::swap(transparancy_, other->transparancy_);
    colordiffuse_.Swap(&other->colordiffuse_);
    colorspecular_.Swap(&other->colorspecular_);
    coloremission_.Swap(&other->coloremission_);
    colorambient_.Swap(&other->colorambient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelMaterial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelMaterial_descriptor_;
  metadata.reflection = ModelMaterial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Model::kVersionFieldNumber;
const int Model::kNameFieldNumber;
const int Model::kTangentsCalculatedFieldNumber;
const int Model::kElementsFieldNumber;
const int Model::kMaterialsFieldNumber;
const int Model::kIndicesFieldNumber;
#endif  // !_MSC_VER

Model::Model()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Model::InitAsDefaultInstance() {
}

Model::Model(const Model& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Model::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tangentscalculated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Model::~Model() {
  SharedDtor();
}

void Model::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Model_descriptor_;
}

const Model& Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

Model* Model::default_instance_ = NULL;

Model* Model::New() const {
  return new Model;
}

void Model::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    tangentscalculated_ = false;
  }
  elements_.Clear();
  materials_.Clear();
  indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Version = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TangentsCalculated;
        break;
      }
      
      // required bool TangentsCalculated = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TangentsCalculated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tangentscalculated_)));
          set_has_tangentscalculated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_Elements;
        break;
      }
      
      // repeated .resource.ModelElement Elements = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_Elements;
        if (input->ExpectTag(170)) goto parse_Materials;
        break;
      }
      
      // repeated .resource.ModelMaterial Materials = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_Materials;
        if (input->ExpectTag(176)) goto parse_Indices;
        break;
      }
      
      // repeated uint32 Indices = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_indices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_indices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_Indices;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required bool TangentsCalculated = 3 [default = false];
  if (has_tangentscalculated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->tangentscalculated(), output);
  }
  
  // repeated .resource.ModelElement Elements = 20;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->elements(i), output);
  }
  
  // repeated .resource.ModelMaterial Materials = 21;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->materials(i), output);
  }
  
  // repeated uint32 Indices = 22;
  for (int i = 0; i < this->indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->indices(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required bool TangentsCalculated = 3 [default = false];
  if (has_tangentscalculated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->tangentscalculated(), target);
  }
  
  // repeated .resource.ModelElement Elements = 20;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->elements(i), target);
  }
  
  // repeated .resource.ModelMaterial Materials = 21;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->materials(i), target);
  }
  
  // repeated uint32 Indices = 22;
  for (int i = 0; i < this->indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->indices(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Model::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Version = 1 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool TangentsCalculated = 3 [default = false];
    if (has_tangentscalculated()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .resource.ModelElement Elements = 20;
  total_size += 2 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }
  
  // repeated .resource.ModelMaterial Materials = 21;
  total_size += 2 * this->materials_size();
  for (int i = 0; i < this->materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materials(i));
  }
  
  // repeated uint32 Indices = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->indices(i));
    }
    total_size += 2 * this->indices_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  materials_.MergeFrom(from.materials_);
  indices_.MergeFrom(from.indices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tangentscalculated()) {
      set_tangentscalculated(from.tangentscalculated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < materials_size(); i++) {
    if (!this->materials(i).IsInitialized()) return false;
  }
  return true;
}

void Model::Swap(Model* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(name_, other->name_);
    std::swap(tangentscalculated_, other->tangentscalculated_);
    elements_.Swap(&other->elements_);
    materials_.Swap(&other->materials_);
    indices_.Swap(&other->indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Model_descriptor_;
  metadata.reflection = Model_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelGroup::kVersionFieldNumber;
const int ModelGroup::kNameFieldNumber;
const int ModelGroup::kOffsetFieldNumber;
const int ModelGroup::kRotationFieldNumber;
const int ModelGroup::kScaleFieldNumber;
const int ModelGroup::kModelsFieldNumber;
const int ModelGroup::kGroupsFieldNumber;
const int ModelGroup::kTransformationsFieldNumber;
#endif  // !_MSC_VER

ModelGroup::ModelGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelGroup::InitAsDefaultInstance() {
}

ModelGroup::ModelGroup(const ModelGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelGroup::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelGroup::~ModelGroup() {
  SharedDtor();
}

void ModelGroup::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModelGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelGroup_descriptor_;
}

const ModelGroup& ModelGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

ModelGroup* ModelGroup::default_instance_ = NULL;

ModelGroup* ModelGroup::New() const {
  return new ModelGroup;
}

void ModelGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  offset_.Clear();
  rotation_.Clear();
  scale_.Clear();
  models_.Clear();
  groups_.Clear();
  transformations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Version = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Offset;
        break;
      }
      
      // repeated float Offset = 10 [packed = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_offset())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82, input, this->mutable_offset())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Rotation;
        break;
      }
      
      // repeated float Rotation = 11 [packed = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotation())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90, input, this->mutable_rotation())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Scale;
        break;
      }
      
      // repeated float Scale = 12 [packed = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scale())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98, input, this->mutable_scale())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_Models;
        break;
      }
      
      // repeated .resource.Model Models = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Models:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_models()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_Models;
        if (input->ExpectTag(170)) goto parse_Groups;
        break;
      }
      
      // repeated .resource.ModelGroup Groups = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_Groups;
        if (input->ExpectTag(178)) goto parse_Transformations;
        break;
      }
      
      // repeated .resource.StoredMatrix Transformations = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Transformations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transformations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_Transformations;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated float Offset = 10 [packed = true];
  if (this->offset_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_offset_cached_byte_size_);
  }
  for (int i = 0; i < this->offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->offset(i), output);
  }
  
  // repeated float Rotation = 11 [packed = true];
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rotation_cached_byte_size_);
  }
  for (int i = 0; i < this->rotation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->rotation(i), output);
  }
  
  // repeated float Scale = 12 [packed = true];
  if (this->scale_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_scale_cached_byte_size_);
  }
  for (int i = 0; i < this->scale_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->scale(i), output);
  }
  
  // repeated .resource.Model Models = 20;
  for (int i = 0; i < this->models_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->models(i), output);
  }
  
  // repeated .resource.ModelGroup Groups = 21;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->groups(i), output);
  }
  
  // repeated .resource.StoredMatrix Transformations = 22;
  for (int i = 0; i < this->transformations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->transformations(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated float Offset = 10 [packed = true];
  if (this->offset_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _offset_cached_byte_size_, target);
  }
  for (int i = 0; i < this->offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->offset(i), target);
  }
  
  // repeated float Rotation = 11 [packed = true];
  if (this->rotation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rotation_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rotation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->rotation(i), target);
  }
  
  // repeated float Scale = 12 [packed = true];
  if (this->scale_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _scale_cached_byte_size_, target);
  }
  for (int i = 0; i < this->scale_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->scale(i), target);
  }
  
  // repeated .resource.Model Models = 20;
  for (int i = 0; i < this->models_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->models(i), target);
  }
  
  // repeated .resource.ModelGroup Groups = 21;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->groups(i), target);
  }
  
  // repeated .resource.StoredMatrix Transformations = 22;
  for (int i = 0; i < this->transformations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->transformations(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Version = 1 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated float Offset = 10 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->offset_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _offset_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float Rotation = 11 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->rotation_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _rotation_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float Scale = 12 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->scale_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _scale_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated .resource.Model Models = 20;
  total_size += 2 * this->models_size();
  for (int i = 0; i < this->models_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->models(i));
  }
  
  // repeated .resource.ModelGroup Groups = 21;
  total_size += 2 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }
  
  // repeated .resource.StoredMatrix Transformations = 22;
  total_size += 2 * this->transformations_size();
  for (int i = 0; i < this->transformations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transformations(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelGroup::MergeFrom(const ModelGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  offset_.MergeFrom(from.offset_);
  rotation_.MergeFrom(from.rotation_);
  scale_.MergeFrom(from.scale_);
  models_.MergeFrom(from.models_);
  groups_.MergeFrom(from.groups_);
  transformations_.MergeFrom(from.transformations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelGroup::CopyFrom(const ModelGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < models_size(); i++) {
    if (!this->models(i).IsInitialized()) return false;
  }
  for (int i = 0; i < groups_size(); i++) {
    if (!this->groups(i).IsInitialized()) return false;
  }
  return true;
}

void ModelGroup::Swap(ModelGroup* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(name_, other->name_);
    offset_.Swap(&other->offset_);
    rotation_.Swap(&other->rotation_);
    scale_.Swap(&other->scale_);
    models_.Swap(&other->models_);
    groups_.Swap(&other->groups_);
    transformations_.Swap(&other->transformations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelGroup_descriptor_;
  metadata.reflection = ModelGroup_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StageProperty_StagePropertyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageProperty_StagePropertyType_descriptor_;
}
bool StageProperty_StagePropertyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StageProperty_StagePropertyType StageProperty::Unknown;
const StageProperty_StagePropertyType StageProperty::String;
const StageProperty_StagePropertyType StageProperty::Float;
const StageProperty_StagePropertyType StageProperty::Int;
const StageProperty_StagePropertyType StageProperty::StagePropertyType_MIN;
const StageProperty_StagePropertyType StageProperty::StagePropertyType_MAX;
const int StageProperty::StagePropertyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StageProperty::kIdFieldNumber;
const int StageProperty::kTypeFieldNumber;
const int StageProperty::kDataFieldNumber;
#endif  // !_MSC_VER

StageProperty::StageProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageProperty::InitAsDefaultInstance() {
}

StageProperty::StageProperty(const StageProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageProperty::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageProperty::~StageProperty() {
  SharedDtor();
}

void StageProperty::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void StageProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageProperty_descriptor_;
}

const StageProperty& StageProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

StageProperty* StageProperty::default_instance_ = NULL;

StageProperty* StageProperty::New() const {
  return new StageProperty;
}

void StageProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    type_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // required .resource.StageProperty.StagePropertyType Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::resource::StageProperty_StagePropertyType_IsValid(value)) {
            set_type(static_cast< ::resource::StageProperty_StagePropertyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Data;
        break;
      }
      
      // required bytes Data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required .resource.StageProperty.StagePropertyType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // required bytes Data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required .resource.StageProperty.StagePropertyType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // required bytes Data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required .resource.StageProperty.StagePropertyType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required bytes Data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageProperty::MergeFrom(const StageProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageProperty::CopyFrom(const StageProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StageProperty::Swap(StageProperty* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageProperty_descriptor_;
  metadata.reflection = StageProperty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageCamera::kIdFieldNumber;
const int StageCamera::kFieldOfViewFieldNumber;
const int StageCamera::kLayerFlagsFieldNumber;
const int StageCamera::kPropertiesFieldNumber;
const int StageCamera::kPositionFieldNumber;
const int StageCamera::kRotationFieldNumber;
#endif  // !_MSC_VER

StageCamera::StageCamera()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageCamera::InitAsDefaultInstance() {
}

StageCamera::StageCamera(const StageCamera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageCamera::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fieldofview_ = 0;
  layerflags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageCamera::~StageCamera() {
  SharedDtor();
}

void StageCamera::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StageCamera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageCamera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageCamera_descriptor_;
}

const StageCamera& StageCamera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

StageCamera* StageCamera::default_instance_ = NULL;

StageCamera* StageCamera::New() const {
  return new StageCamera;
}

void StageCamera::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    fieldofview_ = 0;
    layerflags_ = 0;
  }
  properties_.Clear();
  position_.Clear();
  rotation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageCamera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_FieldOfView;
        break;
      }
      
      // required float FieldOfView = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_FieldOfView:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fieldofview_)));
          set_has_fieldofview();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LayerFlags;
        break;
      }
      
      // optional int32 LayerFlags = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LayerFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layerflags_)));
          set_has_layerflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Properties;
        break;
      }
      
      // repeated .resource.StageProperty Properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Properties;
        if (input->ExpectTag(162)) goto parse_Position;
        break;
      }
      
      // repeated float Position = 20 [packed = true];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 162, input, this->mutable_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_Rotation;
        break;
      }
      
      // repeated float Rotation = 21 [packed = true];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotation())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 170, input, this->mutable_rotation())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageCamera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required float FieldOfView = 2;
  if (has_fieldofview()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fieldofview(), output);
  }
  
  // optional int32 LayerFlags = 10;
  if (has_layerflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->layerflags(), output);
  }
  
  // repeated .resource.StageProperty Properties = 11;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->properties(i), output);
  }
  
  // repeated float Position = 20 [packed = true];
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
  }
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->position(i), output);
  }
  
  // repeated float Rotation = 21 [packed = true];
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(21, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rotation_cached_byte_size_);
  }
  for (int i = 0; i < this->rotation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->rotation(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageCamera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required float FieldOfView = 2;
  if (has_fieldofview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fieldofview(), target);
  }
  
  // optional int32 LayerFlags = 10;
  if (has_layerflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->layerflags(), target);
  }
  
  // repeated .resource.StageProperty Properties = 11;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->properties(i), target);
  }
  
  // repeated float Position = 20 [packed = true];
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->position(i), target);
  }
  
  // repeated float Rotation = 21 [packed = true];
  if (this->rotation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rotation_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rotation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->rotation(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageCamera::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required float FieldOfView = 2;
    if (has_fieldofview()) {
      total_size += 1 + 4;
    }
    
    // optional int32 LayerFlags = 10;
    if (has_layerflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layerflags());
    }
    
  }
  // repeated .resource.StageProperty Properties = 11;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }
  
  // repeated float Position = 20 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->position_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _position_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float Rotation = 21 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->rotation_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _rotation_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageCamera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageCamera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageCamera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageCamera::MergeFrom(const StageCamera& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  position_.MergeFrom(from.position_);
  rotation_.MergeFrom(from.rotation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fieldofview()) {
      set_fieldofview(from.fieldofview());
    }
    if (from.has_layerflags()) {
      set_layerflags(from.layerflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageCamera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageCamera::CopyFrom(const StageCamera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageCamera::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  return true;
}

void StageCamera::Swap(StageCamera* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(fieldofview_, other->fieldofview_);
    std::swap(layerflags_, other->layerflags_);
    properties_.Swap(&other->properties_);
    position_.Swap(&other->position_);
    rotation_.Swap(&other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageCamera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageCamera_descriptor_;
  metadata.reflection = StageCamera_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StageLight_StageLightType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageLight_StageLightType_descriptor_;
}
bool StageLight_StageLightType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StageLight_StageLightType StageLight::Unknown;
const StageLight_StageLightType StageLight::Spot;
const StageLight_StageLightType StageLight::Directional;
const StageLight_StageLightType StageLight::Point;
const StageLight_StageLightType StageLight::StageLightType_MIN;
const StageLight_StageLightType StageLight::StageLightType_MAX;
const int StageLight::StageLightType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StageLight::kIdFieldNumber;
const int StageLight::kTypeFieldNumber;
const int StageLight::kRadiusFieldNumber;
const int StageLight::kIntensityFieldNumber;
const int StageLight::kAmbientIntensityFieldNumber;
const int StageLight::kSpotSizeFieldNumber;
const int StageLight::kAngleFieldNumber;
const int StageLight::kLayerFlagsFieldNumber;
const int StageLight::kPropertiesFieldNumber;
const int StageLight::kLocationFieldNumber;
const int StageLight::kDirectionFieldNumber;
const int StageLight::kColorFieldNumber;
#endif  // !_MSC_VER

StageLight::StageLight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageLight::InitAsDefaultInstance() {
}

StageLight::StageLight(const StageLight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageLight::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  radius_ = 0;
  intensity_ = 0;
  ambientintensity_ = 0;
  spotsize_ = 0;
  angle_ = 0;
  layerflags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageLight::~StageLight() {
  SharedDtor();
}

void StageLight::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StageLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageLight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageLight_descriptor_;
}

const StageLight& StageLight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

StageLight* StageLight::default_instance_ = NULL;

StageLight* StageLight::New() const {
  return new StageLight;
}

void StageLight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    type_ = 0;
    radius_ = 0;
    intensity_ = 0;
    ambientintensity_ = 0;
    spotsize_ = 0;
    angle_ = 0;
    layerflags_ = 0;
  }
  properties_.Clear();
  location_.Clear();
  direction_.Clear();
  color_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // required .resource.StageLight.StageLightType Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::resource::StageLight_StageLightType_IsValid(value)) {
            set_type(static_cast< ::resource::StageLight_StageLightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Radius;
        break;
      }
      
      // optional float Radius = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Intensity;
        break;
      }
      
      // optional float Intensity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
          set_has_intensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_AmbientIntensity;
        break;
      }
      
      // optional float AmbientIntensity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AmbientIntensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ambientintensity_)));
          set_has_ambientintensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_SpotSize;
        break;
      }
      
      // optional float SpotSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SpotSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spotsize_)));
          set_has_spotsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_Angle;
        break;
      }
      
      // optional float Angle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LayerFlags;
        break;
      }
      
      // optional int32 LayerFlags = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LayerFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layerflags_)));
          set_has_layerflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Properties;
        break;
      }
      
      // repeated .resource.StageProperty Properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Properties;
        if (input->ExpectTag(162)) goto parse_Location;
        break;
      }
      
      // repeated float Location = 20 [packed = true];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_location())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 162, input, this->mutable_location())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_Direction;
        break;
      }
      
      // repeated float Direction = 21 [packed = true];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_direction())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 170, input, this->mutable_direction())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_Color;
        break;
      }
      
      // repeated float Color = 22 [packed = true];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 178, input, this->mutable_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required .resource.StageLight.StageLightType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional float Radius = 3;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }
  
  // optional float Intensity = 4;
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->intensity(), output);
  }
  
  // optional float AmbientIntensity = 5;
  if (has_ambientintensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ambientintensity(), output);
  }
  
  // optional float SpotSize = 6;
  if (has_spotsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->spotsize(), output);
  }
  
  // optional float Angle = 7;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->angle(), output);
  }
  
  // optional int32 LayerFlags = 10;
  if (has_layerflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->layerflags(), output);
  }
  
  // repeated .resource.StageProperty Properties = 11;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->properties(i), output);
  }
  
  // repeated float Location = 20 [packed = true];
  if (this->location_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_location_cached_byte_size_);
  }
  for (int i = 0; i < this->location_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->location(i), output);
  }
  
  // repeated float Direction = 21 [packed = true];
  if (this->direction_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(21, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_direction_cached_byte_size_);
  }
  for (int i = 0; i < this->direction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->direction(i), output);
  }
  
  // repeated float Color = 22 [packed = true];
  if (this->color_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(22, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_color_cached_byte_size_);
  }
  for (int i = 0; i < this->color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->color(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageLight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required .resource.StageLight.StageLightType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional float Radius = 3;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }
  
  // optional float Intensity = 4;
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->intensity(), target);
  }
  
  // optional float AmbientIntensity = 5;
  if (has_ambientintensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ambientintensity(), target);
  }
  
  // optional float SpotSize = 6;
  if (has_spotsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->spotsize(), target);
  }
  
  // optional float Angle = 7;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->angle(), target);
  }
  
  // optional int32 LayerFlags = 10;
  if (has_layerflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->layerflags(), target);
  }
  
  // repeated .resource.StageProperty Properties = 11;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->properties(i), target);
  }
  
  // repeated float Location = 20 [packed = true];
  if (this->location_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _location_cached_byte_size_, target);
  }
  for (int i = 0; i < this->location_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->location(i), target);
  }
  
  // repeated float Direction = 21 [packed = true];
  if (this->direction_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _direction_cached_byte_size_, target);
  }
  for (int i = 0; i < this->direction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->direction(i), target);
  }
  
  // repeated float Color = 22 [packed = true];
  if (this->color_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _color_cached_byte_size_, target);
  }
  for (int i = 0; i < this->color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->color(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageLight::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required .resource.StageLight.StageLightType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional float Radius = 3;
    if (has_radius()) {
      total_size += 1 + 4;
    }
    
    // optional float Intensity = 4;
    if (has_intensity()) {
      total_size += 1 + 4;
    }
    
    // optional float AmbientIntensity = 5;
    if (has_ambientintensity()) {
      total_size += 1 + 4;
    }
    
    // optional float SpotSize = 6;
    if (has_spotsize()) {
      total_size += 1 + 4;
    }
    
    // optional float Angle = 7;
    if (has_angle()) {
      total_size += 1 + 4;
    }
    
    // optional int32 LayerFlags = 10;
    if (has_layerflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layerflags());
    }
    
  }
  // repeated .resource.StageProperty Properties = 11;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }
  
  // repeated float Location = 20 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->location_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _location_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float Direction = 21 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->direction_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _direction_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float Color = 22 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->color_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _color_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageLight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageLight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageLight::MergeFrom(const StageLight& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  location_.MergeFrom(from.location_);
  direction_.MergeFrom(from.direction_);
  color_.MergeFrom(from.color_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_intensity()) {
      set_intensity(from.intensity());
    }
    if (from.has_ambientintensity()) {
      set_ambientintensity(from.ambientintensity());
    }
    if (from.has_spotsize()) {
      set_spotsize(from.spotsize());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_layerflags()) {
      set_layerflags(from.layerflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageLight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageLight::CopyFrom(const StageLight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  return true;
}

void StageLight::Swap(StageLight* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(radius_, other->radius_);
    std::swap(intensity_, other->intensity_);
    std::swap(ambientintensity_, other->ambientintensity_);
    std::swap(spotsize_, other->spotsize_);
    std::swap(angle_, other->angle_);
    std::swap(layerflags_, other->layerflags_);
    properties_.Swap(&other->properties_);
    location_.Swap(&other->location_);
    direction_.Swap(&other->direction_);
    color_.Swap(&other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageLight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageLight_descriptor_;
  metadata.reflection = StageLight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageModel::kIdFieldNumber;
const int StageModel::kReferenceIdFieldNumber;
const int StageModel::kLayerFlagsFieldNumber;
const int StageModel::kPropertiesFieldNumber;
const int StageModel::kTranslationFieldNumber;
const int StageModel::kRotationFieldNumber;
const int StageModel::kScaleFieldNumber;
const int StageModel::kChildrenFieldNumber;
#endif  // !_MSC_VER

StageModel::StageModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageModel::InitAsDefaultInstance() {
}

StageModel::StageModel(const StageModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageModel::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  referenceid_ = 0;
  layerflags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageModel::~StageModel() {
  SharedDtor();
}

void StageModel::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StageModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageModel_descriptor_;
}

const StageModel& StageModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

StageModel* StageModel::default_instance_ = NULL;

StageModel* StageModel::New() const {
  return new StageModel;
}

void StageModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    referenceid_ = 0;
    layerflags_ = 0;
  }
  properties_.Clear();
  translation_.Clear();
  rotation_.Clear();
  scale_.Clear();
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ReferenceId;
        break;
      }
      
      // optional int32 ReferenceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReferenceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &referenceid_)));
          set_has_referenceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LayerFlags;
        break;
      }
      
      // optional int32 LayerFlags = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LayerFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layerflags_)));
          set_has_layerflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Properties;
        break;
      }
      
      // repeated .resource.StageProperty Properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Properties;
        if (input->ExpectTag(162)) goto parse_Translation;
        break;
      }
      
      // repeated float Translation = 20 [packed = true];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Translation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_translation())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 162, input, this->mutable_translation())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_Rotation;
        break;
      }
      
      // repeated float Rotation = 21 [packed = true];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotation())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 170, input, this->mutable_rotation())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_Scale;
        break;
      }
      
      // repeated float Scale = 22 [packed = true];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scale())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 178, input, this->mutable_scale())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_Children;
        break;
      }
      
      // repeated .resource.StageModel Children = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_Children;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // optional int32 ReferenceId = 2;
  if (has_referenceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->referenceid(), output);
  }
  
  // optional int32 LayerFlags = 10;
  if (has_layerflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->layerflags(), output);
  }
  
  // repeated .resource.StageProperty Properties = 11;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->properties(i), output);
  }
  
  // repeated float Translation = 20 [packed = true];
  if (this->translation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_translation_cached_byte_size_);
  }
  for (int i = 0; i < this->translation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->translation(i), output);
  }
  
  // repeated float Rotation = 21 [packed = true];
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(21, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rotation_cached_byte_size_);
  }
  for (int i = 0; i < this->rotation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->rotation(i), output);
  }
  
  // repeated float Scale = 22 [packed = true];
  if (this->scale_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(22, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_scale_cached_byte_size_);
  }
  for (int i = 0; i < this->scale_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->scale(i), output);
  }
  
  // repeated .resource.StageModel Children = 30;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->children(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // optional int32 ReferenceId = 2;
  if (has_referenceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->referenceid(), target);
  }
  
  // optional int32 LayerFlags = 10;
  if (has_layerflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->layerflags(), target);
  }
  
  // repeated .resource.StageProperty Properties = 11;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->properties(i), target);
  }
  
  // repeated float Translation = 20 [packed = true];
  if (this->translation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _translation_cached_byte_size_, target);
  }
  for (int i = 0; i < this->translation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->translation(i), target);
  }
  
  // repeated float Rotation = 21 [packed = true];
  if (this->rotation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rotation_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rotation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->rotation(i), target);
  }
  
  // repeated float Scale = 22 [packed = true];
  if (this->scale_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _scale_cached_byte_size_, target);
  }
  for (int i = 0; i < this->scale_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->scale(i), target);
  }
  
  // repeated .resource.StageModel Children = 30;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->children(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageModel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional int32 ReferenceId = 2;
    if (has_referenceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->referenceid());
    }
    
    // optional int32 LayerFlags = 10;
    if (has_layerflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layerflags());
    }
    
  }
  // repeated .resource.StageProperty Properties = 11;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }
  
  // repeated float Translation = 20 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->translation_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _translation_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float Rotation = 21 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->rotation_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _rotation_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float Scale = 22 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->scale_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _scale_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated .resource.StageModel Children = 30;
  total_size += 2 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageModel::MergeFrom(const StageModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  translation_.MergeFrom(from.translation_);
  rotation_.MergeFrom(from.rotation_);
  scale_.MergeFrom(from.scale_);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_referenceid()) {
      set_referenceid(from.referenceid());
    }
    if (from.has_layerflags()) {
      set_layerflags(from.layerflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageModel::CopyFrom(const StageModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void StageModel::Swap(StageModel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(referenceid_, other->referenceid_);
    std::swap(layerflags_, other->layerflags_);
    properties_.Swap(&other->properties_);
    translation_.Swap(&other->translation_);
    rotation_.Swap(&other->rotation_);
    scale_.Swap(&other->scale_);
    children_.Swap(&other->children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageModel_descriptor_;
  metadata.reflection = StageModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stage::kVersionFieldNumber;
const int Stage::kReferencesFieldNumber;
const int Stage::kCamerasFieldNumber;
const int Stage::kLightsFieldNumber;
const int Stage::kModelsFieldNumber;
#endif  // !_MSC_VER

Stage::Stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stage::InitAsDefaultInstance() {
}

Stage::Stage(const Stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stage::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stage::~Stage() {
  SharedDtor();
}

void Stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stage_descriptor_;
}

const Stage& Stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

Stage* Stage::default_instance_ = NULL;

Stage* Stage::New() const {
  return new Stage;
}

void Stage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1;
  }
  references_.Clear();
  cameras_.Clear();
  lights_.Clear();
  models_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Version = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_References;
        break;
      }
      
      // repeated string References = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_References:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_references()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->references(0).data(), this->references(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_References;
        if (input->ExpectTag(82)) goto parse_Cameras;
        break;
      }
      
      // repeated .resource.StageCamera Cameras = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Cameras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameras()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Cameras;
        if (input->ExpectTag(90)) goto parse_Lights;
        break;
      }
      
      // repeated .resource.StageLight Lights = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Lights;
        if (input->ExpectTag(98)) goto parse_Models;
        break;
      }
      
      // repeated .resource.StageModel Models = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Models:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_models()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Models;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // repeated string References = 9;
  for (int i = 0; i < this->references_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->references(i).data(), this->references(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->references(i), output);
  }
  
  // repeated .resource.StageCamera Cameras = 10;
  for (int i = 0; i < this->cameras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->cameras(i), output);
  }
  
  // repeated .resource.StageLight Lights = 11;
  for (int i = 0; i < this->lights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->lights(i), output);
  }
  
  // repeated .resource.StageModel Models = 12;
  for (int i = 0; i < this->models_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->models(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // repeated string References = 9;
  for (int i = 0; i < this->references_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->references(i).data(), this->references(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->references(i), target);
  }
  
  // repeated .resource.StageCamera Cameras = 10;
  for (int i = 0; i < this->cameras_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->cameras(i), target);
  }
  
  // repeated .resource.StageLight Lights = 11;
  for (int i = 0; i < this->lights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->lights(i), target);
  }
  
  // repeated .resource.StageModel Models = 12;
  for (int i = 0; i < this->models_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->models(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Version = 1 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
  }
  // repeated string References = 9;
  total_size += 1 * this->references_size();
  for (int i = 0; i < this->references_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->references(i));
  }
  
  // repeated .resource.StageCamera Cameras = 10;
  total_size += 1 * this->cameras_size();
  for (int i = 0; i < this->cameras_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameras(i));
  }
  
  // repeated .resource.StageLight Lights = 11;
  total_size += 1 * this->lights_size();
  for (int i = 0; i < this->lights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lights(i));
  }
  
  // repeated .resource.StageModel Models = 12;
  total_size += 1 * this->models_size();
  for (int i = 0; i < this->models_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->models(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stage::MergeFrom(const Stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  references_.MergeFrom(from.references_);
  cameras_.MergeFrom(from.cameras_);
  lights_.MergeFrom(from.lights_);
  models_.MergeFrom(from.models_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stage::CopyFrom(const Stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < cameras_size(); i++) {
    if (!this->cameras(i).IsInitialized()) return false;
  }
  for (int i = 0; i < lights_size(); i++) {
    if (!this->lights(i).IsInitialized()) return false;
  }
  for (int i = 0; i < models_size(); i++) {
    if (!this->models(i).IsInitialized()) return false;
  }
  return true;
}

void Stage::Swap(Stage* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    references_.Swap(&other->references_);
    cameras_.Swap(&other->cameras_);
    lights_.Swap(&other->lights_);
    models_.Swap(&other->models_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stage_descriptor_;
  metadata.reflection = Stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Script::kVersionFieldNumber;
const int Script::kScriptDataFieldNumber;
#endif  // !_MSC_VER

Script::Script()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Script::InitAsDefaultInstance() {
}

Script::Script(const Script& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Script::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1;
  scriptdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Script::~Script() {
  SharedDtor();
}

void Script::SharedDtor() {
  if (scriptdata_ != &::google::protobuf::internal::kEmptyString) {
    delete scriptdata_;
  }
  if (this != default_instance_) {
  }
}

void Script::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Script::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Script_descriptor_;
}

const Script& Script::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

Script* Script::default_instance_ = NULL;

Script* Script::New() const {
  return new Script;
}

void Script::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1;
    if (has_scriptdata()) {
      if (scriptdata_ != &::google::protobuf::internal::kEmptyString) {
        scriptdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Script::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Version = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ScriptData;
        break;
      }
      
      // required bytes ScriptData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScriptData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_scriptdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Script::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // required bytes ScriptData = 2;
  if (has_scriptdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->scriptdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Script::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // required bytes ScriptData = 2;
  if (has_scriptdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->scriptdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Script::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Version = 1 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required bytes ScriptData = 2;
    if (has_scriptdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->scriptdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Script::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Script* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Script*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Script::MergeFrom(const Script& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_scriptdata()) {
      set_scriptdata(from.scriptdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Script::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Script::CopyFrom(const Script& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Script::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Script::Swap(Script* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(scriptdata_, other->scriptdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Script::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Script_descriptor_;
  metadata.reflection = Script_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlAttributeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CsamlAttribute_CsamlAttributeType_descriptor_;
}
bool CsamlAttribute_CsamlAttributeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CsamlAttribute_CsamlAttributeType CsamlAttribute::Unknown;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::ControlName;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::Width;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::Height;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::LayoutMode;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::Mode;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::Text;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::Source;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::TypeAttribute;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::Left;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::Top;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::Right;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::Bottom;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::HorizontalAlignment;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::VerticalAlignment;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::CsamlAttributeType_MIN;
const CsamlAttribute_CsamlAttributeType CsamlAttribute::CsamlAttributeType_MAX;
const int CsamlAttribute::CsamlAttributeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlAttributeValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CsamlAttribute_CsamlAttributeValueType_descriptor_;
}
bool CsamlAttribute_CsamlAttributeValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CsamlAttribute_CsamlAttributeValueType CsamlAttribute::String;
const CsamlAttribute_CsamlAttributeValueType CsamlAttribute::Int;
const CsamlAttribute_CsamlAttributeValueType CsamlAttribute::Float;
const CsamlAttribute_CsamlAttributeValueType CsamlAttribute::CsamlAttributeValueType_MIN;
const CsamlAttribute_CsamlAttributeValueType CsamlAttribute::CsamlAttributeValueType_MAX;
const int CsamlAttribute::CsamlAttributeValueType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlLayoutMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CsamlAttribute_CsamlLayoutMode_descriptor_;
}
bool CsamlAttribute_CsamlLayoutMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CsamlAttribute_CsamlLayoutMode CsamlAttribute::LayoutAbsolute;
const CsamlAttribute_CsamlLayoutMode CsamlAttribute::LayoutRelative;
const CsamlAttribute_CsamlLayoutMode CsamlAttribute::CsamlLayoutMode_MIN;
const CsamlAttribute_CsamlLayoutMode CsamlAttribute::CsamlLayoutMode_MAX;
const int CsamlAttribute::CsamlLayoutMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlControlSizingMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CsamlAttribute_CsamlControlSizingMode_descriptor_;
}
bool CsamlAttribute_CsamlControlSizingMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CsamlAttribute_CsamlControlSizingMode CsamlAttribute::SizeNormal;
const CsamlAttribute_CsamlControlSizingMode CsamlAttribute::SizeStretch;
const CsamlAttribute_CsamlControlSizingMode CsamlAttribute::CsamlControlSizingMode_MIN;
const CsamlAttribute_CsamlControlSizingMode CsamlAttribute::CsamlControlSizingMode_MAX;
const int CsamlAttribute::CsamlControlSizingMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlHorizontalAlignmentEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CsamlAttribute_CsamlHorizontalAlignmentEnum_descriptor_;
}
bool CsamlAttribute_CsamlHorizontalAlignmentEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CsamlAttribute_CsamlHorizontalAlignmentEnum CsamlAttribute::AlignLeft;
const CsamlAttribute_CsamlHorizontalAlignmentEnum CsamlAttribute::AlignCenterH;
const CsamlAttribute_CsamlHorizontalAlignmentEnum CsamlAttribute::AlignRight;
const CsamlAttribute_CsamlHorizontalAlignmentEnum CsamlAttribute::CsamlHorizontalAlignmentEnum_MIN;
const CsamlAttribute_CsamlHorizontalAlignmentEnum CsamlAttribute::CsamlHorizontalAlignmentEnum_MAX;
const int CsamlAttribute::CsamlHorizontalAlignmentEnum_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CsamlAttribute_CsamlVerticalAlignmentEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CsamlAttribute_CsamlVerticalAlignmentEnum_descriptor_;
}
bool CsamlAttribute_CsamlVerticalAlignmentEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CsamlAttribute_CsamlVerticalAlignmentEnum CsamlAttribute::AlignTop;
const CsamlAttribute_CsamlVerticalAlignmentEnum CsamlAttribute::AlignCenterV;
const CsamlAttribute_CsamlVerticalAlignmentEnum CsamlAttribute::AlignBottom;
const CsamlAttribute_CsamlVerticalAlignmentEnum CsamlAttribute::CsamlVerticalAlignmentEnum_MIN;
const CsamlAttribute_CsamlVerticalAlignmentEnum CsamlAttribute::CsamlVerticalAlignmentEnum_MAX;
const int CsamlAttribute::CsamlVerticalAlignmentEnum_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CsamlAttribute::kTypeFieldNumber;
const int CsamlAttribute::kValueTypeFieldNumber;
const int CsamlAttribute::kValueStringFieldNumber;
const int CsamlAttribute::kValueIntFieldNumber;
const int CsamlAttribute::kValueFloatFieldNumber;
#endif  // !_MSC_VER

CsamlAttribute::CsamlAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CsamlAttribute::InitAsDefaultInstance() {
}

CsamlAttribute::CsamlAttribute(const CsamlAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CsamlAttribute::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  valuetype_ = 0;
  valuestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  valueint_ = 0;
  valuefloat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CsamlAttribute::~CsamlAttribute() {
  SharedDtor();
}

void CsamlAttribute::SharedDtor() {
  if (valuestring_ != &::google::protobuf::internal::kEmptyString) {
    delete valuestring_;
  }
  if (this != default_instance_) {
  }
}

void CsamlAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CsamlAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CsamlAttribute_descriptor_;
}

const CsamlAttribute& CsamlAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

CsamlAttribute* CsamlAttribute::default_instance_ = NULL;

CsamlAttribute* CsamlAttribute::New() const {
  return new CsamlAttribute;
}

void CsamlAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    valuetype_ = 0;
    if (has_valuestring()) {
      if (valuestring_ != &::google::protobuf::internal::kEmptyString) {
        valuestring_->clear();
      }
    }
    valueint_ = 0;
    valuefloat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CsamlAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .resource.CsamlAttribute.CsamlAttributeType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::resource::CsamlAttribute_CsamlAttributeType_IsValid(value)) {
            set_type(static_cast< ::resource::CsamlAttribute_CsamlAttributeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ValueType;
        break;
      }
      
      // required .resource.CsamlAttribute.CsamlAttributeValueType ValueType = 2 [default = String];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ValueType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::resource::CsamlAttribute_CsamlAttributeValueType_IsValid(value)) {
            set_valuetype(static_cast< ::resource::CsamlAttribute_CsamlAttributeValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ValueString;
        break;
      }
      
      // optional string ValueString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ValueString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valuestring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->valuestring().data(), this->valuestring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ValueInt;
        break;
      }
      
      // optional int32 ValueInt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ValueInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valueint_)));
          set_has_valueint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_ValueFloat;
        break;
      }
      
      // optional float ValueFloat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ValueFloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &valuefloat_)));
          set_has_valuefloat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CsamlAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .resource.CsamlAttribute.CsamlAttributeType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required .resource.CsamlAttribute.CsamlAttributeValueType ValueType = 2 [default = String];
  if (has_valuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->valuetype(), output);
  }
  
  // optional string ValueString = 3;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->valuestring(), output);
  }
  
  // optional int32 ValueInt = 4;
  if (has_valueint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->valueint(), output);
  }
  
  // optional float ValueFloat = 5;
  if (has_valuefloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->valuefloat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CsamlAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .resource.CsamlAttribute.CsamlAttributeType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required .resource.CsamlAttribute.CsamlAttributeValueType ValueType = 2 [default = String];
  if (has_valuetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->valuetype(), target);
  }
  
  // optional string ValueString = 3;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->valuestring(), target);
  }
  
  // optional int32 ValueInt = 4;
  if (has_valueint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->valueint(), target);
  }
  
  // optional float ValueFloat = 5;
  if (has_valuefloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->valuefloat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CsamlAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .resource.CsamlAttribute.CsamlAttributeType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required .resource.CsamlAttribute.CsamlAttributeValueType ValueType = 2 [default = String];
    if (has_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->valuetype());
    }
    
    // optional string ValueString = 3;
    if (has_valuestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valuestring());
    }
    
    // optional int32 ValueInt = 4;
    if (has_valueint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valueint());
    }
    
    // optional float ValueFloat = 5;
    if (has_valuefloat()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CsamlAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CsamlAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CsamlAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CsamlAttribute::MergeFrom(const CsamlAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_valuetype()) {
      set_valuetype(from.valuetype());
    }
    if (from.has_valuestring()) {
      set_valuestring(from.valuestring());
    }
    if (from.has_valueint()) {
      set_valueint(from.valueint());
    }
    if (from.has_valuefloat()) {
      set_valuefloat(from.valuefloat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CsamlAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CsamlAttribute::CopyFrom(const CsamlAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsamlAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CsamlAttribute::Swap(CsamlAttribute* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(valuetype_, other->valuetype_);
    std::swap(valuestring_, other->valuestring_);
    std::swap(valueint_, other->valueint_);
    std::swap(valuefloat_, other->valuefloat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CsamlAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CsamlAttribute_descriptor_;
  metadata.reflection = CsamlAttribute_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CsamlNode_CsamlNodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CsamlNode_CsamlNodeType_descriptor_;
}
bool CsamlNode_CsamlNodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CsamlNode_CsamlNodeType CsamlNode::Unknown;
const CsamlNode_CsamlNodeType CsamlNode::Frame;
const CsamlNode_CsamlNodeType CsamlNode::Image;
const CsamlNode_CsamlNodeType CsamlNode::SolidText;
const CsamlNode_CsamlNodeType CsamlNode::DynamicText;
const CsamlNode_CsamlNodeType CsamlNode::Console;
const CsamlNode_CsamlNodeType CsamlNode::Page;
const CsamlNode_CsamlNodeType CsamlNode::CsamlNodeType_MIN;
const CsamlNode_CsamlNodeType CsamlNode::CsamlNodeType_MAX;
const int CsamlNode::CsamlNodeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CsamlNode::kTypeFieldNumber;
const int CsamlNode::kAttributesFieldNumber;
const int CsamlNode::kChildrenFieldNumber;
#endif  // !_MSC_VER

CsamlNode::CsamlNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CsamlNode::InitAsDefaultInstance() {
}

CsamlNode::CsamlNode(const CsamlNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CsamlNode::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CsamlNode::~CsamlNode() {
  SharedDtor();
}

void CsamlNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CsamlNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CsamlNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CsamlNode_descriptor_;
}

const CsamlNode& CsamlNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

CsamlNode* CsamlNode::default_instance_ = NULL;

CsamlNode* CsamlNode::New() const {
  return new CsamlNode;
}

void CsamlNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  attributes_.Clear();
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CsamlNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .resource.CsamlNode.CsamlNodeType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::resource::CsamlNode_CsamlNodeType_IsValid(value)) {
            set_type(static_cast< ::resource::CsamlNode_CsamlNodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Attributes;
        break;
      }
      
      // repeated .resource.CsamlAttribute Attributes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Attributes;
        if (input->ExpectTag(26)) goto parse_Children;
        break;
      }
      
      // repeated .resource.CsamlNode Children = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Children;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CsamlNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .resource.CsamlNode.CsamlNodeType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // repeated .resource.CsamlAttribute Attributes = 2;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attributes(i), output);
  }
  
  // repeated .resource.CsamlNode Children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->children(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CsamlNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .resource.CsamlNode.CsamlNodeType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // repeated .resource.CsamlAttribute Attributes = 2;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attributes(i), target);
  }
  
  // repeated .resource.CsamlNode Children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->children(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CsamlNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .resource.CsamlNode.CsamlNodeType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated .resource.CsamlAttribute Attributes = 2;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }
  
  // repeated .resource.CsamlNode Children = 3;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CsamlNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CsamlNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CsamlNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CsamlNode::MergeFrom(const CsamlNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CsamlNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CsamlNode::CopyFrom(const CsamlNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsamlNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void CsamlNode::Swap(CsamlNode* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    attributes_.Swap(&other->attributes_);
    children_.Swap(&other->children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CsamlNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CsamlNode_descriptor_;
  metadata.reflection = CsamlNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Csaml::kNodesFieldNumber;
#endif  // !_MSC_VER

Csaml::Csaml()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Csaml::InitAsDefaultInstance() {
}

Csaml::Csaml(const Csaml& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Csaml::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Csaml::~Csaml() {
  SharedDtor();
}

void Csaml::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Csaml::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Csaml::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Csaml_descriptor_;
}

const Csaml& Csaml::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

Csaml* Csaml::default_instance_ = NULL;

Csaml* Csaml::New() const {
  return new Csaml;
}

void Csaml::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Csaml::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .resource.CsamlNode Nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Csaml::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .resource.CsamlNode Nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Csaml::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .resource.CsamlNode Nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Csaml::ByteSize() const {
  int total_size = 0;
  
  // repeated .resource.CsamlNode Nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Csaml::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Csaml* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Csaml*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Csaml::MergeFrom(const Csaml& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Csaml::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Csaml::CopyFrom(const Csaml& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Csaml::IsInitialized() const {
  
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void Csaml::Swap(Csaml* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Csaml::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Csaml_descriptor_;
  metadata.reflection = Csaml_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInterface::kVersionFieldNumber;
const int UserInterface::kCsamlFieldNumber;
const int UserInterface::kScriptFieldNumber;
#endif  // !_MSC_VER

UserInterface::UserInterface()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInterface::InitAsDefaultInstance() {
  csaml_ = const_cast< ::resource::Csaml*>(&::resource::Csaml::default_instance());
  script_ = const_cast< ::resource::Script*>(&::resource::Script::default_instance());
}

UserInterface::UserInterface(const UserInterface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInterface::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1;
  csaml_ = NULL;
  script_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInterface::~UserInterface() {
  SharedDtor();
}

void UserInterface::SharedDtor() {
  if (this != default_instance_) {
    delete csaml_;
    delete script_;
  }
}

void UserInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInterface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInterface_descriptor_;
}

const UserInterface& UserInterface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protobuf_2fresource_2eproto();  return *default_instance_;
}

UserInterface* UserInterface::default_instance_ = NULL;

UserInterface* UserInterface::New() const {
  return new UserInterface;
}

void UserInterface::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1;
    if (has_csaml()) {
      if (csaml_ != NULL) csaml_->::resource::Csaml::Clear();
    }
    if (has_script()) {
      if (script_ != NULL) script_->::resource::Script::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Version = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Csaml;
        break;
      }
      
      // required .resource.Csaml Csaml = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Csaml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_csaml()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Script;
        break;
      }
      
      // required .resource.Script Script = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_script()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // required .resource.Csaml Csaml = 2;
  if (has_csaml()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->csaml(), output);
  }
  
  // required .resource.Script Script = 3;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->script(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInterface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Version = 1 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // required .resource.Csaml Csaml = 2;
  if (has_csaml()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->csaml(), target);
  }
  
  // required .resource.Script Script = 3;
  if (has_script()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->script(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInterface::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Version = 1 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required .resource.Csaml Csaml = 2;
    if (has_csaml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->csaml());
    }
    
    // required .resource.Script Script = 3;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->script());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInterface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInterface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInterface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInterface::MergeFrom(const UserInterface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_csaml()) {
      mutable_csaml()->::resource::Csaml::MergeFrom(from.csaml());
    }
    if (from.has_script()) {
      mutable_script()->::resource::Script::MergeFrom(from.script());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInterface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInterface::CopyFrom(const UserInterface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInterface::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_csaml()) {
    if (!this->csaml().IsInitialized()) return false;
  }
  if (has_script()) {
    if (!this->script().IsInitialized()) return false;
  }
  return true;
}

void UserInterface::Swap(UserInterface* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(csaml_, other->csaml_);
    std::swap(script_, other->script_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInterface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInterface_descriptor_;
  metadata.reflection = UserInterface_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace resource

// @@protoc_insertion_point(global_scope)
