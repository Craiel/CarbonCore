// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protobuf/network.proto

#ifndef PROTOBUF_Protobuf_2fnetwork_2eproto__INCLUDED
#define PROTOBUF_Protobuf_2fnetwork_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "google/protobuf/csharp_options.pb.h"
// @@protoc_insertion_point(includes)

namespace network {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Protobuf_2fnetwork_2eproto();
void protobuf_AssignDesc_Protobuf_2fnetwork_2eproto();
void protobuf_ShutdownFile_Protobuf_2fnetwork_2eproto();

class Header;
class Client;
class Alive;
class Connect;
class Disconnect;

enum Header_MessageType {
  Header_MessageType_Unknown = 0,
  Header_MessageType_Alive = 1,
  Header_MessageType_Connect = 2,
  Header_MessageType_Disconnect = 3
};
bool Header_MessageType_IsValid(int value);
const Header_MessageType Header_MessageType_MessageType_MIN = Header_MessageType_Unknown;
const Header_MessageType Header_MessageType_MessageType_MAX = Header_MessageType_Disconnect;
const int Header_MessageType_MessageType_ARRAYSIZE = Header_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_MessageType_descriptor();
inline const ::std::string& Header_MessageType_Name(Header_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_MessageType_descriptor(), value);
}
inline bool Header_MessageType_Parse(
    const ::std::string& name, Header_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_MessageType>(
    Header_MessageType_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();
  
  Header(const Header& from);
  
  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();
  
  void Swap(Header* other);
  
  // implements Message ----------------------------------------------
  
  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Header_MessageType MessageType;
  static const MessageType Unknown = Header_MessageType_Unknown;
  static const MessageType Alive = Header_MessageType_Alive;
  static const MessageType Connect = Header_MessageType_Connect;
  static const MessageType Disconnect = Header_MessageType_Disconnect;
  static inline bool MessageType_IsValid(int value) {
    return Header_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    Header_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    Header_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    Header_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return Header_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return Header_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return Header_MessageType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 Id = 1 [default = 656565];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 Version = 2 [default = 1];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);
  
  // required .network.Header.MessageType Type = 3 [default = Unknown];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::network::Header_MessageType type() const;
  inline void set_type(::network::Header_MessageType value);
  
  // @@protoc_insertion_point(class_scope:network.Header)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 version_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Protobuf_2fnetwork_2eproto();
  friend void protobuf_AssignDesc_Protobuf_2fnetwork_2eproto();
  friend void protobuf_ShutdownFile_Protobuf_2fnetwork_2eproto();
  
  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Client : public ::google::protobuf::Message {
 public:
  Client();
  virtual ~Client();
  
  Client(const Client& from);
  
  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Client& default_instance();
  
  void Swap(Client* other);
  
  // implements Message ----------------------------------------------
  
  Client* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Client& from);
  void MergeFrom(const Client& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required int32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:network.Client)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_version();
  inline void clear_has_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::google::protobuf::int32 version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Protobuf_2fnetwork_2eproto();
  friend void protobuf_AssignDesc_Protobuf_2fnetwork_2eproto();
  friend void protobuf_ShutdownFile_Protobuf_2fnetwork_2eproto();
  
  void InitAsDefaultInstance();
  static Client* default_instance_;
};
// -------------------------------------------------------------------

class Alive : public ::google::protobuf::Message {
 public:
  Alive();
  virtual ~Alive();
  
  Alive(const Alive& from);
  
  inline Alive& operator=(const Alive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Alive& default_instance();
  
  void Swap(Alive* other);
  
  // implements Message ----------------------------------------------
  
  Alive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Alive& from);
  void MergeFrom(const Alive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .network.Client client = 1;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 1;
  inline const ::network::Client& client() const;
  inline ::network::Client* mutable_client();
  inline ::network::Client* release_client();
  
  // @@protoc_insertion_point(class_scope:network.Alive)
 private:
  inline void set_has_client();
  inline void clear_has_client();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::network::Client* client_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Protobuf_2fnetwork_2eproto();
  friend void protobuf_AssignDesc_Protobuf_2fnetwork_2eproto();
  friend void protobuf_ShutdownFile_Protobuf_2fnetwork_2eproto();
  
  void InitAsDefaultInstance();
  static Alive* default_instance_;
};
// -------------------------------------------------------------------

class Connect : public ::google::protobuf::Message {
 public:
  Connect();
  virtual ~Connect();
  
  Connect(const Connect& from);
  
  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Connect& default_instance();
  
  void Swap(Connect* other);
  
  // implements Message ----------------------------------------------
  
  Connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Connect& from);
  void MergeFrom(const Connect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .network.Client client = 1;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 1;
  inline const ::network::Client& client() const;
  inline ::network::Client* mutable_client();
  inline ::network::Client* release_client();
  
  // @@protoc_insertion_point(class_scope:network.Connect)
 private:
  inline void set_has_client();
  inline void clear_has_client();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::network::Client* client_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Protobuf_2fnetwork_2eproto();
  friend void protobuf_AssignDesc_Protobuf_2fnetwork_2eproto();
  friend void protobuf_ShutdownFile_Protobuf_2fnetwork_2eproto();
  
  void InitAsDefaultInstance();
  static Connect* default_instance_;
};
// -------------------------------------------------------------------

class Disconnect : public ::google::protobuf::Message {
 public:
  Disconnect();
  virtual ~Disconnect();
  
  Disconnect(const Disconnect& from);
  
  inline Disconnect& operator=(const Disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Disconnect& default_instance();
  
  void Swap(Disconnect* other);
  
  // implements Message ----------------------------------------------
  
  Disconnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Disconnect& from);
  void MergeFrom(const Disconnect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .network.Client client = 1;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 1;
  inline const ::network::Client& client() const;
  inline ::network::Client* mutable_client();
  inline ::network::Client* release_client();
  
  // @@protoc_insertion_point(class_scope:network.Disconnect)
 private:
  inline void set_has_client();
  inline void clear_has_client();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::network::Client* client_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Protobuf_2fnetwork_2eproto();
  friend void protobuf_AssignDesc_Protobuf_2fnetwork_2eproto();
  friend void protobuf_ShutdownFile_Protobuf_2fnetwork_2eproto();
  
  void InitAsDefaultInstance();
  static Disconnect* default_instance_;
};
// ===================================================================


// ===================================================================

// Header

// required int32 Id = 1 [default = 656565];
inline bool Header::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_id() {
  id_ = 656565;
  clear_has_id();
}
inline ::google::protobuf::int32 Header::id() const {
  return id_;
}
inline void Header::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 Version = 2 [default = 1];
inline bool Header::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_version() {
  version_ = 1;
  clear_has_version();
}
inline ::google::protobuf::int32 Header::version() const {
  return version_;
}
inline void Header::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// required .network.Header.MessageType Type = 3 [default = Unknown];
inline bool Header::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::network::Header_MessageType Header::type() const {
  return static_cast< ::network::Header_MessageType >(type_);
}
inline void Header::set_type(::network::Header_MessageType value) {
  GOOGLE_DCHECK(::network::Header_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Client

// required bytes id = 1;
inline bool Client::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Client::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Client::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Client::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Client::id() const {
  return *id_;
}
inline void Client::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Client::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Client::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Client::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Client::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 version = 2;
inline bool Client::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Client::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Client::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Client::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Client::version() const {
  return version_;
}
inline void Client::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// -------------------------------------------------------------------

// Alive

// required .network.Client client = 1;
inline bool Alive::has_client() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Alive::set_has_client() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Alive::clear_has_client() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Alive::clear_client() {
  if (client_ != NULL) client_->::network::Client::Clear();
  clear_has_client();
}
inline const ::network::Client& Alive::client() const {
  return client_ != NULL ? *client_ : *default_instance_->client_;
}
inline ::network::Client* Alive::mutable_client() {
  set_has_client();
  if (client_ == NULL) client_ = new ::network::Client;
  return client_;
}
inline ::network::Client* Alive::release_client() {
  clear_has_client();
  ::network::Client* temp = client_;
  client_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Connect

// required .network.Client client = 1;
inline bool Connect::has_client() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connect::set_has_client() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connect::clear_has_client() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Connect::clear_client() {
  if (client_ != NULL) client_->::network::Client::Clear();
  clear_has_client();
}
inline const ::network::Client& Connect::client() const {
  return client_ != NULL ? *client_ : *default_instance_->client_;
}
inline ::network::Client* Connect::mutable_client() {
  set_has_client();
  if (client_ == NULL) client_ = new ::network::Client;
  return client_;
}
inline ::network::Client* Connect::release_client() {
  clear_has_client();
  ::network::Client* temp = client_;
  client_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Disconnect

// required .network.Client client = 1;
inline bool Disconnect::has_client() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Disconnect::set_has_client() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Disconnect::clear_has_client() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Disconnect::clear_client() {
  if (client_ != NULL) client_->::network::Client::Clear();
  clear_has_client();
}
inline const ::network::Client& Disconnect::client() const {
  return client_ != NULL ? *client_ : *default_instance_->client_;
}
inline ::network::Client* Disconnect::mutable_client() {
  set_has_client();
  if (client_ == NULL) client_ = new ::network::Client;
  return client_;
}
inline ::network::Client* Disconnect::release_client() {
  clear_has_client();
  ::network::Client* temp = client_;
  client_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network::Header_MessageType>() {
  return ::network::Header_MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Protobuf_2fnetwork_2eproto__INCLUDED
